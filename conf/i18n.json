[
  {
    "raw": "no bucket found for backup",
    "en_US": "no bucket found for backup",
    "zh_CN": "",
    "arguments": [],
    "line": 452,
    "fileName": "src/main/java/org/zstack/aliyun/backup/BackupToAliyunBase.java"
  },
  {
    "raw": "regionId, accessKey and keySecret must be set",
    "en_US": "regionId, accessKey and keySecret must be set",
    "zh_CN": "",
    "arguments": [],
    "line": 26,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunClient.java"
  },
  {
    "raw": "Bucket name is already existed (maybe created by other user), Please select a different name and try again.(aliyun request-id: %s)",
    "en_US": "Bucket name is already existed (maybe created by other user), Please select a different name and try again.(aliyun request-id: {0})",
    "zh_CN": "对象存储名已经存在（有可能被别的用户使用了），请使用一个新的命名来尝试",
    "arguments": [
      "e.getRequestId()"
    ],
    "line": 1475,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java"
  },
  {
    "raw": "entry is still existed after %s ms",
    "en_US": "entry is still existed after {0} ms",
    "zh_CN": "",
    "arguments": [
      "AliyunConstant.DEFAULT_ENTRY_WAIT_STATUS_TIMEOUT"
    ],
    "line": 2145,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java"
  },
  {
    "raw": "image already existed remote, please use sync first.",
    "en_US": "image already existed remote, please use sync first.",
    "zh_CN": "",
    "arguments": [],
    "line": 2663,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java"
  },
  {
    "raw": "no identity zones can be used now",
    "en_US": "no identity zones can be used now",
    "zh_CN": "",
    "arguments": [],
    "line": 908,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java"
  },
  {
    "raw": "regionId[%s] is invalid by aliyun!",
    "en_US": "regionId[{0}] is invalid by aliyun!",
    "zh_CN": "",
    "arguments": [
      "request.getRegionId()"
    ],
    "line": 1068,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java"
  },
  {
    "raw": "ecs image existed remote and local, ecs image uuid: %s, name: %s, created time: %s",
    "en_US": "ecs image existed remote and local, ecs image uuid: {0}, name: {1}, created time: {2}",
    "zh_CN": "",
    "arguments": [
      "eivo.getUuid()",
      "eivo.getName()",
      "eivo.getCreateDate()"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/CheckEcsImageExistPublicFlow.java"
  },
  {
    "raw": "ecs image existed remote, name: %s, created time: %s",
    "en_US": "ecs image existed remote, name: {0}, created time: {1}",
    "zh_CN": "",
    "arguments": [
      "msg.getName()",
      "new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\").format(HybridUtilsForAliyun.fmtTime(rpl.getCreateDate()))"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/CheckEcsImageExistPublicFlow.java"
  },
  {
    "raw": "image has bee deleted!",
    "en_US": "image has bee deleted!",
    "zh_CN": "",
    "arguments": [],
    "line": 48,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/CheckEcsImageExistPublicFlow.java"
  },
  {
    "raw": "No Available instance types now.",
    "en_US": "No Available instance types now.",
    "zh_CN": "",
    "arguments": [],
    "line": 119,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/CreateEcsInstancePublicFlow.java"
  },
  {
    "raw": "no system disk found for ecs: [%s], ecs id is: [%s]",
    "en_US": "no system disk found for ecs: [{0}], ecs id is: [{1}]",
    "zh_CN": "",
    "arguments": [
      "ecs.getUuid()",
      "ecs.getEcsInstanceId()"
    ],
    "line": 301,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/CreateEcsInstancePublicFlow.java"
  },
  {
    "raw": "Only delete ecs which status is running or stopped, now is %s",
    "en_US": "Only delete ecs which status is running or stopped, now is {0}",
    "zh_CN": "",
    "arguments": [
      "evo.getEcsStatus().toString()"
    ],
    "line": 62,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "Only postpaid ecs support delete remote, the indicate ecs charge type is: %s",
    "en_US": "Only postpaid ecs support delete remote, the indicate ecs charge type is: {0}",
    "zh_CN": "",
    "arguments": [
      "evo.getChargeType().toString()"
    ],
    "line": 70,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "Only admin can set parameter [onlyZstack] \u003d false",
    "en_US": "Only admin can set parameter [onlyZstack] \u003d false",
    "zh_CN": "",
    "arguments": [],
    "line": 68,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "vSwitch availableIpAddress is not enough, now is (%d)",
    "en_US": "vSwitch availableIpAddress is not enough, now is (%d)",
    "zh_CN": "",
    "arguments": [
      "evo.getAvailableIpAddressCount()"
    ],
    "line": 96,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "%s is not in cidr range: %s",
    "en_US": "{0} is not in cidr range: {1}",
    "zh_CN": "",
    "arguments": [
      "privateIp",
      "cidr"
    ],
    "line": 100,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "private ip is existed in vswitch: %s, allocated to ecs: %s",
    "en_US": "private ip is existed in vswitch: {0}, allocated to ecs: {1}",
    "zh_CN": "",
    "arguments": [
      "vSwitchUuid",
      "ecs.getUuid()"
    ],
    "line": 134,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "bandwidth must be set while allocate publicIp",
    "en_US": "bandwidth must be set while allocate publicIp",
    "zh_CN": "",
    "arguments": [],
    "line": 129,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "%s is not ipv4 address",
    "en_US": "{0} is not ipv4 address",
    "zh_CN": "",
    "arguments": [
      "msg.getPrivateIpAddress()"
    ],
    "line": 132,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "%s is not valid volume type, valid types are [%s]",
    "en_US": "{0} is not valid volume type, valid types are [{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getEcsRootVolumeType()",
      "EcsInstanceConstant.validVolumeCategory.toString()"
    ],
    "line": 135,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "instanceOffering or instanceType must be set!",
    "en_US": "instanceOffering or instanceType must be set!",
    "zh_CN": "",
    "arguments": [],
    "line": 139,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "no backup storage found for imageUuid: %s",
    "en_US": "no backup storage found for imageUuid: {0}",
    "zh_CN": "",
    "arguments": [
      "imageUuid"
    ],
    "line": 110,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "exceeded backup storage found for the imageUuid: %s, please indicate it manually",
    "en_US": "exceeded backup storage found for the imageUuid: {0}, please indicate it manually",
    "zh_CN": "",
    "arguments": [
      "imageUuid"
    ],
    "line": 114,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "valid platform:[%s] for aliyun image import, valid value are: [%s]",
    "en_US": "valid platform:[{0}] for aliyun image import, valid value are: [{1}]",
    "zh_CN": "",
    "arguments": [
      "platform",
      "EcsImageConstant.ECS_IMAGE_PLATFORM.getValid()"
    ],
    "line": 66,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "image [%s] is not enable now",
    "en_US": "image [{0}] is not enable now",
    "zh_CN": "",
    "arguments": [
      "ivo.getUuid()"
    ],
    "line": 90,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "decode url failed: %s",
    "en_US": "decode url failed: {0}",
    "zh_CN": "",
    "arguments": [
      "rly1.getVncUrl()"
    ],
    "line": 191,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsInstanceManagerImpl.java"
  },
  {
    "raw": "ecs [%s] start failed, skip modify vnc password",
    "en_US": "ecs [{0}] start failed, skip modify vnc password",
    "zh_CN": "",
    "arguments": [
      "ecs.getUuid()"
    ],
    "line": 83,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/StartEcsInstancePublicFlow.java"
  },
  {
    "raw": "modify-ecs-[%s]-console-vnc-password-failed, due to [code: %s, details: %s]",
    "en_US": "modify-ecs-[{0}]-console-vnc-password-failed, due to [code: {1}, details: {2}]",
    "zh_CN": "",
    "arguments": [
      "ecs.getUuid()",
      "reply.getError().getCode()",
      "reply.getError().getDetails()"
    ],
    "line": 99,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/StartEcsInstancePublicFlow.java"
  },
  {
    "raw": "ecs instance [%s] start isn\u0027t finish, status is still [%s]",
    "en_US": "ecs instance [{0}] start isn\u0027t finish, status is still [{1}]",
    "zh_CN": "",
    "arguments": [
      "ecs.getUuid()",
      "rpl.getStatus()"
    ],
    "line": 64,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/StartEcsInstancePublicFlow.java"
  },
  {
    "raw": "ecs instance [%s] start failed, due to: [code: %s, details: %s]",
    "en_US": "ecs instance [{0}] start failed, due to: [code: {1}, details: {2}]",
    "zh_CN": "",
    "arguments": [
      "ecs.getUuid()",
      "reply.getError().getCode()",
      "reply.getError().getDetails()"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/StartEcsInstancePublicFlow.java"
  },
  {
    "raw": "izone[%s] already existed in datacenter[%s]",
    "en_US": "izone[{0}] already existed in datacenter[{1}]",
    "zh_CN": "",
    "arguments": [
      "izvo.getZoneId()",
      "izvo.getDataCenterUuid()"
    ],
    "line": 47,
    "fileName": "src/main/java/org/zstack/aliyun/identityzone/CreateIdentityZoneInDBFlow.java"
  },
  {
    "raw": "no identity chosen, may be stock problems",
    "en_US": "no identity chosen, may be stock problems",
    "zh_CN": "",
    "arguments": [],
    "line": 50,
    "fileName": "src/main/java/org/zstack/aliyun/identityzone/SelectValidIdentityZoneFlow.java"
  },
  {
    "raw": "the operation only custom image",
    "en_US": "the operation only custom image",
    "zh_CN": "",
    "arguments": [],
    "line": 70,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java"
  },
  {
    "raw": "Only system disks can create mirrors",
    "en_US": "Only system disks can create mirrors",
    "zh_CN": "",
    "arguments": [],
    "line": 79,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java"
  },
  {
    "raw": "can not delete ecs system image remote",
    "en_US": "can not delete ecs system image remote",
    "zh_CN": "",
    "arguments": [],
    "line": 104,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java"
  },
  {
    "raw": "Only support ImageStoreBackupStorage",
    "en_US": "Only support ImageStoreBackupStorage",
    "zh_CN": "",
    "arguments": [],
    "line": 115,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java"
  },
  {
    "raw": "image name cannot starts with http:// or https://",
    "en_US": "image name cannot starts with http:// or https://",
    "zh_CN": "",
    "arguments": [],
    "line": 118,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java"
  },
  {
    "raw": "no ossbucket attached to the datacenter: %s",
    "en_US": "no ossbucket attached to the datacenter: {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getDataCenterUuid()"
    ],
    "line": 236,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageManagerImpl.java"
  },
  {
    "raw": "the indicated image [%s] is importing to datacenter [%s] now...",
    "en_US": "the indicated image [{0}] is importing to datacenter [{1}] now...",
    "zh_CN": "",
    "arguments": [
      "msg.getImageUuid()",
      "msg.getDataCenterUuid()"
    ],
    "line": 274,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageManagerImpl.java"
  },
  {
    "raw": "ecs instance[%s] isn\u0027t existed, please check it.",
    "en_US": "ecs instance[{0}] isn\u0027t existed, please check it.",
    "zh_CN": "",
    "arguments": [
      "eipVo.getAllocateResourceUuid()"
    ],
    "line": 495,
    "fileName": "src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java"
  },
  {
    "raw": "Only ecs instances that are in the running and stopped status can detach the eip , but the ecs [%s] status is [%s] now ",
    "en_US": "Only ecs instances that are in the running and stopped status can detach the eip , but the ecs [{0}] status is [{1}] now ",
    "zh_CN": "",
    "arguments": [
      "ecsVo.getUuid()",
      "ecsVo.getEcsStatus()"
    ],
    "line": 499,
    "fileName": "src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java"
  },
  {
    "raw": "virtual border: %s has been deleted",
    "en_US": "virtual border: {0} has been deleted",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 2416,
    "fileName": "src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java"
  },
  {
    "raw": "destination cidr [%s] is existed and point to another instance-id [%s], please check or delete it first",
    "en_US": "destination cidr [{0}] is existed and point to another instance-id [{1}], please check or delete it first",
    "zh_CN": "",
    "arguments": [
      "tupleCidr",
      "msg.getNextHopUuid()"
    ],
    "line": 2996,
    "fileName": "src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java"
  },
  {
    "raw": "Only esc instances that are in the running and stopped status can attach the eip , but the ecs [%s] status is [%s] now ",
    "en_US": "Only esc instances that are in the running and stopped status can attach the eip , but the ecs [{0}] status is [{1}] now ",
    "zh_CN": "",
    "arguments": [
      "evo.getUuid()",
      "evo.getEcsStatus()"
    ],
    "line": 3467,
    "fileName": "src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java"
  },
  {
    "raw": "Vbr: [%s] is in create connection progress, please wait...",
    "en_US": "Vbr: [{0}] is in create connection progress, please wait...",
    "zh_CN": "",
    "arguments": [
      "msg.getVbrUuid()"
    ],
    "line": 551,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/AliyunConnectionManagerImpl.java"
  },
  {
    "raw": "custom cidr [%s] is already existed in vbr [%s], it is overlapped with target cidr [%s], please check and delete it first.",
    "en_US": "custom cidr [{0}] is already existed in vbr [{1}], it is overlapped with target cidr [{2}], please check and delete it first.",
    "zh_CN": "",
    "arguments": [
      "tuple.get(0, String.class)",
      "msg.getVbrUuid()",
      "vpcCidr"
    ],
    "line": 67,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/CreateVbrRouteEntryFlow.java"
  },
  {
    "raw": "local cidr and entry is already existed in vbr [%s], skip create entry",
    "en_US": "local cidr and entry is already existed in vbr [{0}], skip create entry",
    "zh_CN": "",
    "arguments": [
      "msg.getVbrUuid()"
    ],
    "line": 131,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/CreateVbrRouteEntryFlow.java"
  },
  {
    "raw": "vpc cidr and entry is already existed in vbr [%s], skip create entry",
    "en_US": "vpc cidr and entry is already existed in vbr [{0}], skip create entry",
    "zh_CN": "",
    "arguments": [
      "msg.getVbrUuid()"
    ],
    "line": 64,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/CreateVbrRouteEntryFlow.java"
  },
  {
    "raw": "custom cidr [%s] is already existed in vrouter [%s], it is overlapped with target cidr [%s], please check and delete it first.",
    "en_US": "custom cidr [{0}] is already existed in vrouter [{1}], it is overlapped with target cidr [{2}], please check and delete it first.",
    "zh_CN": "",
    "arguments": [
      "tuple.get(0, String.class)",
      "vRouterUuid",
      "localCidrs.get(0)"
    ],
    "line": 61,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/CreateVpcRouteEntryFlow.java"
  },
  {
    "raw": "local cidr and entry is already existed in vrouter [%s], skip create entry",
    "en_US": "local cidr and entry is already existed in vrouter [{0}], skip create entry",
    "zh_CN": "",
    "arguments": [
      "vRouterUuid"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/CreateVpcRouteEntryFlow.java"
  },
  {
    "raw": "No Such Cidr found for l3network: %s",
    "en_US": "No Such Cidr found for l3network: {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getL3networkUuid()"
    ],
    "line": 45,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/GetCidrsFlow.java"
  },
  {
    "raw": "No Such VRouter nic found for l3network: %s",
    "en_US": "No Such VRouter nic found for l3network: {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getL3networkUuid()"
    ],
    "line": 37,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/GetCidrsFlow.java"
  },
  {
    "raw": "no such vpc found for: %s",
    "en_US": "no such vpc found for: {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 50,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "no such vm found for: %s",
    "en_US": "no such vm found for: {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 56,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "no such vbr found for: %s",
    "en_US": "no such vbr found for: {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 62,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "no such l3network found for: %s",
    "en_US": "no such l3network found for: {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 68,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "not a supported resource type: %s",
    "en_US": "not a supported resource type: {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getResourceType()"
    ],
    "line": 73,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "Only admin can create connections",
    "en_US": "Only admin can create connections",
    "zh_CN": "",
    "arguments": [],
    "line": 79,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "CpeIp must be ipv4 address, but now is %s",
    "en_US": "CpeIp must be ipv4 address, but now is {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getCpeIp()"
    ],
    "line": 83,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "cpeIp must be ipv4 address",
    "en_US": "cpeIp must be ipv4 address",
    "zh_CN": "",
    "arguments": [],
    "line": 76,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "l3network %s and vpc %s already connected, please check it",
    "en_US": "l3network {0} and vpc {1} already connected, please check it",
    "zh_CN": "",
    "arguments": [
      "msg.getL3networkUuid()",
      "msg.getVpcUuid()"
    ],
    "line": 82,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "ossBucket [%s] is already added in dataCenter [%s]",
    "en_US": "ossBucket [{0}] is already added in dataCenter [{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getBucketName()",
      "msg.getDataCenterUuid()"
    ],
    "line": 33,
    "fileName": "src/main/java/org/zstack/aliyun/oss/EcsOssApiInterceptor.java"
  },
  {
    "raw": "OssBucket[%s] is not attached.",
    "en_US": "OssBucket[{0}] is not attached.",
    "zh_CN": "",
    "arguments": [
      "ovo.getUuid()"
    ],
    "line": 41,
    "fileName": "src/main/java/org/zstack/aliyun/oss/EcsOssApiInterceptor.java"
  },
  {
    "raw": "oss bucket is not empty!",
    "en_US": "oss bucket is not empty!",
    "zh_CN": "",
    "arguments": [],
    "line": 144,
    "fileName": "src/main/java/org/zstack/aliyun/oss/EcsOssManagerImpl.java"
  },
  {
    "raw": "There is a current ossbucket[%s] for dataCenter[%s] already attached, update to an other.",
    "en_US": "There is a current ossbucket[{0}] for dataCenter[{1}] already attached, update to an other.",
    "zh_CN": "",
    "arguments": [
      "old.getUuid()",
      "old.getDataCenterUuid()"
    ],
    "line": 343,
    "fileName": "src/main/java/org/zstack/aliyun/oss/EcsOssManagerImpl.java"
  },
  {
    "raw": "Root volume cannot be deleted",
    "en_US": "Root volume cannot be deleted",
    "zh_CN": "",
    "arguments": [],
    "line": 62,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "Cannot set the disk\u0027s deleteWithInstance property to false when the category property of the disk is cloud and portable property is false",
    "en_US": "Cannot set the disk\u0027s deleteWithInstance property to false when the category property of the disk is cloud and portable property is false",
    "zh_CN": "",
    "arguments": [],
    "line": 83,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "Cannot set the disk\u0027s deleteWithInstance property to false when the category property of the disk is ephemeral",
    "en_US": "Cannot set the disk\u0027s deleteWithInstance property to false when the category property of the disk is ephemeral",
    "zh_CN": "",
    "arguments": [],
    "line": 78,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "The disk [%s] is not attach on any instance ",
    "en_US": "The disk [{0}] is not attach on any instance ",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 95,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "The state of the ecs [%s] instance must be running or stopped",
    "en_US": "The state of the ecs [{0}] instance must be running or stopped",
    "zh_CN": "",
    "arguments": [
      "msg.getEcsUuid()"
    ],
    "line": 121,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "Only data disk can be mounted on ecs",
    "en_US": "Only data disk can be mounted on ecs",
    "zh_CN": "",
    "arguments": [],
    "line": 105,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "The disk not be attach on any ecs",
    "en_US": "The disk not be attach on any ecs",
    "zh_CN": "",
    "arguments": [],
    "line": 109,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "Non-independent disk can only be destroyed with instances",
    "en_US": "Non-independent disk can only be destroyed with instances",
    "zh_CN": "",
    "arguments": [],
    "line": 143,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "Disk and ecs instances must be in the same zone",
    "en_US": "Disk and ecs instances must be in the same zone",
    "zh_CN": "",
    "arguments": [],
    "line": 126,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "The disk [%s] is already mounted on the instance [%s]",
    "en_US": "The disk [{0}] is already mounted on the instance [{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getDiskUuid()",
      "msg.getEcsUuid()"
    ],
    "line": 130,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "Only data disk can attach to ecs",
    "en_US": "Only data disk can attach to ecs",
    "zh_CN": "",
    "arguments": [],
    "line": 135,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "Cannot attach disk when in use",
    "en_US": "Cannot attach disk when in use",
    "zh_CN": "",
    "arguments": [],
    "line": 139,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "The size and snapshot id in the request parameter must select one of the items to specify the size of the disk or create a disk using the snapshot.",
    "en_US": "The size and snapshot id in the request parameter must select one of the items to specify the size of the disk or create a disk using the snapshot.",
    "zh_CN": "",
    "arguments": [],
    "line": 154,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "Not allowed create disk on root volume snapshot",
    "en_US": "Not allowed create disk on root volume snapshot",
    "zh_CN": "",
    "arguments": [],
    "line": 167,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "the disk name or description cannot set start with \u0027http://\u0027 or \u0027https://\u0027 ",
    "en_US": "the disk name or description cannot set start with \u0027http://\u0027 or \u0027https://\u0027 ",
    "zh_CN": "",
    "arguments": [],
    "line": 176,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "The operation allows only when ecs state of the ecs instance status be running or stopped",
    "en_US": "The operation allows only when ecs state of the ecs instance status be running or stopped",
    "zh_CN": "",
    "arguments": [],
    "line": 41,
    "fileName": "src/main/java/org/zstack/aliyun/storage/snapshot/AliyunSnapshotApiInterceptor.java"
  },
  {
    "raw": "More than one BackupStorage on the same host identified by hostname. There has been a SftpBackupStorage [hostname:%s] existing. The BackupStorage type to be added is %s. ",
    "en_US": "More than one BackupStorage on the same host identified by hostname. There has been a SftpBackupStorage [hostname:{0}] existing. The BackupStorage type to be added is {1}. ",
    "zh_CN": "有超过一个镜像服务器拥有相同的主机名，已经存在一个 SFTP 镜像存储 [主机名:{0}]，被添加的镜像存储类型为 {1}",
    "arguments": [
      "hostname",
      "newBS"
    ],
    "line": 60,
    "fileName": "src/main/java/org/zstack/apimediator/ApiValidator.java"
  },
  {
    "raw": "More than one BackupStorage on the same host identified by hostname. There has been an ImageStoreBackupStorage [hostname:%s] existing. The BackupStorage type to be added is %s. ",
    "en_US": "More than one BackupStorage on the same host identified by hostname. There has been an ImageStoreBackupStorage [hostname:{0}] existing. The BackupStorage type to be added is {1}. ",
    "zh_CN": "有超过一个镜像服务器拥有相同的主机名，已经存在一个镜像仓库 [主机名:{0}]，被添加的镜像存储类型为 {1}",
    "arguments": [
      "hostname",
      "newBS"
    ],
    "line": 68,
    "fileName": "src/main/java/org/zstack/apimediator/ApiValidator.java"
  },
  {
    "raw": "appliance vm[uuid:%s] is in status of %s that cannot make http call to %s",
    "en_US": "appliance vm[uuid:{0}] is in status of {1} that cannot make http call to {2}",
    "zh_CN": "系统虚拟机[uuid:{0}]处于{1}状态，无法对[{2}]执行HTTP RPC调用",
    "arguments": [
      "self.getUuid()",
      "getSelf().getStatus()",
      "msg.getPath()"
    ],
    "line": 126,
    "fileName": "src/main/java/org/zstack/appliancevm/ApplianceVmBase.java"
  },
  {
    "raw": "Only admin can get baremetal console proxy",
    "en_US": "Only admin can get baremetal console proxy",
    "zh_CN": "",
    "arguments": [],
    "line": 37,
    "fileName": "src/main/java/org/zstack/baremetal/console/BaremetalConsoleProxyApiInterceptor.java"
  },
  {
    "raw": "Cannot find baremetal chassis of uuid %s",
    "en_US": "Cannot find baremetal chassis of uuid {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getChassisUuid()"
    ],
    "line": 46,
    "fileName": "src/main/java/org/zstack/baremetal/console/BaremetalConsoleProxyApiInterceptor.java"
  },
  {
    "raw": "Cannot find baremetal console proxy for chassis %s",
    "en_US": "Cannot find baremetal console proxy for chassis {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getChassisUuid()"
    ],
    "line": 56,
    "fileName": "src/main/java/org/zstack/baremetal/console/BaremetalConsoleProxyApiInterceptor.java"
  },
  {
    "raw": "failed to create Console Proxy for Baremetal chassis %s",
    "en_US": "failed to create Console Proxy for Baremetal chassis {0}",
    "zh_CN": "",
    "arguments": [
      "chassis.getUuid()"
    ],
    "line": 76,
    "fileName": "src/main/java/org/zstack/baremetal/console/BaremetalConsoleProxyImpl.java"
  },
  {
    "raw": "successfully created Console Proxy for Baremetal chassis %s",
    "en_US": "successfully created Console Proxy for Baremetal chassis {0}",
    "zh_CN": "",
    "arguments": [
      "chassis.getUuid()"
    ],
    "line": 70,
    "fileName": "src/main/java/org/zstack/baremetal/console/BaremetalConsoleProxyImpl.java"
  },
  {
    "raw": "failed to delete Console Proxy for Baremetal chassis %s",
    "en_US": "failed to delete Console Proxy for Baremetal chassis {0}",
    "zh_CN": "",
    "arguments": [
      "chassis.getUuid()"
    ],
    "line": 112,
    "fileName": "src/main/java/org/zstack/baremetal/console/BaremetalConsoleProxyImpl.java"
  },
  {
    "raw": "successfully deleted Console Proxy for Baremetal chassis %s",
    "en_US": "successfully deleted Console Proxy for Baremetal chassis {0}",
    "zh_CN": "",
    "arguments": [
      "chassis.getUuid()"
    ],
    "line": 106,
    "fileName": "src/main/java/org/zstack/baremetal/console/BaremetalConsoleProxyImpl.java"
  },
  {
    "raw": "IP/Netmask should be all empty or all exists.",
    "en_US": "IP/Netmask should be all empty or all exists.",
    "zh_CN": "",
    "arguments": [],
    "line": 45,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "Ip address %s is not valid.",
    "en_US": "Ip address {0} is not valid.",
    "zh_CN": "",
    "arguments": [
      "ip"
    ],
    "line": 50,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "Ip address %s is same as IPMI address of chassis %s.",
    "en_US": "Ip address {0} is same as IPMI address of chassis {1}.",
    "zh_CN": "",
    "arguments": [
      "ip",
      "chassis.getUuid()"
    ],
    "line": 57,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "Netmask %s is not valid.",
    "en_US": "Netmask {0} is not valid.",
    "zh_CN": "",
    "arguments": [
      "netmask"
    ],
    "line": 64,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "Gateway %s is not valid.",
    "en_US": "Gateway {0} is not valid.",
    "zh_CN": "",
    "arguments": [
      "gateway"
    ],
    "line": 70,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "Name Server %s is not valid.",
    "en_US": "Name Server {0} is not valid.",
    "zh_CN": "",
    "arguments": [
      "netmask"
    ],
    "line": 76,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "IP address %s and Gateway %s do not belong to one subnet!",
    "en_US": "IP address {0} and Gateway {1} do not belong to one subnet!",
    "zh_CN": "",
    "arguments": [
      "ip",
      "gateway"
    ],
    "line": 82,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "Mac cannot be empty.",
    "en_US": "Mac cannot be empty.",
    "zh_CN": "",
    "arguments": [],
    "line": 94,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "Mac address %s is not valid. It should be like 11:11:11:11:11:11",
    "en_US": "Mac address {0} is not valid. It should be like 11:11:11:11:11:11",
    "zh_CN": "",
    "arguments": [
      "nicCfg.getMac()"
    ],
    "line": 98,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "Same MACs exist in nicCfgs",
    "en_US": "Same MACs exist in nicCfgs",
    "zh_CN": "",
    "arguments": [],
    "line": 180,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "Same IPs exist in nicCfgs",
    "en_US": "Same IPs exist in nicCfgs",
    "zh_CN": "",
    "arguments": [],
    "line": 183,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "MAC %s has been taken, please choose another one.",
    "en_US": "MAC {0} has been taken, please choose another one.",
    "zh_CN": "",
    "arguments": [
      "nicCfg.getMac()"
    ],
    "line": 122,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "IP %s has been taken, please choose another one.",
    "en_US": "IP {0} has been taken, please choose another one.",
    "zh_CN": "",
    "arguments": [
      "nicCfg.getIp()"
    ],
    "line": 132,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "There must be one and only one pxe\u003dtrue.",
    "en_US": "There must be one and only one pxe\u003dtrue.",
    "zh_CN": "",
    "arguments": [],
    "line": 155,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "Bonding name cannot be empty.",
    "en_US": "Bonding name cannot be empty.",
    "zh_CN": "",
    "arguments": [],
    "line": 177,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "Bonding name %s is too long ( \u003e 255 ).",
    "en_US": "Bonding name {0} is too long ( \u003e 255 ).",
    "zh_CN": "",
    "arguments": [
      "name"
    ],
    "line": 155,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "Same name exist in bondings",
    "en_US": "Same name exist in bondings",
    "zh_CN": "",
    "arguments": [],
    "line": 187,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "Bonding slaves is empty.",
    "en_US": "Bonding slaves is empty.",
    "zh_CN": "",
    "arguments": [],
    "line": 162,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "Same slave (%s) exist in bondings",
    "en_US": "Same slave ({0}) exist in bondings",
    "zh_CN": "",
    "arguments": [
      "slave"
    ],
    "line": 203,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "Bonding mode is empty.",
    "en_US": "Bonding mode is empty.",
    "zh_CN": "",
    "arguments": [],
    "line": 169,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "Bonding mode %s is not valid [0 ~ 6].",
    "en_US": "Bonding mode {0} is not valid [0 ~ 6].",
    "zh_CN": "",
    "arguments": [
      "mode"
    ],
    "line": 220,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "Same ip (%s) exist in bondings",
    "en_US": "Same ip ({0}) exist in bondings",
    "zh_CN": "",
    "arguments": [
      "ip"
    ],
    "line": 229,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "NIC %s has been configured in nicCfgs, it cannot be bonding slave.",
    "en_US": "NIC {0} has been configured in nicCfgs, it cannot be bonding slave.",
    "zh_CN": "",
    "arguments": [
      "slave"
    ],
    "line": 270,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "Same IP %s exists in both nicCfgs and bondings.",
    "en_US": "Same IP {0} exists in both nicCfgs and bondings.",
    "zh_CN": "",
    "arguments": [
      "ip"
    ],
    "line": 279,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "Baremetal Chassis uuid %s does not exist.",
    "en_US": "Baremetal Chassis uuid {0} does not exist.",
    "zh_CN": "",
    "arguments": [
      "chassisUuid"
    ],
    "line": 190,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "Baremetal HostCfg with chassis uuid %s already exists.",
    "en_US": "Baremetal HostCfg with chassis uuid {0} already exists.",
    "zh_CN": "",
    "arguments": [
      "chassisUuid"
    ],
    "line": 197,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "nicCfgs is missing.",
    "en_US": "nicCfgs is missing.",
    "zh_CN": "",
    "arguments": [],
    "line": 203,
    "fileName": "src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java"
  },
  {
    "raw": "IPMI Address %s is not valid",
    "en_US": "IPMI Address {0} is not valid",
    "zh_CN": "",
    "arguments": [
      "address"
    ],
    "line": 40,
    "fileName": "src/main/java/org/zstack/baremetal/power/BaremetalChassisApiInterceptor.java"
  },
  {
    "raw": "The input IPMI address %s is same as IP address of host nicCfg %s.",
    "en_US": "The input IPMI address {0} is same as IP address of host nicCfg {1}.",
    "zh_CN": "",
    "arguments": [
      "address",
      "nicCfg.getUuid()"
    ],
    "line": 48,
    "fileName": "src/main/java/org/zstack/baremetal/power/BaremetalChassisApiInterceptor.java"
  },
  {
    "raw": "The input IPMI address %s is same as IP address of host bonding %s.",
    "en_US": "The input IPMI address {0} is same as IP address of host bonding {1}.",
    "zh_CN": "",
    "arguments": [
      "address",
      "bonding.getUuid()"
    ],
    "line": 64,
    "fileName": "src/main/java/org/zstack/baremetal/power/BaremetalChassisApiInterceptor.java"
  },
  {
    "raw": "Cannot reach remote server with IPMI address %s, IPMI port %s, IPMI username %s, IPMI password %s",
    "en_US": "Cannot reach remote server with IPMI address {0}, IPMI port {1}, IPMI username {2}, IPMI password {3}",
    "zh_CN": "",
    "arguments": [
      "address",
      "port",
      "username",
      "password"
    ],
    "line": 71,
    "fileName": "src/main/java/org/zstack/baremetal/power/BaremetalChassisApiInterceptor.java"
  },
  {
    "raw": "Baremetal Chassis of IPMI address %s and IPMI port %s has already been created.",
    "en_US": "Baremetal Chassis of IPMI address {0} and IPMI port {1} has already been created.",
    "zh_CN": "",
    "arguments": [
      "address",
      "port"
    ],
    "line": 91,
    "fileName": "src/main/java/org/zstack/baremetal/power/BaremetalChassisApiInterceptor.java"
  },
  {
    "raw": "IPMI Address and Port %s:%s already exists.",
    "en_US": "IPMI Address and Port {0}:{1} already exists.",
    "zh_CN": "",
    "arguments": [
      "address",
      "port"
    ],
    "line": 117,
    "fileName": "src/main/java/org/zstack/baremetal/power/BaremetalChassisApiInterceptor.java"
  },
  {
    "raw": "Chassis %s has already been provisioned. Update status \u003d Unprovisioned before re-provision.",
    "en_US": "Chassis {0} has already been provisioned. Update status \u003d Unprovisioned before re-provision.",
    "zh_CN": "",
    "arguments": [
      "uuid"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/baremetal/power/BaremetalChassisApiInterceptor.java"
  },
  {
    "raw": "Failed to get Hardware Info of chassis %s. It\u0027s most likely that chassis cannot get dhcp response from the PXE server. Please check your network configuration.",
    "en_US": "Failed to get Hardware Info of chassis {0}. It\u0027s most likely that chassis cannot get dhcp response from the PXE server. Please check your network configuration.",
    "zh_CN": "",
    "arguments": [
      "chassisUuid"
    ],
    "line": 199,
    "fileName": "src/main/java/org/zstack/baremetal/power/BaremetalChassisImpl.java"
  },
  {
    "raw": "Set Range Start \u0026 End, or set Range Start \u0026 End \u0026 Netmask!",
    "en_US": "Set Range Start \u0026 End, or set Range Start \u0026 End \u0026 Netmask!",
    "zh_CN": "",
    "arguments": [],
    "line": 87,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "PXE Server DHCP Range Start %s is not valid.",
    "en_US": "PXE Server DHCP Range Start {0} is not valid.",
    "zh_CN": "",
    "arguments": [
      "begin"
    ],
    "line": 52,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "PXE Server DHCP Range Stop %s is not valid.",
    "en_US": "PXE Server DHCP Range Stop {0} is not valid.",
    "zh_CN": "",
    "arguments": [
      "end"
    ],
    "line": 57,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "PXE Server DHCP Range Netmask %s is not valid.",
    "en_US": "PXE Server DHCP Range Netmask {0} is not valid.",
    "zh_CN": "",
    "arguments": [
      "netmask"
    ],
    "line": 62,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "PXE Server DHCP Range Start %s is larger than Range Stop %s.",
    "en_US": "PXE Server DHCP Range Start {0} is larger than Range Stop {1}.",
    "zh_CN": "",
    "arguments": [
      "begin",
      "end"
    ],
    "line": 67,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "PXE Server DHCP Range Start %s and Range Stop %s do not belong to the same subnet.",
    "en_US": "PXE Server DHCP Range Start {0} and Range Stop {1} do not belong to the same subnet.",
    "zh_CN": "",
    "arguments": [
      "begin",
      "end"
    ],
    "line": 72,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "IP/NM of DHCP Range [%s ~ %s : %s] cannot be connected to DHCP Interface %s.",
    "en_US": "IP/NM of DHCP Range [{0} ~ {1} : {2}] cannot be connected to DHCP Interface {3}.",
    "zh_CN": "",
    "arguments": [
      "begin",
      "end",
      "netmask !\u003d null ? netmask : dhcpNm",
      "dhcpNic"
    ],
    "line": 81,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "PXE Server DHCP Interface %s does not exists, or it does not have an IP address.",
    "en_US": "PXE Server DHCP Interface {0} does not exists, or it does not have an IP address.",
    "zh_CN": "",
    "arguments": [
      "msg.getDhcpInterface()"
    ],
    "line": 100,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "DHCP Netmask should be the same as netmask of DHCP Interface.",
    "en_US": "DHCP Netmask should be the same as netmask of DHCP Interface.",
    "zh_CN": "",
    "arguments": [],
    "line": 163,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "the start date must be greater than the end date",
    "en_US": "the start date must be greater than the end date",
    "zh_CN": "开始时间必须早于结束时间",
    "arguments": [],
    "line": 40,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "the minimal resource unit is megabyte, cannot be byte",
    "en_US": "the minimal resource unit is megabyte, cannot be byte",
    "zh_CN": "资源的最小单位必须为MB，而不是B",
    "arguments": [],
    "line": 88,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "price must be 0 and 9999.99",
    "en_US": "price must be 0 and 9999.99",
    "zh_CN": "价格必须在0和9999.99之间",
    "arguments": [],
    "line": 96,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "the backup storage[uuid:%s, type:%s] requires bound primary storage, however, the primary storage has not been added",
    "en_US": "the backup storage[uuid:{0}, type:{1}] requires bound primary storage, however, the primary storage has not been added",
    "zh_CN": "无法找到跟镜像服务器[uuid:{0}, type:{1}]配对的主存储。一些镜像服务器必须跟配对的主存储共同使用，例如Ceph镜像服务器只能搭配Ceph主存储使用。请检查你主存储的设置。",
    "arguments": [
      "spec.getRequiredBackupStorageUuid()",
      "bsType"
    ],
    "line": 97,
    "fileName": "src/main/java/org/zstack/compute/allocator/BackupStorageSelectPrimaryStorageAllocatorFlow.java"
  },
  {
    "raw": "The image[uuid:%s] is on the backup storage[uuid:%s, type:%s] that requires to work with primary storage[uuids:%s],however, no host found suitable to work with those primary storage",
    "en_US": "The image[uuid:{0}] is on the backup storage[uuid:{1}, type:{2}] that requires to work with primary storage[uuids:{3}],however, no host found suitable to work with those primary storage",
    "zh_CN": "镜像[uuid:{0}]所在的镜像服务器[uuid:{1}, type:{2}]必须跟主存储[uuid:{3}]配对使用，但无法找到可以跟满足条件并可以访问该主存储的物理机",
    "arguments": [
      "spec.getImage().getUuid()",
      "spec.getRequiredBackupStorageUuid()",
      "type",
      "psUuids"
    ],
    "line": 90,
    "fileName": "src/main/java/org/zstack/compute/allocator/BackupStorageSelectPrimaryStorageAllocatorFlow.java"
  },
  {
    "raw": "The image[uuid:%s, name:%s] is on the backup storage[uuid:%s, type:%s] that requires to work with primary storage[types:%s],however, no host found suitable to work with those primary storage",
    "en_US": "The image[uuid:{0}, name:{1}] is on the backup storage[uuid:{2}, type:{3}] that requires to work with primary storage[types:{4}],however, no host found suitable to work with those primary storage",
    "zh_CN": "镜像[uuid:{0},name:{1}]所在的镜像服务器[uuid:{2}, type:{3}]必须跟主存储[uuid:{4}]一起使用，但无法找到可以跟满足条件并可以访问该主存储的物理机",
    "arguments": [
      "spec.getImage().getUuid()",
      "spec.getImage().getType()",
      "spec.getRequiredBackupStorageUuid()",
      "type",
      "possiblePrimaryStorageTypes"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/compute/allocator/BackupStorageSelectPrimaryStorageAllocatorFlow.java"
  },
  {
    "raw": "either volumeUuid or volumeSnapshotUuid must be set",
    "en_US": "either volumeUuid or volumeSnapshotUuid must be set",
    "zh_CN": "盘uuid或者快照uuid必须被设置",
    "arguments": [],
    "line": 56,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostAllocatorApiInterceptor.java"
  },
  {
    "raw": "zoneUuids, clusterUuids, hostUuids must at least have one be none-empty list, or all is set to true",
    "en_US": "zoneUuids, clusterUuids, hostUuids must at least have one be none-empty list, or all is set to true",
    "zh_CN": "区域uuid，集群uuid,物理机uuid必须有一个不为空，或者全部都填写",
    "arguments": [],
    "line": 75,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostAllocatorApiInterceptor.java"
  },
  {
    "raw": "the image[uuid:%s, name:%s] is deleted on all backup storage",
    "en_US": "the image[uuid:{0}, name:{1}] is deleted on all backup storage",
    "zh_CN": "镜像[uuid:{0}, name:{1}]已经从所有镜像服务器上删除，无法执行相应操作",
    "arguments": [
      "spec.getImage().getUuid()",
      "spec.getImage().getName()"
    ],
    "line": 85,
    "fileName": "src/main/java/org/zstack/compute/allocator/ImageBackupStorageAllocatorFlow.java"
  },
  {
    "raw": "there has been a host having managementIp[%s]",
    "en_US": "there has been a host having managementIp[{0}]",
    "zh_CN": "已经存在一个管理IP是[{0}]的物理机",
    "arguments": [
      "msg.getManagementIp()"
    ],
    "line": 84,
    "fileName": "src/main/java/org/zstack/compute/host/HostApiInterceptor.java"
  },
  {
    "raw": "can not update host[uuid:%s]which is connecting or creating, please wait.",
    "en_US": "can not update host[uuid:{0}]which is connecting or creating, please wait.",
    "zh_CN": "无法更新物理机[uuid:{0}]的信息，处于连接或创建状态中，请等待。",
    "arguments": [
      "msg.getHostUuid()"
    ],
    "line": 81,
    "fileName": "src/main/java/org/zstack/compute/host/HostApiInterceptor.java"
  },
  {
    "raw": "managementIp[%s] is neither an IPv4 address nor a valid hostname",
    "en_US": "managementIp[{0}] is neither an IPv4 address nor a valid hostname",
    "zh_CN": "管理IP[{0}]既不是有效的IPv4地址也不是有效的物理机名",
    "arguments": [
      "msg.getManagementIp()"
    ],
    "line": 78,
    "fileName": "src/main/java/org/zstack/compute/host/HostApiInterceptor.java"
  },
  {
    "raw": "can not maintain host[uuid:%s]which is not Connected",
    "en_US": "can not maintain host[uuid:{0}]which is not Connected",
    "zh_CN": "只能对已连接状态的物理机[uuid:{0}]进行维护操作",
    "arguments": [
      "msg.getHostUuid()"
    ],
    "line": 94,
    "fileName": "src/main/java/org/zstack/compute/host/HostApiInterceptor.java"
  },
  {
    "raw": "host[uuid:%s, name:%s] is in state[%s], cannot perform required operation",
    "en_US": "host[uuid:{0}, name:{1}] is in state[{2}], cannot perform required operation",
    "zh_CN": "物理机[uuid:{0}, name:{1}]处于状态[{2}]中，不能处理该请求",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "self.getState()"
    ],
    "line": 104,
    "fileName": "src/main/java/org/zstack/compute/host/HostBase.java"
  },
  {
    "raw": "cannot change the state of Disconnected host into Maintenance ",
    "en_US": "cannot change the state of Disconnected host into Maintenance ",
    "zh_CN": "无法将Disconnected的物理机转为维护模式。",
    "arguments": [],
    "line": 455,
    "fileName": "src/main/java/org/zstack/compute/host/HostBase.java"
  },
  {
    "raw": "host is connecting",
    "en_US": "host is connecting",
    "zh_CN": "物理机正在连接",
    "arguments": [],
    "line": 566,
    "fileName": "src/main/java/org/zstack/compute/host/HostBase.java"
  },
  {
    "raw": "after connecting, host[name:%s, ip:%s] returns a null os version",
    "en_US": "after connecting, host[name:{0}, ip:{1}] returns a null os version",
    "zh_CN": "在连接操作后，物理机[name:{0}, ip:{1}]没有返回操作系统版本",
    "arguments": [
      "vo.getName()",
      "vo.getManagementIp()"
    ],
    "line": 275,
    "fileName": "src/main/java/org/zstack/compute/host/HostManagerImpl.java"
  },
  {
    "raw": "cluster[uuid:%s] already has host with os version[%s], but new added host[name:%s ip:%s] has host os version[%s]",
    "en_US": "cluster[uuid:{0}] already has host with os version[{1}], but new added host[name:{2} ip:{3}] has host os version[{4}]",
    "zh_CN": "集群[uuid:{0}]中物理机使用的操作系统版本是[{1}]，但是新的物理机[name:{2} ip:{3}]的操作系统版本是 [{4}]",
    "arguments": [
      "vo.getClusterUuid()",
      "currentVersion",
      "vo.getName()",
      "vo.getManagementIp()",
      "mineVersion"
    ],
    "line": 314,
    "fileName": "src/main/java/org/zstack/compute/host/HostManagerImpl.java"
  },
  {
    "raw": "current vm instance state[%s] doesn\u0027t allow to proceed message[%s], allowed states are %s",
    "en_US": "current vm instance state[{0}] doesn\u0027t allow to proceed message[{1}], allowed states are {2}",
    "zh_CN": "虚拟机状态[{0}]不允许支持的消息[{1}]，允许的状态是{2}",
    "arguments": [
      "currentState",
      "msg.getMessageName()",
      "checker.getStatesForOperation(msg.getMessageName())"
    ],
    "line": 149,
    "fileName": "src/main/java/org/zstack/compute/vm/AbstractVmInstance.java"
  },
  {
    "raw": "not dest host found in db, can\u0027t send change password cmd to the host!",
    "en_US": "not dest host found in db, can\u0027t send change password cmd to the host!",
    "zh_CN": "没有在物理机上发现数据库，不能发送更改密码的指令到这个物理机上",
    "arguments": [],
    "line": 50,
    "fileName": "src/main/java/org/zstack/compute/vm/ChangeVmPasswordFlow.java"
  },
  {
    "raw": "not system tag found on vm, vm must have the following system tag: qemuga, if you installed qemu-ga yourself, please use CreateSystemTag first.",
    "en_US": "not system tag found on vm, vm must have the following system tag: qemuga, if you installed qemu-ga yourself, please use CreateSystemTag first.",
    "zh_CN": "没有发现系统标签在云主机上，云主机必须有系统标签：qemuga。如果你已经安装了qemu-ga，请先使用 CreateSystemTag",
    "arguments": [],
    "line": 51,
    "fileName": "src/main/java/org/zstack/compute/vm/ChangeVmPasswordFlow.java"
  },
  {
    "raw": "not account preference found,  send change password cmd to the host!",
    "en_US": "not account preference found,  send change password cmd to the host!",
    "zh_CN": "没有优先级账户去发送改变密码的指令到物理机",
    "arguments": [],
    "line": 54,
    "fileName": "src/main/java/org/zstack/compute/vm/ChangeVmPasswordFlow.java"
  },
  {
    "raw": "the host[uuid:%s] is not connected",
    "en_US": "the host[uuid:{0}] is not connected",
    "zh_CN": "物理机[uuid:{0}]不是Connected状态",
    "arguments": [
      "hostUuid"
    ],
    "line": 43,
    "fileName": "src/main/java/org/zstack/compute/vm/DeleteVmGC.java"
  },
  {
    "raw": "direction must be set to in or out",
    "en_US": "direction must be set to in or out",
    "zh_CN": "方法必须设置in或者out",
    "arguments": [],
    "line": 337,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "not dest host found in db by uuid: %s, can\u0027t send change password cmd to the host!",
    "en_US": "not dest host found in db by uuid: {0}, can\u0027t send change password cmd to the host!",
    "zh_CN": "没有在物理机{0}上发现数据库，不能发送更改密码的指令到这个物理机上",
    "arguments": [
      "amsg.getVmInstanceUuid()"
    ],
    "line": 498,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "state is not correct while change password.",
    "en_US": "state is not correct while change password.",
    "zh_CN": "该状态不支持修改密码",
    "arguments": [],
    "line": 519,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": " Can not find the vm\u0027s host, please start the vm[%s], then mount the disk",
    "en_US": " Can not find the vm\u0027s host, please start the vm[{0}], then mount the disk",
    "zh_CN": "",
    "arguments": [
      "spec.getVmInventory().getUuid()"
    ],
    "line": 44,
    "fileName": "src/main/java/org/zstack/compute/vm/VmAllocatePrimaryStorageForAttachingDiskFlow.java"
  },
  {
    "raw": "unable to detach a nic[uuid:%s] from the vm[uuid:%s], %s",
    "en_US": "unable to detach a nic[uuid:{0}] from the vm[uuid:{1}], {2}",
    "zh_CN": "无法从云主机[uuid:{1}]卸载一个网卡[uuid:{0}]，错误细节：{2}",
    "arguments": [
      "msg.getVmNicUuid()",
      "msg.getVmInstanceUuid()",
      "r.getError()"
    ],
    "line": 391,
    "fileName": "src/main/java/org/zstack/compute/vm/VmCascadeExtension.java"
  },
  {
    "raw": "cannot find the iso[uuid:%s] in any connected backup storage attached to the zone[uuid:%s]. check below:\n1. if the backup storage is attached to the zone where the VM[name: %s, uuid:%s] is running\n2. if the backup storage is in connected status, if not, try reconnecting it",
    "en_US": "cannot find the iso[uuid:{0}] in any connected backup storage attached to the zone[uuid:{1}]. check below:\n1. if the backup storage is attached to the zone where the VM[name: {2}, uuid:{3}] is running\n2. if the backup storage is in connected status, if not, try reconnecting it",
    "zh_CN": "不能发现iso[uuid:{0}]在任何已经挂载到集群[uuid:{1}]上的并且处于Connected状态备份的镜像服务器。可以进行对以下选项的检查：1. 镜像服务器是否已经挂载到区域中的任何运行状态的云主机[name: {2}, uuid:{3}]上；2. 如果镜像服务器不是处于连接状态，请尝试重连",
    "arguments": [
      "iso.getUuid()",
      "host.getZoneUuid()",
      "spec.getVmInventory().getName()",
      "spec.getVmInventory().getUuid()"
    ],
    "line": 64,
    "fileName": "src/main/java/org/zstack/compute/vm/VmDownloadIsoFlow.java"
  },
  {
    "raw": "cannot find the image[uuid:%s] in any connected backup storage. check below:\n1. if the backup storage is attached to the zone where the VM[name: %s, uuid:%s] is in\n2. if the backup storage is in connected status, if not, try reconnecting it",
    "en_US": "cannot find the image[uuid:{0}] in any connected backup storage. check below:\n1. if the backup storage is attached to the zone where the VM[name: {1}, uuid:{2}] is in\n2. if the backup storage is in connected status, if not, try reconnecting it",
    "zh_CN": "不能发现镜像[uuid:{0}]在任何处于Connected状态备份的镜像服务器。可以进行对以下选项的检查：1. 镜像服务器是否已经过载到区域中的云主机[name: {1}, uuid:{2}]中；2. 如果镜像服务器不是处于连接状态，请尝试重连",
    "arguments": [
      "imageUuid",
      "spec.getVmInventory().getName()",
      "spec.getVmInventory().getUuid()"
    ],
    "line": 85,
    "fileName": "src/main/java/org/zstack/compute/vm/VmImageSelectBackupStorageFlow.java"
  },
  {
    "raw": "cannot find the image[uuid:%s] in any connected backup storage attached to the zone[uuid:%s]. check below:\n1. if the backup storage is attached to the zone where the VM[name: %s, uuid:%s] is in\n2. if the backup storage is in connected status, if not, try reconnecting it",
    "en_US": "cannot find the image[uuid:{0}] in any connected backup storage attached to the zone[uuid:{1}]. check below:\n1. if the backup storage is attached to the zone where the VM[name: {2}, uuid:{3}] is in\n2. if the backup storage is in connected status, if not, try reconnecting it",
    "zh_CN": "不能发现镜像[uuid:{0}]在任何已经挂载到集群[uuid:{1}]上的并且处于Connected状态备份的镜像服务器。可以进行对以下选项的检查：1. 镜像服务器是否已经过载到区域中的云主机[name: {2}, uuid:{3}]中；2. 如果镜像服务器不是处于Connected状态，请尝试重连",
    "arguments": [
      "imageUuid",
      "spec.getVmInventory().getZoneUuid()",
      "spec.getVmInventory().getName()",
      "spec.getVmInventory().getUuid()"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/compute/vm/VmImageSelectBackupStorageFlow.java"
  },
  {
    "raw": "no backup storage attached to the zone[uuid:%s] contains the ISO[uuid:%s]",
    "en_US": "no backup storage attached to the zone[uuid:{0}] contains the ISO[uuid:{1}]",
    "zh_CN": "没有镜像服务器挂载到区域[uuid:{0}]包含着ISO[uuid:{1}]",
    "arguments": [
      "zoneUuid",
      "isoImageUuid"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/compute/vm/VmImageSelectBackupStorageFlow.java"
  },
  {
    "raw": "the vm[uuid:%s] is already on host[uuid:%s]",
    "en_US": "the vm[uuid:{0}] is already on host[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}]已经运行于物理机[uuid:{1}]上。",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getHostUuid()"
    ],
    "line": 118,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "the VM cannot do online cpu/memory update because it is not of NUMA architecture. Please stop the VM then do the cpu/memory update again",
    "en_US": "the VM cannot do online cpu/memory update because it is not of NUMA architecture. Please stop the VM then do the cpu/memory update again",
    "zh_CN": "云主机无法执行在线配置升级，因为不是NUMA架构。请关闭该云主机再尝试。",
    "arguments": [],
    "line": 172,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "The state of vm[uuid:%s] is %s. Only these state[%s] is allowed to update cpu or memory.",
    "en_US": "The state of vm[uuid:{0}] is {1}. Only these state[{2}] is allowed to update cpu or memory.",
    "zh_CN": "云主机[uuid:{0}]的状态为{1}。只有这些状态[{2}]允许在线升级配置。",
    "arguments": [
      "vo.getUuid()",
      "vo.getState()",
      "StringUtils.join(list(VmInstanceState.Running, VmInstanceState.Stopped), \",\")"
    ],
    "line": 178,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "can\u0027t decrease capacity when vm[uuid:%s] is running",
    "en_US": "can\u0027t decrease capacity when vm[uuid:{0}] is running",
    "zh_CN": "无法在云主机[uuid:{0}]运行时减少容量。",
    "arguments": [
      "vo.getUuid()"
    ],
    "line": 150,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "can\u0027t decrease cpu of vm[uuid:%s] when it is running",
    "en_US": "can\u0027t decrease cpu of vm[uuid:{0}] when it is running",
    "zh_CN": "无法在云主机[uuid:{0}]运行时减少CPU数目。",
    "arguments": [
      "vo.getUuid()"
    ],
    "line": 189,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "can\u0027t decrease memory size of vm[uuid:%s] when it is running",
    "en_US": "can\u0027t decrease memory size of vm[uuid:{0}] when it is running",
    "zh_CN": "无法在云主机[uuid:{0}]运行时减少容量。",
    "arguments": [
      "vo.getUuid()"
    ],
    "line": 195,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "either l3NetworkUuids or imageUuid must be set",
    "en_US": "either l3NetworkUuids or imageUuid must be set",
    "zh_CN": "L3网络的uuid们或者镜像的uuid必须被设置",
    "arguments": [],
    "line": 136,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "%s is not a valid IPv4 address",
    "en_US": "{0} is not a valid IPv4 address",
    "zh_CN": "{0}不是有效的IPv4地址",
    "arguments": [
      "msg.getIp()"
    ],
    "line": 187,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "the VM[uuid:%s] has no nic on the L3 network[uuid:%s]",
    "en_US": "the VM[uuid:{0}] has no nic on the L3 network[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}]在L3网络[uuid:{1}]上没有任何网卡",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 204,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "invalid boot device[%s] in boot order%s",
    "en_US": "invalid boot device[{0}] in boot order{1}",
    "zh_CN": "在启动列表{1}中的设备[{0}]启动失败",
    "arguments": [
      "o",
      "msg.getBootOrder()"
    ],
    "line": 215,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "VM[uuid:%s] already has an ISO[uuid:%s] attached",
    "en_US": "VM[uuid:{0}] already has an ISO[uuid:{1}] attached",
    "zh_CN": "云主机[uuid:{0}]已经挂载了ISO[uuid:{1}]",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "isoUuid"
    ],
    "line": 231,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach a L3 network. The vm[uuid: %s] is not Running or Stopped; the current state is %s",
    "en_US": "unable to attach a L3 network. The vm[uuid: {0}] is not Running or Stopped; the current state is {1}",
    "zh_CN": "无法挂载L3网络。云主机[uuid: {0}]既不处于Running也不处于Stopped状态中，当前状态为{1}。",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "state"
    ],
    "line": 307,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach a L3 network. The L3 network[uuid:%s] is already attached to the vm[uuid: %s]",
    "en_US": "unable to attach a L3 network. The L3 network[uuid:{0}] is already attached to the vm[uuid: {1}]",
    "zh_CN": "不能挂载L3网络，l3网络[uuid:{0}]已经挂载到云主机[uuid: {1}]上了",
    "arguments": [
      "msg.getL3NetworkUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 255,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach a L3 network. The L3 network[uuid:%s] is disabled",
    "en_US": "unable to attach a L3 network. The L3 network[uuid:{0}] is disabled",
    "zh_CN": "不能挂载L3网络，因为该L3网络[uuid:{0}]处于未启动状态",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 266,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach a L3 network. The L3 network[uuid:%s] is a system network and vm is a user vm",
    "en_US": "unable to attach a L3 network. The L3 network[uuid:{0}] is a system network and vm is a user vm",
    "zh_CN": "",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 287,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "the static IP[%s] is not in any IP range of the L3 network[uuid:%s]",
    "en_US": "the static IP[{0}] is not in any IP range of the L3 network[uuid:{1}]",
    "zh_CN": "该静态IP[{0}]不在L3网络[uuid:{1}]的任何IP段",
    "arguments": [
      "msg.getStaticIp()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 279,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "the static IP[%s] has been occupied on the L3 network[uuid:%s]",
    "en_US": "the static IP[{0}] has been occupied on the L3 network[uuid:{1}]",
    "zh_CN": "该静态IP[{0}]已经存在在L3网络[uuid:{1}]中",
    "arguments": [
      "msg.getStaticIp()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 295,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to detach a L3 network. The vm[uuid: %s] is not Running or Stopped; the current state is %s",
    "en_US": "unable to detach a L3 network. The vm[uuid: {0}] is not Running or Stopped; the current state is {1}",
    "zh_CN": "不能挂载L3网络，云主机[uuid: {0}]不是运行状态或者暂停状态，状态为{1}",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "state"
    ],
    "line": 315,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "vm[uuid:%s] can only attach volume when state is Running or Stopped, current state is %s",
    "en_US": "vm[uuid:{0}] can only attach volume when state is Running or Stopped, current state is {1}",
    "zh_CN": "云主机[uuid:{0}]挂载盘时状态只能是运行或者暂停状态，而现在的状态是{1}",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "state"
    ],
    "line": 339,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "instance offering[uuid:%s] is Disabled, can\u0027t create vm from it",
    "en_US": "instance offering[uuid:{0}] is Disabled, can\u0027t create vm from it",
    "zh_CN": "计算规格[uuid:{0}]没有被启用，不能根据该规格创建云主机",
    "arguments": [
      "msg.getInstanceOfferingUuid()"
    ],
    "line": 349,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "instance offering[uuid:%s, type:%s] is not UserVm type, can\u0027t create vm from it",
    "en_US": "instance offering[uuid:{0}, type:{1}] is not UserVm type, can\u0027t create vm from it",
    "zh_CN": "",
    "arguments": [
      "msg.getInstanceOfferingUuid()",
      "itype"
    ],
    "line": 377,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is Disabled, can\u0027t create vm from it",
    "en_US": "image[uuid:{0}] is Disabled, can\u0027t create vm from it",
    "zh_CN": "镜像[uuid:{0}]没被启用，不能根据该镜像创建云主机",
    "arguments": [
      "msg.getImageUuid()"
    ],
    "line": 358,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is of mediaType: %s, only RootVolumeTemplate and ISO can be used to create vm",
    "en_US": "image[uuid:{0}] is of mediaType: {1}, only RootVolumeTemplate and ISO can be used to create vm",
    "zh_CN": "镜像[uuid:{0}] 类型为{1}，该镜像只能用来创建根云盘或者用来创建云主机",
    "arguments": [
      "msg.getImageUuid()",
      "imgFormat"
    ],
    "line": 355,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "rootDiskOfferingUuid cannot be null when image mediaType is ISO",
    "en_US": "rootDiskOfferingUuid cannot be null when image mediaType is ISO",
    "zh_CN": "根云盘规格不能为空在镜像类型为ISO时",
    "arguments": [],
    "line": 359,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is system image, can\u0027t be used to create user vm",
    "en_US": "image[uuid:{0}] is system image, can\u0027t be used to create user vm",
    "zh_CN": "镜像[uuid:{0}] 是系统镜像，不能使用它创建用户虚拟机",
    "arguments": [
      "msg.getImageUuid()"
    ],
    "line": 364,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "disk offerings[uuids:%s] are Disabled, can not create vm from it",
    "en_US": "disk offerings[uuids:{0}] are Disabled, can not create vm from it",
    "zh_CN": "磁盘规格[uuids:{0}]没有被启用，不能使用它创建云主机",
    "arguments": [
      "diskUuids"
    ],
    "line": 398,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "Can\u0027t add same uuid in the l3Network,uuid: %s",
    "en_US": "Can\u0027t add same uuid in the l3Network,uuid: {0}",
    "zh_CN": "不能添加相同的uuid{0}在L3网络中",
    "arguments": [
      "duplicateElements.get(0)"
    ],
    "line": 407,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "l3Network[uuid:%s] is Disabled, can not create vm on it",
    "en_US": "l3Network[uuid:{0}] is Disabled, can not create vm on it",
    "zh_CN": "L3网络[uuid:{0}]没有被启用，不能从这个L3网络创建云主机",
    "arguments": [
      "l3Uuid"
    ],
    "line": 417,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "l3Network[uuid:%s] is system network, can not create user vm on it",
    "en_US": "l3Network[uuid:{0}] is system network, can not create user vm on it",
    "zh_CN": "L3网络[uuid:{0}]是系统网络，不能在这上面创建云主机",
    "arguments": [
      "l3Uuid"
    ],
    "line": 421,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "zone[uuid:%s] is specified but it\u0027s Disabled, can not create vm from it",
    "en_US": "zone[uuid:{0}] is specified but it\u0027s Disabled, can not create vm from it",
    "zh_CN": "区域[uuid:{0}]虽然被指定了但是处于未启用状态，不能从这上面创建云主机",
    "arguments": [
      "msg.getZoneUuid()"
    ],
    "line": 439,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "cluster[uuid:%s] is specified but it\u0027s Disabled, can not create vm from it",
    "en_US": "cluster[uuid:{0}] is specified but it\u0027s Disabled, can not create vm from it",
    "zh_CN": "集群[uuid:{0}]虽然被指定了但是处于未启用状态，不能从这上面创建云主机",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 449,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "host[uuid:%s] is specified but it\u0027s Disabled, can not create vm from it",
    "en_US": "host[uuid:{0}] is specified but it\u0027s Disabled, can not create vm from it",
    "zh_CN": "物理机[uuid:{0}]虽然被指定了但是处于未启用状态，不能从这上面创建云主机",
    "arguments": [
      "msg.getHostUuid()"
    ],
    "line": 460,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "host[uuid:%s] is specified but it\u0027s connection status is %s, can not create vm from it",
    "en_US": "host[uuid:{0}] is specified but it\u0027s connection status is {1}, can not create vm from it",
    "zh_CN": "物理机[uuid:{0}]虽然被指定了但是它的连接状态是{1}，不能从这上面创建云主机",
    "arguments": [
      "msg.getHostUuid()",
      "connectionState"
    ],
    "line": 465,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "defaultL3NetworkUuid[uuid:%s] is not in l3NetworkUuids%s",
    "en_US": "defaultL3NetworkUuid[uuid:{0}] is not in l3NetworkUuids{1}",
    "zh_CN": "默认L3网络的uuid是[uuid:{0}]，不在L3网络uuid们中{1}",
    "arguments": [
      "msg.getDefaultL3NetworkUuid()",
      "msg.getL3NetworkUuids()"
    ],
    "line": 464,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "there are more than one L3 network specified in l3NetworkUuids, but defaultL3NetworkUuid is null",
    "en_US": "there are more than one L3 network specified in l3NetworkUuids, but defaultL3NetworkUuid is null",
    "zh_CN": "在L3网络uuid们中有很多L3网络被指定了，但是默认L3网络的uuid是空的",
    "arguments": [],
    "line": 460,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "The console password cannot start with \u0027password\u0027 which may trigger a VNC security issue",
    "en_US": "The console password cannot start with \u0027password\u0027 which may trigger a VNC security issue",
    "zh_CN": "控制台密码不能以password开头，会导致一个VNC安全问题。",
    "arguments": [],
    "line": 482,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "the VM[uuid:%s] volume stored location primary storage is in a state of maintenance",
    "en_US": "the VM[uuid:{0}] volume stored location primary storage is in a state of maintenance",
    "zh_CN": "",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 218,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to check state of the vm[uuid:%s] on the host[uuid:%s], %s;put the VM into the Unknown state",
    "en_US": "unable to check state of the vm[uuid:{0}] on the host[uuid:{1}], {2};put the VM into the Unknown state",
    "zh_CN": "无法在物理机[uuid:{1}]上检查云主机[uuid:{0}]的状态，置为Unknown，错误细节：{2}。",
    "arguments": [
      "self.getUuid()",
      "hostUuid",
      "reply.getError()"
    ],
    "line": 131,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "vm[uuid:%s, name:%s] has been deleted",
    "en_US": "vm[uuid:{0}, name:{1}] has been deleted",
    "zh_CN": "云主机[uuid:{0}, name:{1}]已经被删除了",
    "arguments": [
      "vo.getUuid()",
      "vo.getName()"
    ],
    "line": 221,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "the vm[uuid:%s] has no nic on the L3 network[uuid:%s]",
    "en_US": "the vm[uuid:{0}] has no nic on the L3 network[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}] 没有网卡在L3网络[uuid:{1}]上",
    "arguments": [
      "self.getUuid()",
      "l3Uuid"
    ],
    "line": 529,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "the vm has been deleted",
    "en_US": "the vm has been deleted",
    "zh_CN": "云主机已经被删除了",
    "arguments": [],
    "line": 877,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "failed to handle abnormal lifecycle of the vm[uuid:%s, original state: %s, current state:%s,original host: %s, current host: %s], %s",
    "en_US": "failed to handle abnormal lifecycle of the vm[uuid:{0}, original state: {1}, current state:{2},original host: {3}, current host: {4}], {5}",
    "zh_CN": "无法控制云主机[uuid:{0}, original state: {1}, current state:{2},original host: {3}, current host: {4}]的异常生命周期，原因：{5}。",
    "arguments": [
      "self.getUuid()",
      "originalState",
      "currentState",
      "originalHostUuid",
      "currentHostUuid",
      "errCode"
    ],
    "line": 1043,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "cannot get target migration host without any nics on vm",
    "en_US": "cannot get target migration host without any nics on vm",
    "zh_CN": "不能在云主机上通过网卡获取目标迁移物理机地址",
    "arguments": [],
    "line": 1214,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "the ISO[uuid:%s] is on backup storage that is not compatible of the primary storage[uuid:%s] where the VM[name:%s, uuid:%s] is on",
    "en_US": "the ISO[uuid:{0}] is on backup storage that is not compatible of the primary storage[uuid:{1}] where the VM[name:{2}, uuid:{3}] is on",
    "zh_CN": "ISO[uuid:{0}]在镜像服务器上，这个ISO不能兼容主存储[uuid:{1}]在云主机[name:{2}, uuid:{3}]上",
    "arguments": [
      "isoUuid",
      "psUuid",
      "self.getName()",
      "self.getUuid()"
    ],
    "line": 2869,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "operation is not allowed to vm[uuid:%s] which is in the state of state:%s",
    "en_US": "operation is not allowed to vm[uuid:{0}] which is in the state of state:{1}",
    "zh_CN": "云主机[uuid:{0}]处于{1}状态时该操作不被允许。",
    "arguments": [
      "self.getUuid()",
      "self.getState()"
    ],
    "line": 3121,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "host[uuid:%s] capacity is not enough to offer cpu[%s], memory[%s bytes]",
    "en_US": "host[uuid:{0}] capacity is not enough to offer cpu[{1}], memory[{2} bytes]",
    "zh_CN": "物理机[uuid:{0}]无法提供CPU：[{1}]，内存：[{2} bytes]。",
    "arguments": [
      "self.getHostUuid()",
      "cpuNum - oldCpuNum",
      "struct.alignedMemory - oldMemorySize"
    ],
    "line": 3249,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "automatically align memory from %s to %s",
    "en_US": "automatically align memory from {0} to {1}",
    "zh_CN": "自动将内存从{0}对齐到{1}。",
    "arguments": [
      "memorySize",
      "struct.alignedMemory"
    ],
    "line": 3222,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "unable to start the vm[uuid:%s]. It doesn\u0027t have any nic, please attach a nic and try again",
    "en_US": "unable to start the vm[uuid:{0}]. It doesn\u0027t have any nic, please attach a nic and try again",
    "zh_CN": "无法启动虚拟机[uuid:{0}]。该虚拟机没有网卡，请添加网卡后再试",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 3680,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "VmInstanceStartNewCreatedVmExtensionPoint[%s] refuses to create vm[uuid:%s] because %s",
    "en_US": "VmInstanceStartNewCreatedVmExtensionPoint[{0}] refuses to create vm[uuid:{1}] because {2}",
    "zh_CN": "VmInstanceStartNewCreatedVmExtensionPoint[{0}] 因为{2} 拒绝创建虚拟机[uuid:{1}]",
    "arguments": [
      "ext.getClass().getName()",
      "inv.getUuid()",
      "err"
    ],
    "line": 41,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java"
  },
  {
    "raw": "VmInstanceStopVmExtensionPoint[%s] refuses to stop vm[uuid:%s] because %s",
    "en_US": "VmInstanceStopVmExtensionPoint[{0}] refuses to stop vm[uuid:{1}] because {2}",
    "zh_CN": "VmInstanceStopVmExtensionPoint[{0}] 因为{2} 拒绝创建虚拟机[uuid:{1}]",
    "arguments": [
      "ext.getClass().getName()",
      "inv.getUuid()",
      "err"
    ],
    "line": 83,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java"
  },
  {
    "raw": "VmInstanceRebootExtensionPoint[%s] refuses to reboot vm[uuid:%s] because %s",
    "en_US": "VmInstanceRebootExtensionPoint[{0}] refuses to reboot vm[uuid:{1}] because {2}",
    "zh_CN": "VmInstanceRebootExtensionPoint[{0}] 因为{2} 拒绝重启虚拟机[uuid:{1}]",
    "arguments": [
      "ext.getClass().getName()",
      "inv.getUuid()",
      "err"
    ],
    "line": 125,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java"
  },
  {
    "raw": "VmInstanceDestroyVmExtensionPoint[%s] refuses to destroy vm[uuid:%s] because %s",
    "en_US": "VmInstanceDestroyVmExtensionPoint[{0}] refuses to destroy vm[uuid:{1}] because {2}",
    "zh_CN": "VmInstanceDestroyVmExtensionPoint[{0}] 因为{2} 拒绝删除虚拟机[uuid:{1}]",
    "arguments": [
      "ext.getClass().getName()",
      "inv.getUuid()",
      "err"
    ],
    "line": 167,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java"
  },
  {
    "raw": "VmInstanceStartExtensionPoint[%s] refuses to start vm[uuid:%s] because %s",
    "en_US": "VmInstanceStartExtensionPoint[{0}] refuses to start vm[uuid:{1}] because {2}",
    "zh_CN": "VmInstanceStartExtensionPoint[{0}] 因为{2} 拒绝启动虚拟机[uuid:{1}]",
    "arguments": [
      "ext.getClass().getName()",
      "inv.getUuid()",
      "err"
    ],
    "line": 208,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java"
  },
  {
    "raw": "the image[uuid:%s] is not on any backup storage that has been attached to the zone[uuid:%s]",
    "en_US": "the image[uuid:{0}] is not on any backup storage that has been attached to the zone[uuid:{1}]",
    "zh_CN": "镜像[uuid:{0}]不在任何加载到区域[uuid:{1}]的镜像服务器上",
    "arguments": [
      "msg.getImageUuid()",
      "msg.getZoneUuid()"
    ],
    "line": 404,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "the image[name:%s, uuid:%s] is an ISO, rootDiskOfferingUuid must be set",
    "en_US": "the image[name:{0}, uuid:{1}] is an ISO, rootDiskOfferingUuid must be set",
    "zh_CN": "镜像[name:{0}, uuid:{1}]是一个IOS, 必须设置根云盘规格",
    "arguments": [
      "image.getName()",
      "image.getUuid()"
    ],
    "line": 467,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "zoneUuid must be set because the image[name:%s, uuid:%s] is on multiple backup storage",
    "en_US": "zoneUuid must be set because the image[name:{0}, uuid:{1}] is on multiple backup storage",
    "zh_CN": "zoneUuid必须被设置，因为image[name:{0}, uuid:{1}]在多个镜像服务器上",
    "arguments": [
      "image.getName()",
      "image.getUuid()"
    ],
    "line": 507,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "rootVolumeOffering is needed when image media type is ISO",
    "en_US": "rootVolumeOffering is needed when image media type is ISO",
    "zh_CN": "",
    "arguments": [],
    "line": 607,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "hostname[%s] specified in system tag[%s] is not a valid domain name",
    "en_US": "hostname[{0}] specified in system tag[{1}] is not a valid domain name",
    "zh_CN": "在系统标签[{1}]中特别声明的主机名[{0}]不是一个有效的域名",
    "arguments": [
      "hostname",
      "tag"
    ],
    "line": 877,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "only one hostname system tag is allowed, but %s got",
    "en_US": "only one hostname system tag is allowed, but {0} got",
    "zh_CN": "只允许通过系统标签设置一个主机名，但是实际上有{0}",
    "arguments": [
      "hostnameCount"
    ],
    "line": 889,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "L3 network[uuid:%s] not found. Please correct your system tag[%s] of static IP",
    "en_US": "L3 network[uuid:{0}] not found. Please correct your system tag[{1}] of static IP",
    "zh_CN": "找不到L3网络[uuid:0]。请修改你关于静态IP的系统标签",
    "arguments": [
      "l3Uuid",
      "sysTag"
    ],
    "line": 906,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "%s is not a valid IPv4 address. Please correct your system tag[%s] of static IP",
    "en_US": "{0} is not a valid IPv4 address. Please correct your system tag[{1}] of static IP",
    "zh_CN": "{0}不是一个有效的IPv4地址。请修改你关于静态IP的系统标签",
    "arguments": [
      "ip",
      "sysTag"
    ],
    "line": 912,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "IP[%s] is not available on the L3 network[uuid:%s]",
    "en_US": "IP[{0}] is not available on the L3 network[uuid:{1}]",
    "zh_CN": "在L3网络[uuid:{1}]中，IP[{0}]不可用",
    "arguments": [
      "ip",
      "l3Uuid"
    ],
    "line": 940,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "conflict hostname in system tag[%s]; there has been a VM[uuid:%s] having hostname[%s] on L3 network[uuid:%s]",
    "en_US": "conflict hostname in system tag[{0}]; there has been a VM[uuid:{1}] having hostname[{2}] on L3 network[uuid:{3}]",
    "zh_CN": "系统标签的主机名存在冲突[{0}]；已经存在以一个主机名为[{2}]的VM[uuid:{1}]出现在L3网络[uuid:{3}]中",
    "arguments": [
      "tag",
      "sameTag.getResourceUuid()",
      "hostname",
      "l3Uuid"
    ],
    "line": 946,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "invalid boot device[%s] in boot order[%s]",
    "en_US": "invalid boot device[{0}] in boot order[{1}]",
    "zh_CN": "在引导顺序[{1}]中存在无效的引导设备[{0}]",
    "arguments": [
      "o",
      "order"
    ],
    "line": 977,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "Already have one userdata systemTag for vm[uuid: %s].",
    "en_US": "Already have one userdata systemTag for vm[uuid: {0}].",
    "zh_CN": "",
    "arguments": [
      "resourceUuid"
    ],
    "line": 1005,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "Shouldn\u0027t be more than one userdata systemTag for one vm.",
    "en_US": "Shouldn\u0027t be more than one userdata systemTag for one vm.",
    "zh_CN": "",
    "arguments": [],
    "line": 1025,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "the resource[uuid:%s] is a ROOT volume, you cannot change its owner, instead,change the owner of the VM the root volume belongs to",
    "en_US": "the resource[uuid:{0}] is a ROOT volume, you cannot change its owner, instead,change the owner of the VM the root volume belongs to",
    "zh_CN": "当前资源[uuid:{0}]是一个根云盘，你不能改变它的所有者，但是你能够修改对应VM的所有者",
    "arguments": [
      "ref.getResourceUuid()"
    ],
    "line": 1959,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "the host[uuid:%s] disconnected, change the VM[uuid:%s]\u0027 state to Unknown",
    "en_US": "the host[uuid:{0}] disconnected, change the VM[uuid:{1}]\u0027 state to Unknown",
    "zh_CN": "",
    "arguments": [
      "hostUuid",
      "vmUuid"
    ],
    "line": 2041,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "the host[uuid:%s] disconnected, but the vm[uuid:%s] fails to change it\u0027s state to Unknown, %s",
    "en_US": "the host[uuid:{0}] disconnected, but the vm[uuid:{1}] fails to change it\u0027s state to Unknown, {2}",
    "zh_CN": "",
    "arguments": [
      "hostUuid",
      "vmUuid",
      "reply.getError()"
    ],
    "line": 2038,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "user has no privilege to change image of vm %s",
    "en_US": "user has no privilege to change image of vm {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 55,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "do not change vm image when it\u0027s not stopped",
    "en_US": "do not change vm image when it\u0027s not stopped",
    "zh_CN": "",
    "arguments": [],
    "line": 67,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "user has no privilege to change root volume of vm %s using image %s",
    "en_US": "user has no privilege to change root volume of vm {0} using image {1}",
    "zh_CN": "",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getImageUuid()"
    ],
    "line": 85,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "either uuid or account or password must be set",
    "en_US": "either uuid or account or password must be set",
    "zh_CN": "uuid或者账户或者密码需要被设置",
    "arguments": [],
    "line": 39,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "direction must be set in (in, out), but was %s",
    "en_US": "direction must be set in (in, out), but was {0}",
    "zh_CN": "方向必须设置在(in, out)，但是输入的是{0}",
    "arguments": [
      "msg.getDirection()"
    ],
    "line": 47,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "Monitor number must be 1 or 2 or 4.",
    "en_US": "Monitor number must be 1 or 2 or 4.",
    "zh_CN": "",
    "arguments": [],
    "line": 55,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "outboundBandwidth and inboundBandwidth must be set at lease one.",
    "en_US": "outboundBandwidth and inboundBandwidth must be set at lease one.",
    "zh_CN": "上行带宽和下行带宽至少有一个需要被设置",
    "arguments": [],
    "line": 53,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "nic id: %s does not exist...",
    "en_US": "nic id: {0} does not exist...",
    "zh_CN": "网卡id: {0}不存在",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 62,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "A strange vm[%s] was found on the host[%s], May cause problems, Please manually clean this vm",
    "en_US": "A strange vm[{0}] was found on the host[{1}], May cause problems, Please manually clean this vm",
    "zh_CN": "",
    "arguments": [
      "vmUuid",
      "hostUuid"
    ],
    "line": 95,
    "fileName": "src/main/java/org/zstack/compute/vm/VmTracer.java"
  },
  {
    "raw": "unsupported host allocation strategy[%s]",
    "en_US": "unsupported host allocation strategy[{0}]",
    "zh_CN": "不被支持的主机分配策略[{0}]",
    "arguments": [
      "msg.getAllocatorStrategy()"
    ],
    "line": 76,
    "fileName": "src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java"
  },
  {
    "raw": "unsupported instance offering type[%s]",
    "en_US": "unsupported instance offering type[{0}]",
    "zh_CN": "不被支持的计算规格类型[{0}]",
    "arguments": [
      "msg.getType()"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java"
  },
  {
    "raw": "cpu num[%s] is less than 1",
    "en_US": "cpu num[{0}] is less than 1",
    "zh_CN": "cpu数量[{0}]少于1",
    "arguments": [
      "msg.getCpuNum()"
    ],
    "line": 84,
    "fileName": "src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java"
  },
  {
    "raw": "memory size[%s bytes] is less than 16M, no modern operating system is likely able to boot with such small memory size",
    "en_US": "memory size[{0} bytes] is less than 16M, no modern operating system is likely able to boot with such small memory size",
    "zh_CN": "内存大小[{0} bytes]少于16M，没有一个现代操作系统能够在如此小的内存里被引导",
    "arguments": [
      "msg.getMemorySize()"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java"
  },
  {
    "raw": "unsupported primary storage allocation strategy[%s]",
    "en_US": "unsupported primary storage allocation strategy[{0}]",
    "zh_CN": "不被支持的主存储分配策略[{0}]",
    "arguments": [
      "msg.getAllocationStrategy()"
    ],
    "line": 94,
    "fileName": "src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java"
  },
  {
    "raw": "the console agent is not connected; it\u0027s mostly like the management node just starts, please wait for the console agent connected.",
    "en_US": "the console agent is not connected; it\u0027s mostly like the management node just starts, please wait for the console agent connected.",
    "zh_CN": "控制台代理失联，很有可能管理节点刚刚启动，请等待控制台代理的连接",
    "arguments": [],
    "line": 101,
    "fileName": "src/main/java/org/zstack/console/AbstractConsoleProxyBackend.java"
  },
  {
    "raw": "cannot find host IP of the vm[uuid:%s], is the vm running???",
    "en_US": "cannot find host IP of the vm[uuid:{0}], is the vm running???",
    "zh_CN": "无法找到vm[uuid:{0}]的主机IP，请确认该vm是否在运行？？？",
    "arguments": [
      "vm.getUuid()"
    ],
    "line": 122,
    "fileName": "src/main/java/org/zstack/console/AbstractConsoleProxyBackend.java"
  },
  {
    "raw": "failed to delete a console proxy[vmUuid:%s, host IP: %s, host port: %s, proxy IP: %s, proxy port: %s], %s",
    "en_US": "failed to delete a console proxy[vmUuid:{0}, host IP: {1}, host port: {2}, proxy IP: {3}, proxy port: {4}], {5}",
    "zh_CN": "无法删除控制台代理[vmUuid:{0}, host IP: {1}, host port: {2}, proxy IP: {3}, proxy port: {4}]]，原因：{5}",
    "arguments": [
      "vm.getUuid()",
      "vo.getTargetHostname()",
      "vo.getTargetPort()",
      "vo.getProxyHostname()",
      "vo.getProxyPort()",
      "errorCode.toString()"
    ],
    "line": 245,
    "fileName": "src/main/java/org/zstack/console/AbstractConsoleProxyBackend.java"
  },
  {
    "raw": "Console is only available when the VM[uuid:%s] is Running, but the current state is %s",
    "en_US": "Console is only available when the VM[uuid:{0}] is Running, but the current state is {1}",
    "zh_CN": "仅当VM[uuid:{0}]处于运行状态时控制台可用，但是现在的状态为{1}",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "state"
    ],
    "line": 48,
    "fileName": "src/main/java/org/zstack/console/ConsoleApiInterceptor.java"
  },
  {
    "raw": "unable to ping the console proxy agent[uuid:%s], %s",
    "en_US": "unable to ping the console proxy agent[uuid:{0}], {1}",
    "zh_CN": "无法ping通控制台代理[uuid:{0}]，原因：{1}",
    "arguments": [
      "resourceUuid",
      "reply.getError()"
    ],
    "line": 63,
    "fileName": "src/main/java/org/zstack/console/ConsoleProxyAgentTracker.java"
  },
  {
    "raw": "successfully reconnected the console proxy agent[uuid:%s]",
    "en_US": "successfully reconnected the console proxy agent[uuid:{0}]",
    "zh_CN": "成功重连控制台代理[uuid:{0}]",
    "arguments": [
      "resourceUuid"
    ],
    "line": 81,
    "fileName": "src/main/java/org/zstack/console/ConsoleProxyAgentTracker.java"
  },
  {
    "raw": "failed to reconnect console proxy agent[uuid:%s], %s",
    "en_US": "failed to reconnect console proxy agent[uuid:{0}], {1}",
    "zh_CN": "无法重连控制台代理[uuid:{0}]，原因：{1}",
    "arguments": [
      "resourceUuid",
      "reply.getError()"
    ],
    "line": 78,
    "fileName": "src/main/java/org/zstack/console/ConsoleProxyAgentTracker.java"
  },
  {
    "raw": "unable to check console proxy availability, because %s",
    "en_US": "unable to check console proxy availability, because {0}",
    "zh_CN": "无法检查控制台代理是否可用，因为{0}",
    "arguments": [
      "ret.getError()"
    ],
    "line": 140,
    "fileName": "src/main/java/org/zstack/console/ConsoleProxyBase.java"
  },
  {
    "raw": "invalid management node UUID[%s]",
    "en_US": "invalid management node UUID[{0}]",
    "zh_CN": "非法的管理节点UUID[{0}]",
    "arguments": [
      "uuid"
    ],
    "line": 303,
    "fileName": "src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java"
  },
  {
    "raw": "User name or password or port number may be problematic",
    "en_US": "User name or password or port number may be problematic",
    "zh_CN": "",
    "arguments": [],
    "line": 371,
    "fileName": "src/main/java/org/zstack/core/ansible/AnsibleRunner.java"
  },
  {
    "raw": "cannot check md5sum of files in the folder[%s].\\nstdout:%s\\nstderr:%s",
    "en_US": "cannot check md5sum of files in the folder[{0}].\\nstdout:{1}\\nstderr:{2}",
    "zh_CN": "无法检查文件夹[{0}]下文件的md5sum.\\nstdout:{1}\\nstderr:{2}",
    "arguments": [
      "srcFolder",
      "srcRes.getStdout()",
      "srcRes.getStderr()"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/core/ansible/SshFolderMd5Checker.java"
  },
  {
    "raw": "cannot check md5sum of files in the folder[%s] on the host[ip:%s].\\nstdout:%s\\nstderr:%s",
    "en_US": "cannot check md5sum of files in the folder[{0}] on the host[ip:{1}].\\nstdout:{2}\\nstderr:{3}",
    "zh_CN": "无法检查主机[ip:{1}]的文件夹[{0}]下文件的md5sum.\\nstdout:{2}\\nstderr:{3}",
    "arguments": [
      "dstFolder",
      "hostname",
      "dstRes.getStdout()",
      "dstRes.getStderr()"
    ],
    "line": 122,
    "fileName": "src/main/java/org/zstack/core/ansible/SshFolderMd5Checker.java"
  },
  {
    "raw": "message is not in corrected JSON mediaType, %s",
    "en_US": "message is not in corrected JSON mediaType, {0}",
    "zh_CN": "消息是错误的JSON格式，{0}",
    "arguments": [
      "errMsg"
    ],
    "line": 686,
    "fileName": "src/main/java/org/zstack/core/cloudbus/CloudBusImpl2.java"
  },
  {
    "raw": "for webhooks with type[%s], the field opaque cannot be null",
    "en_US": "for webhooks with type[{0}], the field opaque cannot be null",
    "zh_CN": "对于[{0}]类型的webhooks，opaque字段不能为null。",
    "arguments": [
      "EventFacade.WEBHOOK_TYPE"
    ],
    "line": 67,
    "fileName": "src/main/java/org/zstack/core/cloudbus/EventFacadeImpl.java"
  },
  {
    "raw": "unable to find GlobalConfig[category:%s, name:%s]",
    "en_US": "unable to find GlobalConfig[category:{0}, name:{1}]",
    "zh_CN": "无法找到全局变量[category:{0}, name:{1}]",
    "arguments": [
      "msg.getCategory()",
      "msg.getName()"
    ],
    "line": 71,
    "fileName": "src/main/java/org/zstack/core/config/GlobalConfigFacadeImpl.java"
  },
  {
    "raw": "Unable to find GlobalConfig[category: %s, name: %s]",
    "en_US": "Unable to find GlobalConfig[category: {0}, name: {1}]",
    "zh_CN": "无法找到全局变量[category:{0}, name:{1}]",
    "arguments": [
      "msg.getCategory()",
      "msg.getName()"
    ],
    "line": 101,
    "fileName": "src/main/java/org/zstack/core/config/GlobalConfigFacadeImpl.java"
  },
  {
    "raw": "cannot trigger a finished GC job[uuid:%s, name:%s]",
    "en_US": "cannot trigger a finished GC job[uuid:{0}, name:{1}]",
    "zh_CN": "无法触发一个完成过的GC任务",
    "arguments": [
      "vo.getUuid()",
      "vo.getName()"
    ],
    "line": 210,
    "fileName": "src/main/java/org/zstack/core/gc/GarbageCollectorManagerImpl.java"
  },
  {
    "raw": "%s is not a valid URL",
    "en_US": "{0} is not a valid URL",
    "zh_CN": "{0}不是一个有效的URL。",
    "arguments": [
      "newValue"
    ],
    "line": 231,
    "fileName": "src/main/java/org/zstack/core/notification/NotificationManager.java"
  },
  {
    "raw": "parameter apiId[%s] is not a valid uuid.",
    "en_US": "parameter apiId[{0}] is not a valid uuid.",
    "zh_CN": "参数apiId[{0}]不是一个有效的UUID。",
    "arguments": [],
    "line": 37,
    "fileName": "src/main/java/org/zstack/core/progress/ProgressApiInterceptor.java"
  },
  {
    "raw": "failed to post to %s, status code: %s, response body: %s",
    "en_US": "failed to post to {0}, status code: {1}, response body: {2}",
    "zh_CN": "发送消息到{0}失败，状态码: {1}, 返回: {2}",
    "arguments": [
      "url",
      "rsp.getStatusCode()",
      "rsp.getBody()"
    ],
    "line": 454,
    "fileName": "src/main/java/org/zstack/core/rest/RESTFacadeImpl.java"
  },
  {
    "raw": "unable to echo %s in %sms",
    "en_US": "unable to echo {0} in {1}ms",
    "zh_CN": "无法在{1}ms内返回{0}",
    "arguments": [
      "url",
      "timeout"
    ],
    "line": 495,
    "fileName": "src/main/java/org/zstack/core/rest/RESTFacadeImpl.java"
  },
  {
    "raw": "an operation[%s] fails after retrying %s times with the interval %s seconds",
    "en_US": "an operation[{0}] fails after retrying {1} times with the interval {2} seconds",
    "zh_CN": "在重试{1}次间隔时间为{2}后操作[{0}]失败",
    "arguments": [
      "__name__",
      "times",
      "interval"
    ],
    "line": 73,
    "fileName": "src/main/java/org/zstack/core/retry/Retry.java"
  },
  {
    "raw": "failed to run salt state[%s] on system[%s], failed after %s retries",
    "en_US": "failed to run salt state[{0}] on system[{1}], failed after {2} retries",
    "zh_CN": "重试{2}次之后，在系统[{1}]上运行加盐状态[{0}]失败",
    "arguments": [
      "stateName",
      "targetIp",
      "retry"
    ],
    "line": 297,
    "fileName": "src/main/java/org/zstack/core/salt/SaltRunner.java"
  },
  {
    "raw": "cron must be set when use cron scheduler",
    "en_US": "cron must be set when use cron scheduler",
    "zh_CN": "当使用定时器任务时，必须设置cron",
    "arguments": [],
    "line": 118,
    "fileName": "src/main/java/org/zstack/core/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "cron task must follow format like this : \\\"0 0/3 17-23 * * ?\\\" ",
    "en_US": "cron task must follow format like this : \\\"0 0/3 17-23 * * ?\\\" ",
    "zh_CN": "定时器任务必须符合以下格式：\\\"0 0/3 17-23 * * ?\\\" ",
    "arguments": [],
    "line": 121,
    "fileName": "src/main/java/org/zstack/core/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "cron scheduler only need to specify cron task",
    "en_US": "cron scheduler only need to specify cron task",
    "zh_CN": "定时调度器（Cron Scheduler）仅需要指定定时任务（Cron Task）。",
    "arguments": [],
    "line": 124,
    "fileName": "src/main/java/org/zstack/core/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "startTime out of range",
    "en_US": "startTime out of range",
    "zh_CN": "开始时间超出范围",
    "arguments": [],
    "line": 108,
    "fileName": "src/main/java/org/zstack/core/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "startTime must be positive integer or 0",
    "en_US": "startTime must be positive integer or 0",
    "zh_CN": "开始时间必须是正整数或者0",
    "arguments": [],
    "line": 104,
    "fileName": "src/main/java/org/zstack/core/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "startTime must be set when use simple scheduler",
    "en_US": "startTime must be set when use simple scheduler",
    "zh_CN": "必须设置简单定时任务的开始时间",
    "arguments": [],
    "line": 102,
    "fileName": "src/main/java/org/zstack/core/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "stopTime out of mysql timestamp range",
    "en_US": "stopTime out of mysql timestamp range",
    "zh_CN": "定时任务停止时间超出mysql的timestamp的范围",
    "arguments": [],
    "line": 120,
    "fileName": "src/main/java/org/zstack/core/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "duration time out of range",
    "en_US": "duration time out of range",
    "zh_CN": "任务需要的时间超出范围",
    "arguments": [],
    "line": 116,
    "fileName": "src/main/java/org/zstack/core/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "interval must be set when use simple scheduler when repeat more than once",
    "en_US": "interval must be set when use simple scheduler when repeat more than once",
    "zh_CN": "当简单定时任务执行超过一次时，必须设置间隔时间",
    "arguments": [],
    "line": 92,
    "fileName": "src/main/java/org/zstack/core/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "interval must be set when use simple scheduler when repeat forever",
    "en_US": "interval must be set when use simple scheduler when repeat forever",
    "zh_CN": "当简单定时任务永远重复的时，必须设置间隔时间",
    "arguments": [],
    "line": 95,
    "fileName": "src/main/java/org/zstack/core/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "Invalid url[%s]",
    "en_US": "Invalid url[{0}]",
    "zh_CN": "无效的URL[{0}]。",
    "arguments": [
      "url"
    ],
    "line": 28,
    "fileName": "src/main/java/org/zstack/core/webhook/WebhookApiInterceptor.java"
  },
  {
    "raw": "hosts failed to port scan the failure host[uuid:%s, ip:%s], errors are %s",
    "en_US": "hosts failed to port scan the failure host[uuid:{0}, ip:{1}], errors are {2}",
    "zh_CN": "扫描物理机失败[uuid:{0}, ip:{1}]，错误原因是 {2}",
    "arguments": [
      "struct.getHostUuid()",
      "struct.getHostIp()",
      "errors"
    ],
    "line": 153,
    "fileName": "src/main/java/org/zstack/ha/HaKvmHostSiblingChecker.java"
  },
  {
    "raw": "cannot find the host of the vm[name:%s, uuid:%s], hostUuid is null",
    "en_US": "cannot find the host of the vm[name:{0}, uuid:{1}], hostUuid is null",
    "zh_CN": "找不到vm[name:{0}, uuid:{1}]的物理机, 因为hostUuid为null",
    "arguments": [
      "self.getName()",
      "self.getUuid()"
    ],
    "line": 63,
    "fileName": "src/main/java/org/zstack/ha/HaKvmWorker.java"
  },
  {
    "raw": "no HaHostChecker found, cannot do HA",
    "en_US": "no HaHostChecker found, cannot do HA",
    "zh_CN": "找不到HaHostChecker，无法执行HA",
    "arguments": [],
    "line": 70,
    "fileName": "src/main/java/org/zstack/ha/HaKvmWorker.java"
  },
  {
    "raw": "the management node fails to scan the host",
    "en_US": "the management node fails to scan the host",
    "zh_CN": "管理节点扫描物理机失败。",
    "arguments": [],
    "line": 46,
    "fileName": "src/main/java/org/zstack/ha/HaManagementNodeChecker.java"
  },
  {
    "raw": "the value[%s] is lesser than 0",
    "en_US": "the value[{0}] is lesser than 0",
    "zh_CN": "值[{0}]比0小",
    "arguments": [
      "newValue"
    ],
    "line": 90,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "unable to HA start the VM[uuid:%s, name:%s], %s",
    "en_US": "unable to HA start the VM[uuid:{0}, name:{1}], {2}",
    "zh_CN": "无法通过HA机制启动VM[uuid:{0}, name:{1}], 错误原因：{2}。",
    "arguments": [
      "vmInv.getUuid()",
      "vmInv.getName()",
      "reply.getError()"
    ],
    "line": 505,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "the VM[uuid:%s, name:%s]\u0027s of hypervisor[%s] which dose not support HA",
    "en_US": "the VM[uuid:{0}, name:{1}]\u0027s of hypervisor[{2}] which dose not support HA",
    "zh_CN": "VM[uuid:{0}, name:{1}]的主机监视程序（Hypervisor）[{2}]不支持HA机制。",
    "arguments": [
      "vm.getUuid()",
      "vm.getName()",
      "vm.getHypervisorType()"
    ],
    "line": 516,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "the license has been expired, please renew it",
    "en_US": "the license has been expired, please renew it",
    "zh_CN": "",
    "arguments": [],
    "line": 555,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "successfully HA started the VM[uuid:%s, name:%s]",
    "en_US": "successfully HA started the VM[uuid:{0}, name:{1}]",
    "zh_CN": "通过HA机制启动VM[uuid:{0}, name:{1}]成功。",
    "arguments": [
      "vm.getUuid()",
      "vm.getName()"
    ],
    "line": 552,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "failed to HA start the VM[uuid:%s, name:%s], %s.A GC job will retry it in interval of %s seconds",
    "en_US": "failed to HA start the VM[uuid:{0}, name:{1}], {2}.A GC job will retry it in interval of {3} seconds",
    "zh_CN": "通过HA机制启动VM[uuid:{0}, name:{1}]失败, 错误原因：{2}。一个定时任务（GC job）将会以{3}秒的间隔重试。",
    "arguments": [
      "vm.getUuid()",
      "vm.getName()",
      "errorCode",
      "HaGlobalConfig.NEVER_STOP_VM_FAILURE_RETRY_DELAY.value(Long.class)"
    ],
    "line": 563,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "successfully cancelled the self-fencer on the host[uuid:%s, name:%s]",
    "en_US": "successfully cancelled the self-fencer on the host[uuid:{0}, name:{1}]",
    "zh_CN": "在物理机[uuid:{0}, name:{1}]上取消主机保护机制（Host Self-Fencer）成功。",
    "arguments": [
      "host.getUuid()",
      "host.getName()"
    ],
    "line": 744,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "unable to cancel the self-fencer on the host[uuid:%s, name:%s], %s",
    "en_US": "unable to cancel the self-fencer on the host[uuid:{0}, name:{1}], {2}",
    "zh_CN": "在物理机[uuid:{0}, name:{1}]上取消主机保护机制（Host Self-Fencer）失败，错误原因：{2}。",
    "arguments": [
      "host.getUuid()",
      "host.getName()",
      "errorCode"
    ],
    "line": 749,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "successfully setup the self-fencer on the host[uuid:%s, name:%s]",
    "en_US": "successfully setup the self-fencer on the host[uuid:{0}, name:{1}]",
    "zh_CN": "在物理机[uuid:{0}, name:{1}]上设置主机保护机制（Host Self-Fencer）成功。",
    "arguments": [
      "host.getUuid()",
      "host.getName()"
    ],
    "line": 782,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "failed to setup the self-fencer on the host[uuid:%s, name:%s], %s",
    "en_US": "failed to setup the self-fencer on the host[uuid:{0}, name:{1}], {2}",
    "zh_CN": "在物理机[uuid:{0}, name:{1}]上设置主机保护机制（Host Self-Fencer）失败，错误原因：{2}。",
    "arguments": [
      "host.getUuid()",
      "host.getName()",
      "errorCode"
    ],
    "line": 788,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "Never stop vm GC[uuid:%s] executed over %s times, you can use DeleteGCJob to cancel it",
    "en_US": "Never stop vm GC[uuid:{0}] executed over {1} times, you can use DeleteGCJob to cancel it",
    "zh_CN": "",
    "arguments": [
      "this.getUuid()",
      "HaGlobalConfig.NEVER_STOP_VM_NOTIFICATION_RETRY_TIMES.value(Integer.class).toString()"
    ],
    "line": 37,
    "fileName": "src/main/java/org/zstack/ha/NeverStopVmGC.java"
  },
  {
    "raw": "parameters [accountUuid] only can be used by admin user!",
    "en_US": "parameters [accountUuid] only can be used by admin user!",
    "zh_CN": "",
    "arguments": [],
    "line": 41,
    "fileName": "src/main/java/org/zstack/hybrid/account/HybridAccountApiInterceptor.java"
  },
  {
    "raw": "key: [%s] already existed by accountUuid: [%s]",
    "en_US": "key: [{0}] already existed by accountUuid: [{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getKey()",
      "accountUuid"
    ],
    "line": 60,
    "fileName": "src/main/java/org/zstack/hybrid/account/HybridAccountApiInterceptor.java"
  },
  {
    "raw": "%s can only be called by admin account",
    "en_US": "{0} can only be called by admin account",
    "zh_CN": "",
    "arguments": [
      "msg.getClass().getSimpleName()"
    ],
    "line": 27,
    "fileName": "src/main/java/org/zstack/hybrid/backup/HybridBackupApiInterceptor.java"
  },
  {
    "raw": "regionId [%s] already created by ak [%s]",
    "en_US": "regionId [{0}] already created by ak [{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getRegionId()",
      "ak"
    ],
    "line": 56,
    "fileName": "src/main/java/org/zstack/hybrid/datacenter/DataCenterApiInterceptor.java"
  },
  {
    "raw": "DataCenter [%s] is still in sync progress, please wait.",
    "en_US": "DataCenter [{0}] is still in sync progress, please wait.",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 108,
    "fileName": "src/main/java/org/zstack/hybrid/datacenter/DataCenterManagerImpl.java"
  },
  {
    "raw": "identity zone [%s] already existed, uuid is: %s",
    "en_US": "identity zone [{0}] already existed, uuid is: {1}",
    "zh_CN": "",
    "arguments": [
      "msg.getZoneId()",
      "izo.getUuid()"
    ],
    "line": 47,
    "fileName": "src/main/java/org/zstack/hybrid/identityzone/IdentityZoneApiInterceptor.java"
  },
  {
    "raw": "either dataCenterUuid or regionId should be set, please check the parameters.",
    "en_US": "either dataCenterUuid or regionId should be set, please check the parameters.",
    "zh_CN": "",
    "arguments": [],
    "line": 72,
    "fileName": "src/main/java/org/zstack/hybrid/identityzone/IdentityZoneApiInterceptor.java"
  },
  {
    "raw": "IdentityZone [%s] is still in sync progress, please wait.",
    "en_US": "IdentityZone [{0}] is still in sync progress, please wait.",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 108,
    "fileName": "src/main/java/org/zstack/hybrid/identityzone/IdentityZoneManagerImpl.java"
  },
  {
    "raw": "EcsInstance must be running or stopped while deleting eip ",
    "en_US": "EcsInstance must be running or stopped while deleting eip ",
    "zh_CN": "",
    "arguments": [],
    "line": 88,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridEipCascadeExtension.java"
  },
  {
    "raw": "cannot delete system entry",
    "en_US": "cannot delete system entry",
    "zh_CN": "",
    "arguments": [],
    "line": 130,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "only support intranet rule in vpc",
    "en_US": "only support intranet rule in vpc",
    "zh_CN": "",
    "arguments": [],
    "line": 124,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "%s is not a valid cidr",
    "en_US": "{0} is not a valid cidr",
    "zh_CN": "",
    "arguments": [
      "msg.getCidr()"
    ],
    "line": 141,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "security group rule already existed",
    "en_US": "security group rule already existed",
    "zh_CN": "",
    "arguments": [],
    "line": 139,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "dstCidrBlock[%s] is not a valid cidr",
    "en_US": "dstCidrBlock[{0}] is not a valid cidr",
    "zh_CN": "",
    "arguments": [
      "msg.getDstCidrBlock()"
    ],
    "line": 145,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "next hop type [%s] not supported now!",
    "en_US": "next hop type [{0}] not supported now!",
    "zh_CN": "",
    "arguments": [
      "msg.getNextHopType()"
    ],
    "line": 105,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "no such vpn gateway: %s",
    "en_US": "no such vpn gateway: {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getNextHopUuid()"
    ],
    "line": 180,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "nexthop routerInterface belongs to %s, but the entry belongs to %s",
    "en_US": "nexthop routerInterface belongs to {0}, but the entry belongs to {1}",
    "zh_CN": "",
    "arguments": [
      "rivo.getvRouterType().toString()",
      "msg.getvRouterType()"
    ],
    "line": 158,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "no such ecs instance: %s",
    "en_US": "no such ecs instance: {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getNextHopUuid()"
    ],
    "line": 90,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "virtual border router only support routerinterface as next hop type",
    "en_US": "virtual border router only support routerinterface as next hop type",
    "zh_CN": "",
    "arguments": [],
    "line": 194,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "vswitch\u0027s cidr [%s] not in the vpc\u0027s [%s]",
    "en_US": "vswitch\u0027s cidr [{0}] not in the vpc\u0027s [{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getCidrBlock()",
      "vpcCidr"
    ],
    "line": 129,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "cidr is overlap by another vswitch: %s",
    "en_US": "cidr is overlap by another vswitch: {0}",
    "zh_CN": "",
    "arguments": [
      "old.getUuid()"
    ],
    "line": 136,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "invalid CidrBlock: %s, which must subnet in \u002710.0.0.0/8\u0027, \u0027172.16.0.0/12\u0027, \u0027192.168.0.0/16\u0027",
    "en_US": "invalid CidrBlock: {0}, which must subnet in \u002710.0.0.0/8\u0027, \u0027172.16.0.0/12\u0027, \u0027192.168.0.0/16\u0027",
    "zh_CN": "",
    "arguments": [
      "msg.getCidrBlock()"
    ],
    "line": 149,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "no such virtual router: %s",
    "en_US": "no such virtual router: {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getvRouterUuid()"
    ],
    "line": 101,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "no such virtual border router: %s",
    "en_US": "no such virtual border router: {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getvRouterUuid()"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "localGateway is not IPv4: %s",
    "en_US": "localGateway is not IPv4: {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getLocalGatewayIp()"
    ],
    "line": 68,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "peerGateway is not IPv4: %s",
    "en_US": "peerGateway is not IPv4: {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getPeerGatewayIp()"
    ],
    "line": 71,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "peerGateway is not subnet mask: %s",
    "en_US": "peerGateway is not subnet mask: {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getPeeringSubnetMask()"
    ],
    "line": 74,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "vlanId is not number: %s",
    "en_US": "vlanId is not number: {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getVlanId()"
    ],
    "line": 78,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "couldn\u0027t attach eip to ecs: [%s] , eip :[%s] already attached ecs:[%s] ",
    "en_US": "couldn\u0027t attach eip to ecs: [{0}] , eip :[{1}] already attached ecs:[{2}] ",
    "zh_CN": "",
    "arguments": [
      "msg.getEcsUuid()",
      "msg.getEipUuid()",
      "hevo.getAllocateResourceUuid()"
    ],
    "line": 276,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "couldn\u0027t attach eip [%s] to ecs: [%s] , ecs is already attached",
    "en_US": "couldn\u0027t attach eip [{0}] to ecs: [{1}] , ecs is already attached",
    "zh_CN": "",
    "arguments": [
      "msg.getEipUuid()",
      "msg.getEcsUuid()"
    ],
    "line": 282,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "eip[%s] and ecs[%s] should be in the same dataCenter ",
    "en_US": "eip[{0}] and ecs[{1}] should be in the same dataCenter ",
    "zh_CN": "",
    "arguments": [
      "msg.getEipUuid()",
      "msg.getEcsUuid()"
    ],
    "line": 291,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "couldn\u0027t detach eip :[%s], it is not attached on any instance ",
    "en_US": "couldn\u0027t detach eip :[{0}], it is not attached on any instance ",
    "zh_CN": "",
    "arguments": [
      "msg.getEipUuid()"
    ],
    "line": 300,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "%s is not a valid ipv4 address",
    "en_US": "{0} is not a valid ipv4 address",
    "zh_CN": "",
    "arguments": [
      "msg.getId()"
    ],
    "line": 43,
    "fileName": "src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java"
  },
  {
    "raw": "localCidr must be Cidr!",
    "en_US": "localCidr must be Cidr!",
    "zh_CN": "",
    "arguments": [],
    "line": 51,
    "fileName": "src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java"
  },
  {
    "raw": "remoteCidr must be Cidr!",
    "en_US": "remoteCidr must be Cidr!",
    "zh_CN": "",
    "arguments": [],
    "line": 55,
    "fileName": "src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java"
  },
  {
    "raw": "localCidr and remoteCidr must be Cidr!",
    "en_US": "localCidr and remoteCidr must be Cidr!",
    "zh_CN": "",
    "arguments": [],
    "line": 33,
    "fileName": "src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java"
  },
  {
    "raw": "vpngateway [%s] existed, cannot delete remote",
    "en_US": "vpngateway [{0}] existed, cannot delete remote",
    "zh_CN": "",
    "arguments": [],
    "line": 81,
    "fileName": "src/main/java/org/zstack/hybrid/network/vpn/VpcVpnGatewayCascadeExtension.java"
  },
  {
    "raw": "the user group[uuid:%s] does not belong to the account[uuid:%s]",
    "en_US": "the user group[uuid:{0}] does not belong to the account[uuid:{1}]",
    "zh_CN": "这个用户组[uuid:{0}]不属于当前账户[uuid:{1}]",
    "arguments": [
      "group.getUuid()",
      "msg.getAccountUuid()"
    ],
    "line": 299,
    "fileName": "src/main/java/org/zstack/identity/AccountBase.java"
  },
  {
    "raw": "cannot find Quota[name: %s] for the account[uuid: %s]",
    "en_US": "cannot find Quota[name: {0}] for the account[uuid: {1}]",
    "zh_CN": "无法为当前账户[uuid: {1}]找到Quota",
    "arguments": [
      "msg.getName()",
      "msg.getIdentityUuid()"
    ],
    "line": 401,
    "fileName": "src/main/java/org/zstack/identity/AccountBase.java"
  },
  {
    "raw": "Revoke Shared resource[uuid:%s type:%s] of account[uuid:%s]",
    "en_US": "Revoke Shared resource[uuid:{0} type:{1}] of account[uuid:{2}]",
    "zh_CN": "",
    "arguments": [
      "ruuid",
      "resourceType",
      "vo.getUuid()"
    ],
    "line": 451,
    "fileName": "src/main/java/org/zstack/identity/AccountBase.java"
  },
  {
    "raw": "Revoke Shared resource[uuid:%s type:%s] of account[uuid:%s] from account[uuid:%s]",
    "en_US": "Revoke Shared resource[uuid:{0} type:{1}] of account[uuid:{2}] from account[uuid:{3}]",
    "zh_CN": "",
    "arguments": [
      "ruuid",
      "resourceType",
      "vo.getUuid()",
      "auuid"
    ],
    "line": 448,
    "fileName": "src/main/java/org/zstack/identity/AccountBase.java"
  },
  {
    "raw": "the account[uuid: %s] doesn\u0027t have a resource[uuid: %s]",
    "en_US": "the account[uuid: {0}] doesn\u0027t have a resource[uuid: {1}]",
    "zh_CN": "账户[uuid: {0}]没有资源[uuid: {1}]",
    "arguments": [
      "vo.getUuid()",
      "ruuid"
    ],
    "line": 460,
    "fileName": "src/main/java/org/zstack/identity/AccountBase.java"
  },
  {
    "raw": "Shared resource[uuid:%s type:%s] to account[uuid:%s]",
    "en_US": "Shared resource[uuid:{0} type:{1}] to account[uuid:{2}]",
    "zh_CN": "",
    "arguments": [
      "ruuid",
      "resourceType",
      "auuid"
    ],
    "line": 518,
    "fileName": "src/main/java/org/zstack/identity/AccountBase.java"
  },
  {
    "raw": "Shared resource[uuid:%s type:%s] to public",
    "en_US": "Shared resource[uuid:{0} type:{1}] to public",
    "zh_CN": "",
    "arguments": [
      "ruuid",
      "resourceType"
    ],
    "line": 504,
    "fileName": "src/main/java/org/zstack/identity/AccountBase.java"
  },
  {
    "raw": "the user[uuid:%s] does not belong to the account[uuid:%s]",
    "en_US": "the user[uuid:{0}] does not belong to the account[uuid:{1}]",
    "zh_CN": "当前用户[uuid:{0}]不属于当前账户[uuid:{1}]",
    "arguments": [
      "user.getUuid()",
      "msg.getAccountUuid()"
    ],
    "line": 497,
    "fileName": "src/main/java/org/zstack/identity/AccountBase.java"
  },
  {
    "raw": "cannot find the resource[uuid:%s]; wrong resourceUuid or the resource is admin resource",
    "en_US": "cannot find the resource[uuid:{0}]; wrong resourceUuid or the resource is admin resource",
    "zh_CN": "无法找到资源[uuid:{0}]：错误的资源uuid或者资源是管理员资源",
    "arguments": [
      "resourceUuid"
    ],
    "line": 149,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "the user specified by the userUuid[%s] does not belong to the current account, and the current account is not an admin account, so it has no permission to check the user\u0027spermissions",
    "en_US": "the user specified by the userUuid[{0}] does not belong to the current account, and the current account is not an admin account, so it has no permission to check the user\u0027spermissions",
    "zh_CN": "当前通过userUuid获得的user不属于当前账户，而且当前账户不是管理员账户。",
    "arguments": [
      "msg.getUserUuid()"
    ],
    "line": 339,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "%s is not an API",
    "en_US": "{0} is not an API",
    "zh_CN": "{0}不是一个API",
    "arguments": [
      "apiName"
    ],
    "line": 371,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "account[%s] not found",
    "en_US": "account[{0}] not found",
    "zh_CN": "没有找到账户[{0}]",
    "arguments": [
      "msg.getAccountName()"
    ],
    "line": 452,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "cannot find the account[uuid:%s]",
    "en_US": "cannot find the account[uuid:{0}]",
    "zh_CN": "找不到账户[uuid:{0}]",
    "arguments": [
      "accountUuid"
    ],
    "line": 1014,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "accountName and accountUuid cannot both be null, you must specify at least one",
    "en_US": "accountName and accountUuid cannot both be null, you must specify at least one",
    "zh_CN": "账户名和账户Uuid不能同时为空，您必须定义至少一个",
    "arguments": [],
    "line": 1509,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "unable to create a group. A group called %s is already under the account[uuid:%s]",
    "en_US": "unable to create a group. A group called {0} is already under the account[uuid:{1}]",
    "zh_CN": "不能创建用户组，用户组“{0}”已经在账户“{0}”下了",
    "arguments": [
      "msg.getName()",
      "msg.getAccountUuid()"
    ],
    "line": 1520,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "unable to create a user. A user called %s is already under the account[uuid:%s]",
    "en_US": "unable to create a user. A user called {0} is already under the account[uuid:{1}]",
    "zh_CN": "不能创建用户，用户“{0}”已经在账户“{0}”下了",
    "arguments": [
      "msg.getName()",
      "msg.getAccountUuid()"
    ],
    "line": 1530,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "unable to create an account. An account already called %s",
    "en_US": "unable to create an account. An account already called {0}",
    "zh_CN": "不能创建账户，“{0}”已经被使用",
    "arguments": [
      "msg.getName()"
    ],
    "line": 1539,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "unable to delete an account. The account is an admin account",
    "en_US": "unable to delete an account. The account is an admin account",
    "zh_CN": "不能删除账户，这个账户是一个管理者账户",
    "arguments": [],
    "line": 1545,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "Only admin can delete account.",
    "en_US": "Only admin can delete account.",
    "zh_CN": "",
    "arguments": [],
    "line": 1727,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "the current session is an account session. You need to specify the field \u0027uuid\u0027 of the user you want to update",
    "en_US": "the current session is an account session. You need to specify the field \u0027uuid\u0027 of the user you want to update",
    "zh_CN": "当前会话是一个账户会话，你需要定义一个\u0027uuid\u0027字段来指定你要更新的用户",
    "arguments": [],
    "line": 1553,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "your are login as a user, you cannot another user[uuid:%s]",
    "en_US": "your are login as a user, you cannot another user[uuid:{0}]",
    "zh_CN": "你已经登录为一个用户，不能成为另一个用户[uuid:{0}]",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 1564,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "all is set to false, accountUuids cannot be null or empty",
    "en_US": "all is set to false, accountUuids cannot be null or empty",
    "zh_CN": "all参数被设为false时，账户uuid不能为空",
    "arguments": [],
    "line": 1572,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "toPublic is set to false, accountUuids cannot be null or empty",
    "en_US": "toPublic is set to false, accountUuids cannot be null or empty",
    "zh_CN": "toPublic参数被设为false时，账户uuid不能为空",
    "arguments": [],
    "line": 1580,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "policy[name: %s, uuid: %s] doesn\u0027t belong to the account[uuid: %s]",
    "en_US": "policy[name: {0}, uuid: {1}] doesn\u0027t belong to the account[uuid: {2}]",
    "zh_CN": "策略[名称: {0}, uuid: {1}]不属于账户[uuid: {2}]",
    "arguments": [
      "policy.getName()",
      "policy.getUuid()",
      "msg.getSession().getAccountUuid()"
    ],
    "line": 1629,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "user[name: %s, uuid: %s] doesn\u0027t belong to the account[uuid: %s]",
    "en_US": "user[name: {0}, uuid: {1}] doesn\u0027t belong to the account[uuid: {2}]",
    "zh_CN": "用户[名称: {0}, uuid: {1}]不属于账户[uuid: {2}]",
    "arguments": [
      "user.getName()",
      "user.getUuid()",
      "msg.getSession().getAccountUuid()"
    ],
    "line": 1643,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "group[name: %s, uuid: %s] doesn\u0027t belong to the account[uuid: %s]",
    "en_US": "group[name: {0}, uuid: {1}] doesn\u0027t belong to the account[uuid: {2}]",
    "zh_CN": "用户组[名称: {0}, uuid: {1}]不属于账户[uuid: {2}]",
    "arguments": [
      "group.getName()",
      "group.getUuid()",
      "msg.getSession().getAccountUuid()"
    ],
    "line": 1647,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "a statement must have effect field. Invalid statement[%s]",
    "en_US": "a statement must have effect field. Invalid statement[{0}]",
    "zh_CN": "声明必须含有\u0027effect\u0027字段。 无效的声明",
    "arguments": [
      "JSONObjectUtil.toJsonString(s)"
    ],
    "line": 1655,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "a statement must have action field. Invalid statement[%s]",
    "en_US": "a statement must have action field. Invalid statement[{0}]",
    "zh_CN": "声明必须含有\u0027action\u0027字段。 无效的声明",
    "arguments": [
      "JSONObjectUtil.toJsonString(s)"
    ],
    "line": 1658,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "a statement must have a non-empty action field. Invalid statement[%s]",
    "en_US": "a statement must have a non-empty action field. Invalid statement[{0}]",
    "zh_CN": "声明必须含有不为空的\u0027action\u0027字段。 无效的声明",
    "arguments": [
      "JSONObjectUtil.toJsonString(s)"
    ],
    "line": 1661,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "the name of admin account cannot be updated",
    "en_US": "the name of admin account cannot be updated",
    "zh_CN": "不能更改管理员账户名称",
    "arguments": [],
    "line": 1717,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "account[uuid: %s, name: %s] is a normal account, it cannot reset the password of another account[uuid: %s]",
    "en_US": "account[uuid: {0}, name: {1}] is a normal account, it cannot reset the password of another account[uuid: {2}]",
    "zh_CN": "[uuid: {0}, 名称: {1}]是一个普通账户，不能被其他普通账户重设密码",
    "arguments": [
      "account.getUuid()",
      "account.getName()",
      "msg.getUuid()"
    ],
    "line": 1727,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "the backup storage[uuid:%s] is not in status of Connected, current status is %s",
    "en_US": "the backup storage[uuid:{0}] is not in status of Connected, current status is {1}",
    "zh_CN": "镜像服务器[uuid:{0}]不是Connected状态，当前状态为{1}",
    "arguments": [
      "backupStorageUuid",
      "bsStatus"
    ],
    "line": 35,
    "fileName": "src/main/java/org/zstack/image/BackupStorageDeleteBitGC.java"
  },
  {
    "raw": "volume[uuid:%s] is not Ready, it\u0027s %s",
    "en_US": "volume[uuid:{0}] is not Ready, it\u0027s {1}",
    "zh_CN": "云盘[uuid:{0}]未Ready，它现在为{1}",
    "arguments": [
      "vol.getUuid()",
      "vol.getStatus()"
    ],
    "line": 74,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is not Enabled, it\u0027s %s",
    "en_US": "volume[uuid:{0}] is not Enabled, it\u0027s {1}",
    "zh_CN": "云盘[uuid:{0}]未Enabled，它现在为{1}",
    "arguments": [
      "vol.getUuid()",
      "vol.getState()"
    ],
    "line": 78,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "ISO cannot be used as system image",
    "en_US": "ISO cannot be used as system image",
    "zh_CN": "ISO不能被作为一个系统标签",
    "arguments": [],
    "line": 122,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "unknown format[%s]",
    "en_US": "unknown format[{0}]",
    "zh_CN": "未知格式[{0}]",
    "arguments": [
      "msg.getFormat()"
    ],
    "line": 128,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "unsupported image type[%s]",
    "en_US": "unsupported image type[{0}]",
    "zh_CN": "不支持的镜像类型[{0}]",
    "arguments": [
      "msg.getType()"
    ],
    "line": 132,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "no backup storage specified in uuids%s is available for adding this image; they are not in status %s or not in state %s, or the uuid is invalid backup storage uuid",
    "en_US": "no backup storage specified in uuids{0} is available for adding this image; they are not in status {1} or not in state {2}, or the uuid is invalid backup storage uuid",
    "zh_CN": "镜像服务器uuids{0}不满足添加镜像的条件；它们的状态不同时满足{1}和{2},亦或者是无效的uuid",
    "arguments": [
      "msg.getBackupStorageUuids()",
      "BackupStorageStatus.Connected",
      "BackupStorageState.Enabled"
    ],
    "line": 154,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "url must starts with \u0027file:///\u0027, \u0027http://\u0027, \u0027https://\u0027 or \u0027/\u0027",
    "en_US": "url must starts with \u0027file:///\u0027, \u0027http://\u0027, \u0027https://\u0027 or \u0027/\u0027",
    "zh_CN": "",
    "arguments": [],
    "line": 149,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "the image[uuid:%s, name:%s] is not on any backup storage",
    "en_US": "the image[uuid:{0}, name:{1}] is not on any backup storage",
    "zh_CN": "镜像[uuid:{0}, 名称:{1}]不在任一镜像服务器上",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 146,
    "fileName": "src/main/java/org/zstack/image/ImageBase.java"
  },
  {
    "raw": "No connected backup storage found for image[uuid:%s, name:%s]",
    "en_US": "No connected backup storage found for image[uuid:{0}, name:{1}]",
    "zh_CN": "在所有 Connected 状态的镜像服务器上都找不到镜像[uuid:{0}, name:{1}]",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 156,
    "fileName": "src/main/java/org/zstack/image/ImageBase.java"
  },
  {
    "raw": "failed to return capacity[%s] to the backup storage[uuid:%s], %s",
    "en_US": "failed to return capacity[{0}] to the backup storage[uuid:{1}], {2}",
    "zh_CN": "向镜像服务器[uuid:{1}]归还容量[{0}]失败，错误细节：{2}",
    "arguments": [
      "size",
      "bsUuid",
      "reply.getError()"
    ],
    "line": 274,
    "fileName": "src/main/java/org/zstack/image/ImageBase.java"
  },
  {
    "raw": "the image[uuid:%s, name:%s] is not on the backup storage[uuid:%s]",
    "en_US": "the image[uuid:{0}, name:{1}] is not on the backup storage[uuid:{2}]",
    "zh_CN": "镜像[uuid:{0}, 名称:{1}]不在镜像服务器[uuid:{2}]上",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "bsUuid"
    ],
    "line": 531,
    "fileName": "src/main/java/org/zstack/image/ImageBase.java"
  },
  {
    "raw": "the image[uuid:%s, name:%s]\u0027s status[%s] is not Deleted on the backup storage[uuid:%s]",
    "en_US": "the image[uuid:{0}, name:{1}]\u0027s status[{2}] is not Deleted on the backup storage[uuid:{3}]",
    "zh_CN": "镜像[uuid:{0}, 名称:{1}]的状态[{2}]在镜像服务器[uuid:{3}]上不是Deleled",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "ref.getStatus()",
      "bsUuid"
    ],
    "line": 473,
    "fileName": "src/main/java/org/zstack/image/ImageBase.java"
  },
  {
    "raw": "the image[uuid:%s, name:%s] is not deleted on any backup storage",
    "en_US": "the image[uuid:{0}, name:{1}] is not deleted on any backup storage",
    "zh_CN": "镜像[uuid:{0}, 名称:{1}]未在任一镜像服务器上被删除",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 518,
    "fileName": "src/main/java/org/zstack/image/ImageBase.java"
  },
  {
    "raw": "the image[uuid:%s, name:%s] is not deleted on the backup storage[uuid:%s]",
    "en_US": "the image[uuid:{0}, name:{1}] is not deleted on the backup storage[uuid:{2}]",
    "zh_CN": "镜像[uuid:{0}, 名称:{1}]未在镜像服务器[uuid:{2}]上被删除",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "bsUuid"
    ],
    "line": 536,
    "fileName": "src/main/java/org/zstack/image/ImageBase.java"
  },
  {
    "raw": "failed to allocate all backup storage[uuid:%s], a list of error: %s",
    "en_US": "failed to allocate all backup storage[uuid:{0}], a list of error: {1}",
    "zh_CN": "镜像服务器[uuid:{0}]分配失败，错误清单:{1}",
    "arguments": [
      "msg.getBackupStorageUuids()",
      "JSONObjectUtil.toJsonString(errs)"
    ],
    "line": 286,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "failed to create data volume template from volume[uuid:%s] on all backup storage%s. See cause for one of errors",
    "en_US": "failed to create data volume template from volume[uuid:{0}] on all backup storage[uuid:{1}]. See cause for one of errors",
    "zh_CN": "在所有镜像服务器[uuid:{1}]上创建云盘[uuid:{0}]的云盘模版失败，查看错误原因",
    "arguments": [
      "msg.getVolumeUuid()",
      "msg.getBackupStorageUuids()"
    ],
    "line": 378,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "unable to allocate backup storage specified by uuids%s, list errors are: %s",
    "en_US": "unable to allocate backup storage specified by uuids{0}, list errors are: {1}",
    "zh_CN": "不能根据[uuids:{0}]分配镜像服务器，错误清单为：{1}",
    "arguments": [
      "msg.getBackupStorageUuids()",
      "JSONObjectUtil.toJsonString(errs)"
    ],
    "line": 695,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "image [uuid:%s] has been deleted",
    "en_US": "image [uuid:{0}] has been deleted",
    "zh_CN": "镜像[uuid:{0}]已经被删除。",
    "arguments": [
      "ivo.getUuid()"
    ],
    "line": 1006,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "failed to create image from root volume[uuid:%s] on all backup storage, see cause for one of errors",
    "en_US": "failed to create image from root volume[uuid:{0}] on all backup storage, see cause for one of errors",
    "zh_CN": "在所有镜像服务器上从根云盘[uuid:{0}]创建镜像失败，查看错误原因",
    "arguments": [
      "msg.getRootVolumeUuid()"
    ],
    "line": 792,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "failed to expunge the image[uuid:%s] on the backup storage[uuid:%s], will try it later. %s",
    "en_US": "failed to expunge the image[uuid:{0}] on the backup storage[uuid:{1}], will try it later. {2}",
    "zh_CN": "无法在镜像服务器[uuid:{1}]上彻底删除镜像[uuid:{0}]，稍后将会重试。错误细节：{2}",
    "arguments": [
      "imageUuid",
      "bsUuid",
      "reply.getError()"
    ],
    "line": 1165,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "added image [name: %s, uuid: %s]",
    "en_US": "added image [name: {0}, uuid: {1}]",
    "zh_CN": "",
    "arguments": [
      "name",
      "imageUuid"
    ],
    "line": 1501,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "upload image [name: %s, uuid: %s] failed: %s",
    "en_US": "upload image [name: {0}, uuid: {1}] failed: {2}",
    "zh_CN": "",
    "arguments": [
      "name",
      "imageUuid",
      "reason.toString()"
    ],
    "line": 1505,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "upload session expired",
    "en_US": "upload session expired",
    "zh_CN": "",
    "arguments": [],
    "line": 1528,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "the vip[uuid:%s] has been used for %s",
    "en_US": "the vip[uuid:{0}] has been used for {1}",
    "zh_CN": "虚拟IP[uuid:{0}]已经用作网络服务 {1}",
    "arguments": [
      "msg.getVipUuid()",
      "vip.getUseFor()"
    ],
    "line": 43,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "the peerAddress[%s] cannot be the same to the VIP address",
    "en_US": "the peerAddress[{0}] cannot be the same to the VIP address",
    "zh_CN": "对端地址[{0}]不能和虚拟IP地址相同",
    "arguments": [
      "msg.getPeerAddress()"
    ],
    "line": 47,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "the peerAddress[%s] is not an IPv4 address",
    "en_US": "the peerAddress[{0}] is not an IPv4 address",
    "zh_CN": "对端地址[{0}]不是一个IPv4地址",
    "arguments": [
      "msg.getPeerAddress()"
    ],
    "line": 59,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "there has been a connection[uuid:%s, name:%s] has the same L3NetworkUuid, peerAddress",
    "en_US": "there has been a connection[uuid:{0}, name:{1}] has the same L3NetworkUuid, peerAddress",
    "zh_CN": "",
    "arguments": [
      "inv.getUuid()",
      "inv.getName()"
    ],
    "line": 64,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "the L3 network[uuid:%s] doesn\u0027t have any IP range",
    "en_US": "the L3 network[uuid:{0}] doesn\u0027t have any IP range",
    "zh_CN": "三层网络[uuid:{0}]没有设置网络段",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "the local CIDR[%s] of the L3 network[uuid:%s] overlaps with the peerCidr[%s]",
    "en_US": "the local CIDR[{0}] of the L3 network[uuid:{1}] overlaps with the peerCidr[{2}]",
    "zh_CN": "三层网络[uuid:{1}]的本地CIDR[{0}]与对端CIDR[{2}]重叠",
    "arguments": [
      "localCidr",
      "rcidr",
      "msg.getL3NetworkUuid()"
    ],
    "line": 85,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "the authKey cannot contain white space and special characters of \u0027\\\"`\\\\",
    "en_US": "the authKey cannot contain white space and special characters of \u0027\\\"`\\\\",
    "zh_CN": "验证码不能包含空格和以下字符:\u0027\\\"`\\\\",
    "arguments": [],
    "line": 93,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "Current port range[%s, %s] is conflicted with used port range [%s, %s] with vip[uuid: %s] protocol: UDP",
    "en_US": "Current port range[{0}, {1}] is conflicted with used port range [{2}, {3}] with vip[uuid: {4}] protocol: UDP",
    "zh_CN": "",
    "arguments": [
      "Long.toString(range2.getStart())",
      "Long.toString(range2.getEnd())",
      "Long.toString(cur.getStart())",
      "Long.toString(cur.getEnd())",
      "msg.getVipUuid()"
    ],
    "line": 464,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecManagerImpl.java"
  },
  {
    "raw": "vyos doesn\u0027t support aes-192 as IkeEncryptionAlgorithm, available options aes-128, aes-256, 3des",
    "en_US": "vyos doesn\u0027t support aes-192 as IkeEncryptionAlgorithm, available options aes-128, aes-256, 3des",
    "zh_CN": "vyos不支持aes-192作为密钥交换加密算法，可用选择为aes-128, aes-256, 3des",
    "arguments": [],
    "line": 211,
    "fileName": "src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java"
  },
  {
    "raw": "vyos doesn\u0027t support aes-192 as PolicyEncryptionAlgorithm, available options aes-128, aes-256, 3des",
    "en_US": "vyos doesn\u0027t support aes-192 as PolicyEncryptionAlgorithm, available options aes-128, aes-256, 3des",
    "zh_CN": "vyos不支持aes-192作为加密算法协议，可用选择为aes-128, aes-256, 3des",
    "arguments": [],
    "line": 217,
    "fileName": "src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java"
  },
  {
    "raw": "vyos doesn\u0027t support %d as Ike DhGroup ",
    "en_US": "vyos doesn\u0027t support %d as Ike DhGroup ",
    "zh_CN": "vyos不支持[{0}]作为Ike DhGroup",
    "arguments": [
      "msg.getIkeDhGroup()"
    ],
    "line": 229,
    "fileName": "src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java"
  },
  {
    "raw": "there has been a kvm host having management ip[%s]",
    "en_US": "there has been a kvm host having management ip[{0}]",
    "zh_CN": "已经存在一个拥有管理节点IP[{0}]的物理机",
    "arguments": [
      "msg.getManagementIp()"
    ],
    "line": 36,
    "fileName": "src/main/java/org/zstack/kvm/KVMApiInterceptor.java"
  },
  {
    "raw": "KVMConnectExtensionForL2Network wont\u0027s support L2Network[type:%s]",
    "en_US": "KVMConnectExtensionForL2Network wont\u0027s support L2Network[type:{0}]",
    "zh_CN": "物理机二层网络连接插件不支持二层网络[类型:{0}]",
    "arguments": [
      "l2.getType()"
    ],
    "line": 125,
    "fileName": "src/main/java/org/zstack/kvm/KVMConnectExtensionForL2Network.java"
  },
  {
    "raw": "unable to connect to KVM[ip:%s, username:%s, sshPort:%d ] to do DNS check, please check if username/password is wrong; %s",
    "en_US": "unable to connect to KVM[ip:{0}, username:{1}, sshPort:{2} ] to do DNS check, please check if username/password is wrong; {3}",
    "zh_CN": "无法连接物理机[ip:{0}, 用户名:{1}, ssh端口:{2} ]做DNS检查，请检查用户名密码是否正确；{3}",
    "arguments": [
      "self.getManagementIp()",
      "getSelf().getUsername()",
      "getSelf().getPort()",
      "result.getExitErrorMessage()"
    ],
    "line": 414,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "the host[uuid:%s, status:%s] is not Connected",
    "en_US": "the host[uuid:{0}, status:{1}] is not Connected",
    "zh_CN": "物理机[uuid:{0}, 状态:{1}]不是Connected状态",
    "arguments": [
      "self.getUuid()",
      "self.getStatus()"
    ],
    "line": 486,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "cannot do volume snapshot merge when vm[uuid:%s] is in state of %s. The operation is only allowed when vm is Running or Stopped",
    "en_US": "cannot do volume snapshot merge when vm[uuid:{0}] is in state of {1}. The operation is only allowed when vm is Running or Stopped",
    "zh_CN": "当云主机[uuid:{0}]处于{1}状态的时候不能做云盘快照合并。此操作只能在云主机处在Running和Stopped状态时进行",
    "arguments": [
      "volume.getUuid()",
      "state"
    ],
    "line": 861,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "live volume snapshot merge needs libvirt version greater than %s, current libvirt version is %s. Please stop vm and redo the operation or detach the volume if it\u0027s data volume",
    "en_US": "live volume snapshot merge needs libvirt version greater than {0}, current libvirt version is {1}. Please stop vm and redo the operation or detach the volume if it\u0027s data volume",
    "zh_CN": "实时云盘快照合并需要libvirt版本高于{0}，现在libvirt版本为{1}。请停止云主机后重试或卸载云盘（仅当为数据云盘时）",
    "arguments": [
      "KVMConstant.MIN_LIBVIRT_LIVE_BLOCK_COMMIT_VERSION",
      "libvirtVersion"
    ],
    "line": 868,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "vm[uuid:%s] is not Running or Stopped, current state[%s]",
    "en_US": "vm[uuid:{0}] is not Running or Stopped, current state[{1}]",
    "zh_CN": "云主机[uuid:{0}]未处在Runing或Stopped状态all参数被设为false时，账户uuid不能为空，现在状态为[{1}]",
    "arguments": [
      "msg.getVmUuid()",
      "vmState"
    ],
    "line": 943,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to attach nic[uuid:%s, vm:%s] on kvm host[uuid:%s, ip:%s],because %s",
    "en_US": "failed to attach nic[uuid:{0}, vm:{1}] on kvm host[uuid:{2}, ip:{3}],because {4}",
    "zh_CN": "在物理机[uuid:{3},IP:{3}]上加载网卡[uuid:{0},云主机:{1}]失败，因为:{4}",
    "arguments": [
      "msg.getNicInventory().getUuid()",
      "msg.getNicInventory().getVmInstanceUuid()",
      "self.getUuid()",
      "self.getManagementIp()",
      "ret.getError()"
    ],
    "line": 1250,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to detach data volume[uuid:%s, installPath:%s] from vm[uuid:%s, name:%s] on kvm host[uuid:%s, ip:%s], because %s",
    "en_US": "failed to detach data volume[uuid:{0}, installPath:{1}] from vm[uuid:{2}, name:{3}] on kvm host[uuid:{4}, ip:{5}], because {6}",
    "zh_CN": "无法在KVM物理机[uuid:{4}, ip:{5}]上为云主机[uuid:{2}, name:{3}]卸载数据云盘[uuid:{0}, installPath:{1}]，因为：{6}",
    "arguments": [
      "vol.getUuid()",
      "vol.getInstallPath()",
      "vm.getUuid()",
      "vm.getName()",
      "getSelf().getUuid()",
      "getSelf().getManagementIp()",
      "ret.getError()"
    ],
    "line": 1328,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to attach data volume[uuid:%s, installPath:%s] to vm[uuid:%s, name:%s] on kvm host[uuid:%s, ip:%s], because %s",
    "en_US": "failed to attach data volume[uuid:{0}, installPath:{1}] to vm[uuid:{2}, name:{3}] on kvm host[uuid:{4}, ip:{5}], because {6}",
    "zh_CN": "无法在KVM物理机[uuid:{4}, ip:{5}]上为云主机[uuid:{2}, name:{3}]挂载数据云盘[uuid:{0}, installPath:{1}]，因为：{6}",
    "arguments": [
      "vol.getUuid()",
      "vol.getInstallPath()",
      "vm.getUuid()",
      "vm.getName()",
      "getSelf().getUuid()",
      "getSelf().getManagementIp()",
      "ret.getError()"
    ],
    "line": 1424,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to destroy vm[uuid:%s name:%s] on kvm host[uuid:%s, ip:%s], because %s",
    "en_US": "failed to destroy vm[uuid:{0} name:{1}] on kvm host[uuid:{2}, ip:{3}], because {4}",
    "zh_CN": "无法在物理机[uuid:{2}, ip:{3}]上删除云主机[uuid:{0} name:{1}]，原因：{4}",
    "arguments": [
      "vminv.getUuid()",
      "vminv.getName()",
      "self.getUuid()",
      "self.getManagementIp()",
      "e.getMessage()"
    ],
    "line": 1482,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to stop vm[uuid:%s name:%s] on kvm host[uuid:%s, ip:%s], because %s",
    "en_US": "failed to stop vm[uuid:{0} name:{1}] on kvm host[uuid:{2}, ip:{3}], because {4}",
    "zh_CN": "在物理机[uuid:{2}, ip:{3}]上停止云主机[uuid:{0} 名称:{1}]失败，因为:{4}",
    "arguments": [
      "vminv.getUuid()",
      "vminv.getName()",
      "self.getUuid()",
      "self.getManagementIp()",
      "e.getMessage()"
    ],
    "line": 1648,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to start vm[uuid:%s name:%s] on kvm host[uuid:%s, ip:%s], because %s",
    "en_US": "failed to start vm[uuid:{0} name:{1}] on kvm host[uuid:{2}, ip:{3}], because {4}",
    "zh_CN": "在物理机[uuid:{2}, ip:{3}]上启动云主机[uuid:{0} 名称:{1}]失败，因为:{4}",
    "arguments": [
      "spec.getVmInventory().getUuid()",
      "spec.getVmInventory().getName()",
      "self.getUuid()",
      "self.getManagementIp()",
      "e.getMessage()"
    ],
    "line": 1886,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "%s, failed to check physical network interfaces[names : %s] on kvm host[uuid:%s, ip:%s]",
    "en_US": "{0}, failed to check physical network interfaces[names : {1}] on kvm host[uuid:{2}, ip:{3}]",
    "zh_CN": "{0}，检查在物理机[uuid:{2}, ip:{3}]上的物理网络[名称 : {1}]失败",
    "arguments": [
      "rsp.getError()",
      "msg.getPhysicalInterface()",
      "context.getInventory().getUuid()",
      "context.getInventory().getManagementIp()"
    ],
    "line": 2126,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "unable to connect to kvm host[uuid:%s, ip:%s, url:%s], because %s",
    "en_US": "unable to connect to kvm host[uuid:{0}, ip:{1}, url:{2}], because {3}",
    "zh_CN": "连接物理机[uuid:{0}, ip:{1}，url:{2}]失败，因为:{3}",
    "arguments": [
      "self.getUuid()",
      "self.getManagementIp()",
      "connectPath",
      "rsp.getError()"
    ],
    "line": 2305,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "host can not access any primary storage, please check network",
    "en_US": "host can not access any primary storage, please check network",
    "zh_CN": "物理机无法访问任何主存储，请检查网络。",
    "arguments": [],
    "line": 2446,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to ping all DNS/IP in %s; please check /etc/resolv.conf to make sure your host is able to reach public internet",
    "en_US": "failed to ping all DNS/IP in {0}; please check /etc/resolv.conf to make sure your host is able to reach public internet",
    "zh_CN": "在{0}中的所有DNS/IP都ping失败了，请检查 /etc/resolv.conf 来确保你的主机能连接到公网",
    "arguments": [
      "checkList"
    ],
    "line": 2445,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "unable to connect to KVM[ip:%s, username:%s, sshPort: %d, ] to do DNS check, please check if username/password is wrong; %s",
    "en_US": "unable to connect to KVM[ip:{0}, username:{1}, sshPort: {2}, ] to do DNS check, please check if username/password is wrong; {3}",
    "zh_CN": "无法连接物理机[ip:{0}, 用户名:{1}, ssh端口:{2} ]做DNS检查，请检查用户名密码是否正确；{3}",
    "arguments": [
      "self.getManagementIp()",
      "getSelf().getUsername()",
      "getSelf().getPort()",
      "ret.getExitErrorMessage()"
    ],
    "line": 2443,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "the KVM host[ip:%s] cannot access the management node\u0027s callback url. It seems that the KVM host cannot reach the management IP[%s]. %s %s",
    "en_US": "the KVM host[ip:{0}] cannot access the management node\u0027s callback url. It seems that the KVM host cannot reach the management IP[{1}]. {2} {3}",
    "zh_CN": "物理机[ip:{0}] 不能连接到管理节点 。 看起来是这个物理机无法到达管理节点的IP [{1}]. {2} {3}",
    "arguments": [
      "self.getManagementIp()",
      "Platform.getManagementServerIp()",
      "ret.getStderr()",
      "ret.getExitErrorMessage()"
    ],
    "line": 2473,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "unable to connect to KVM[ip:%s, username:%s, sshPort:%d] to check the management node connectivity,please check if username/password is wrong; %s",
    "en_US": "unable to connect to KVM[ip:{0}, username:{1}, sshPort:{2}] to check the management node connectivity,please check if username/password is wrong; {3}",
    "zh_CN": "不能连接到物理机[ip:{0}, username:{1}, sshPort:{2}] 去检查与管理节点是否连通  ,请检查您的用户名或者密码是否有误; {3}",
    "arguments": [
      "self.getManagementIp()",
      "getSelf().getUsername()",
      "getSelf().getPort()",
      "ret.getExitErrorMessage()"
    ],
    "line": 2470,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "unable to get kvm host[uuid:%s, ip:%s] facts by ansible\\n%s",
    "en_US": "unable to get kvm host[uuid:{0}, ip:{1}] facts by ansible\\n{2}",
    "zh_CN": "不能获取物理机[uuid:{0}, ip:{1}]的配置管理器\\n{2}",
    "arguments": [
      "self.getUuid()",
      "self.getManagementIp()",
      "ret.getExecutionLog()"
    ],
    "line": 2564,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "unrecognized ansible facts mediaType, %s",
    "en_US": "unrecognized ansible facts mediaType, {0}",
    "zh_CN": "未识别的Ansible facts 类型（mediaType），{0}",
    "arguments": [
      "ret.getStdout()"
    ],
    "line": 2570,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "unrecognized ansible facts mediaType, cannot find field \u0027ansible_facts\u0027, %s",
    "en_US": "unrecognized ansible facts mediaType, cannot find field \u0027ansible_facts\u0027, {0}",
    "zh_CN": "未授权的配置管理器类型，不能发现\u0027ansible_facts\u0027, {0}",
    "arguments": [
      "ret.getStdout()"
    ],
    "line": 2577,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "cannot find either \u0027vmx\u0027 or \u0027svm\u0027 in /proc/cpuinfo, please make sure you have enabled virtualization in your BIOS setting",
    "en_US": "cannot find either \u0027vmx\u0027 or \u0027svm\u0027 in /proc/cpuinfo, please make sure you have enabled virtualization in your BIOS setting",
    "zh_CN": "不能发现以下任意一个  \u0027vmx\u0027 or \u0027svm\u0027 在路径 /proc/cpuinfo 里, 请检查你是否在你的BIOS设置里开启了virtualization选项",
    "arguments": [],
    "line": 2608,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "the kvm host[uuid:%s] asks the management server to reconnect it for %s",
    "en_US": "the kvm host[uuid:{0}] asks the management server to reconnect it for {1}",
    "zh_CN": "KVM物理机[uuid:{0}]请求管理节点重连用于{1}",
    "arguments": [
      "cmd.hostUuid",
      "cmd.reason"
    ],
    "line": 202,
    "fileName": "src/main/java/org/zstack/kvm/KVMHostFactory.java"
  },
  {
    "raw": "failed to create bridge[%s] for l2Network[uuid:%s, type:%s] on kvm host[uuid:%s], because %s",
    "en_US": "failed to create bridge[{0}] for l2Network[uuid:{1}, type:{2}] on kvm host[uuid:{3}], because {4}",
    "zh_CN": "在物理机[uuid:{3}]上为L2网络[uuid:{1}, type:{2}]创建网桥[{0}]失败，原因：{4}",
    "arguments": [
      "cmd.getBridgeName()",
      "l2Network.getUuid()",
      "l2Network.getType()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 69,
    "fileName": "src/main/java/org/zstack/kvm/KVMRealizeL2NoVlanNetworkBackend.java"
  },
  {
    "raw": "failed to check bridge[%s] for l2NoVlanNetwork[uuid:%s, name:%s] on kvm host[uuid: %s], %s",
    "en_US": "failed to check bridge[{0}] for l2NoVlanNetwork[uuid:{1}, name:[{2}] on kvm host[uuid: {3}], {4}",
    "zh_CN": "在L2网络[uuid:{1}中检查网桥[{0}]失败，名字为[{2}]在物理机t[uuid: {3}]上, {4}",
    "arguments": [
      "cmd.getBridgeName()",
      "l2Network.getUuid()",
      "l2Network.getName()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 120,
    "fileName": "src/main/java/org/zstack/kvm/KVMRealizeL2NoVlanNetworkBackend.java"
  },
  {
    "raw": "failed to create bridge[%s] for l2Network[uuid:%s, type:%s, vlan:%s] on kvm host[uuid:%s], because %s",
    "en_US": "failed to create bridge[{0}] for l2Network[uuid:{1}, type:{2}, vlan:{3}] on kvm host[uuid:{4}], because {5}",
    "zh_CN": "创建L2网络[uuid:{1}中的网桥[{0}]失败 , 类型为：{2}, vlan:{3}] 在物理机[uuid:{4}]上, 原因： {5}",
    "arguments": [
      "cmd.getBridgeName()",
      "l2Network.getUuid()",
      "l2Network.getType()",
      "l2vlan.getVlan()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 72,
    "fileName": "src/main/java/org/zstack/kvm/KVMRealizeL2VlanNetworkBackend.java"
  },
  {
    "raw": "failed to check bridge[%s] for l2VlanNetwork[uuid:%s, name:%s] on kvm host[uuid:%s], %s",
    "en_US": "failed to check bridge[{0}] for l2VlanNetwork[uuid:{1}, name:{2}] on kvm host[uuid:{3}], {4}",
    "zh_CN": "检查在物理机[uuid:{3}]上L2网络[uuid:{1}, name:{2}]中的网桥[{0}]失败, {4}",
    "arguments": [
      "cmd.getBridgeName()",
      "l2vlan.getUuid()",
      "l2vlan.getName()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 124,
    "fileName": "src/main/java/org/zstack/kvm/KVMRealizeL2VlanNetworkBackend.java"
  },
  {
    "raw": "failed to apply rules of security group rules to kvm host[uuid:%s], because %s",
    "en_US": "failed to apply rules of security group rules to kvm host[uuid:{0}], because {1}",
    "zh_CN": "不能应用安全组规则在物理机t[uuid:{0}]上, 因为 {1}",
    "arguments": [
      "hto.getHostUuid()",
      "rsp.getError()"
    ],
    "line": 97,
    "fileName": "src/main/java/org/zstack/kvm/KVMSecurityGroupBackend.java"
  },
  {
    "raw": "unable to do vm sync on host[uuid:%s, ip:%s] because %s",
    "en_US": "unable to do vm sync on host[uuid:{0}, ip:{1}] because {2}",
    "zh_CN": "不能在物理机[uuid:{0}, ip:{1}]上执行云主机状态同步操作，因为{2}",
    "arguments": [
      "host.getUuid()",
      "host.getManagementIp()",
      "ret.getError()"
    ],
    "line": 90,
    "fileName": "src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java"
  },
  {
    "raw": "an anonymous VM[uuid:%s, state:%s] is detected on the host[uuid:%s]",
    "en_US": "an anonymous VM[uuid:{0}, state:{1}] is detected on the host[uuid:{2}]",
    "zh_CN": "物理机[uuid:{2}]上发现一个不受管控的云主机[uuid:{0}, state:{1}]。",
    "arguments": [
      "cmd.hostUuid",
      "state",
      "cmd.hostUuid"
    ],
    "line": 125,
    "fileName": "src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java"
  },
  {
    "raw": "failed to report state[%s] of the vm[uuid:%s] on the host[uuid:%s], %s",
    "en_US": "failed to report state[{0}] of the vm[uuid:{1}] on the host[uuid:{2}], {3}",
    "zh_CN": "报告物理机[uuid:{2}]上的云主机[uuid:{1}]的状态[{0}]失败，错误细节：{3}",
    "arguments": [
      "cmd.vmState",
      "cmd.vmUuid",
      "cmd.hostUuid",
      "reply.getError()"
    ],
    "line": 141,
    "fileName": "src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java"
  },
  {
    "raw": "failed to sync VM states on the host[uuid:%s, name:%s], %s",
    "en_US": "failed to sync VM states on the host[uuid:{0}, name:{1}], {2}",
    "zh_CN": "同步物理机[uuid:{0}, name:{1}]上的云主机状态失败，错误细节：{2}",
    "arguments": [
      "host.getUuid()",
      "host.getName()",
      "errorCode"
    ],
    "line": 213,
    "fileName": "src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java"
  },
  {
    "raw": "Wrong LdapServerType[%s], valid values: [%,%s]",
    "en_US": "Wrong LdapServerType[{0}], valid values: [%,{1}]",
    "zh_CN": "",
    "arguments": [
      "type",
      "LdapConstant.OpenLdap.TYPE",
      "LdapConstant.WindowsAD.TYPE"
    ],
    "line": 102,
    "fileName": "src/main/java/org/zstack/ldap/LdapApiInterceptor.java"
  },
  {
    "raw": "There is no ldap server in the system, Please add a ldap server first.",
    "en_US": "There is no ldap server in the system, Please add a ldap server first.",
    "zh_CN": "",
    "arguments": [],
    "line": 109,
    "fileName": "src/main/java/org/zstack/ldap/LdapApiInterceptor.java"
  },
  {
    "raw": "Cannot connect to LDAP server, %s",
    "en_US": "Cannot connect to LDAP server, {0}",
    "zh_CN": "",
    "arguments": [
      "e.toString()"
    ],
    "line": 124,
    "fileName": "src/main/java/org/zstack/ldap/LdapApiInterceptor.java"
  },
  {
    "raw": "query ldap entry fail, %s",
    "en_US": "query ldap entry fail, {0}",
    "zh_CN": "",
    "arguments": [
      "e.toString()"
    ],
    "line": 521,
    "fileName": "src/main/java/org/zstack/ldap/LdapManagerImpl.java"
  },
  {
    "raw": "Decode fail because %s",
    "en_US": "Decode fail because {0}",
    "zh_CN": "",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 169,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "Fail to update license",
    "en_US": "Fail to update license",
    "zh_CN": "",
    "arguments": [],
    "line": 598,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "Failed to update license",
    "en_US": "Failed to update license",
    "zh_CN": "",
    "arguments": [],
    "line": 606,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "License had been recovered because update license fail due to: %s",
    "en_US": "License had been recovered because update license fail due to: {0}",
    "zh_CN": "",
    "arguments": [
      "errorCode.getDetails()"
    ],
    "line": 581,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "unable to attach a L3 network. The cidr of l3[%s] to attach overlapped with l3[%s] already attached to vm",
    "en_US": "unable to attach a L3 network. The cidr of l3[{0}] to attach overlapped with l3[{1}] already attached to vm",
    "zh_CN": "",
    "arguments": [
      "l3NetworkUuid",
      "vmNicVO.getL3NetworkUuid()"
    ],
    "line": 109,
    "fileName": "src/main/java/org/zstack/mediator/ApiValidator.java"
  },
  {
    "raw": "the vm[name:%s, uuid:%s] already has some port forwarding rules%s attached",
    "en_US": "the vm[name:{0}, uuid:{1}] already has some port forwarding rules{2} attached",
    "zh_CN": "云主机[name:{0}, uuid:{1}] 已经设置了一些端口转发规则{2}",
    "arguments": [
      "vm.getName()",
      "vm.getUuid()",
      "StringUtils.join(pfStr, \",\")"
    ],
    "line": 94,
    "fileName": "src/main/java/org/zstack/mediator/ApiValidator.java"
  },
  {
    "raw": "the vm[name:%s, uuid:%s] already has some EIPs%s attached",
    "en_US": "the vm[name:{0}, uuid:{1}] already has some EIPs{2} attached",
    "zh_CN": "云主机[name:{0}, uuid:{1}] 已经配置了弹性IP{2}",
    "arguments": [
      "vm.getName()",
      "vm.getUuid()",
      "StringUtils.join(eipStr, \",\")"
    ],
    "line": 115,
    "fileName": "src/main/java/org/zstack/mediator/ApiValidator.java"
  },
  {
    "raw": "the vip[uuid:%s] already has bound to other service[%s]",
    "en_US": "the vip[uuid:{0}] already has bound to other service[{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getVipUuid()",
      "vipUseForList.toString()"
    ],
    "line": 183,
    "fileName": "src/main/java/org/zstack/mediator/ApiValidator.java"
  },
  {
    "raw": "Current port range[%s, %s] is conflicted with used port range [%s, %s] with vip[uuid: %s] protocol: %s ",
    "en_US": "Current port range[{0}, {1}] is conflicted with used port range [{2}, {3}] with vip[uuid: {4}] protocol: {5} ",
    "zh_CN": "",
    "arguments": [
      "Long.toString(range.getStart())",
      "Long.toString(range.getEnd())",
      "Long.toString(cur.getStart())",
      "Long.toString(cur.getEnd())",
      "vipUuid",
      "protocol"
    ],
    "line": 215,
    "fileName": "src/main/java/org/zstack/mediator/ApiValidator.java"
  },
  {
    "raw": "for shareable volume, the only supported primary storage type is ceph, current is %s",
    "en_US": "for shareable volume, the only supported primary storage type is ceph, current is {0}",
    "zh_CN": "共享数据盘只支持ceph类型的主存储，当前主存储类型为{0}",
    "arguments": [
      "psType"
    ],
    "line": 223,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid network bandwidth[%s], it is not a number",
    "en_US": "invalid network bandwidth[{0}], it is not a number",
    "zh_CN": "错误的网络带宽[{0}]，这不是数字",
    "arguments": [
      "bandwidth"
    ],
    "line": 438,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid volume bandwidth[%s] is larger than %d",
    "en_US": "invalid volume bandwidth[{0}] is larger than %d",
    "zh_CN": "",
    "arguments": [
      "bandwidth",
      "Long.MAX_VALUE"
    ],
    "line": 611,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid network bandwidth[%s], it must be greater than 8192",
    "en_US": "invalid network bandwidth[{0}], it must be greater than 8192",
    "zh_CN": "错误的网络带宽[{0}]，这个数字必须超过8192",
    "arguments": [
      "bandwidth"
    ],
    "line": 435,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid volume bandwidth[%s] is not a number",
    "en_US": "invalid volume bandwidth[{0}] is not a number",
    "zh_CN": "错误的磁盘带宽 ，[{0}] 这个不是数字",
    "arguments": [
      "bandwidth"
    ],
    "line": 456,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid volume bandwidth[%s], it must be greater than 1024 (include 1024)",
    "en_US": "invalid volume bandwidth[{0}], it must be greater than 1024 (include 1024)",
    "zh_CN": "",
    "arguments": [
      "bandwidth"
    ],
    "line": 606,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid volume IOPS[%s] is not a number",
    "en_US": "invalid volume IOPS[{0}] is not a number",
    "zh_CN": "错误的磁盘每秒读写速度[{0}]，它应该是个数字",
    "arguments": [
      "bandwidth"
    ],
    "line": 474,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid volume IOPS[%s] is larger than %d",
    "en_US": "invalid volume IOPS[{0}] is larger than %d",
    "zh_CN": "",
    "arguments": [
      "bandwidth",
      "Long.MAX_VALUE"
    ],
    "line": 631,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid volume IOPS[%s], it must be greater than 0",
    "en_US": "invalid volume IOPS[{0}], it must be greater than 0",
    "zh_CN": "错误的磁盘每秒读写速度[{0}]，它应该大于0",
    "arguments": [
      "bandwidth"
    ],
    "line": 471,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "the host[uuid:%s]\u0027s operating system %s %s is too old, the QEMU doesn\u0027t support QoS of network or disk IO. Please choose another instance offering with no QoS configuration",
    "en_US": "the host[uuid:{0}]\u0027s operating system {1} {2} is too old, the QEMU doesn\u0027t support QoS of network or disk IO. Please choose another instance offering with no QoS configuration",
    "zh_CN": "物理机[uuid:{0}] 的操作系统{1} {2} 过老,  QEMU 不支持磁盘的QOS IO设置 。 请选择别的没有Qos的计算规格",
    "arguments": [
      "hostUuid",
      "distro",
      "version"
    ],
    "line": 488,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid value[%s], it\u0027s not a double",
    "en_US": "invalid value[{0}], it\u0027s not a double",
    "zh_CN": "错误的值[{0}]，这个不是双精度值",
    "arguments": [
      "newValue"
    ],
    "line": 595,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid value[%s], it must be a double greater than 0",
    "en_US": "invalid value[{0}], it must be a double greater than 0",
    "zh_CN": "错误的值[{0}]，必须是一个大于0的双精度值",
    "arguments": [
      "newValue"
    ],
    "line": 571,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "the primary storage[%s] available capacity less than 0",
    "en_US": "the primary storage[{0}] available capacity less than 0",
    "zh_CN": "",
    "arguments": [
      "psUuid"
    ],
    "line": 690,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid value[%s], it must be a double between (0, 1]",
    "en_US": "invalid value[{0}], it must be a double between (0, 1]",
    "zh_CN": "错误的值[{0}]，这个必须在0~1之间的双精度值",
    "arguments": [
      "newValue"
    ],
    "line": 592,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid value[%s], ZStack doesn\u0027t have such host allocator type",
    "en_US": "invalid value[{0}], ZStack doesn\u0027t have such host allocator type",
    "zh_CN": "错误值[{0}]，Zstack没有这样的分配器类型",
    "arguments": [
      "newValue"
    ],
    "line": 604,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "Shareable Volume[uuid:%s] has already been attached to VM[uuid:%s]",
    "en_US": "Shareable Volume[uuid:{0}] has already been attached to VM[uuid:{1}]",
    "zh_CN": "共享云盘[uuid:{0}]已经挂载到云主机[uuid:{1}]上",
    "arguments": [
      "volume.getUuid()",
      "vm.getUuid()"
    ],
    "line": 1361,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "shareable disk only support virtio-scsi type for now",
    "en_US": "shareable disk only support virtio-scsi type for now",
    "zh_CN": "目前共享盘只支持virtio-scsi",
    "arguments": [],
    "line": 1379,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "Host [uuid: %s] has no cluster",
    "en_US": "Host [uuid: {0}] has no cluster",
    "zh_CN": "",
    "arguments": [
      "hostUuid"
    ],
    "line": 2177,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "Cluster [uuid: %s] configured display network %s, but host [uuid: %s] has no matching IP",
    "en_US": "Cluster [uuid: {0}] configured display network {1}, but host [uuid: {2}] has no matching IP",
    "zh_CN": "",
    "arguments": [
      "clusterUuid",
      "displayNetworkCidr",
      "hostUuid"
    ],
    "line": 2207,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "failed to detach shareable volume[uuid:%s] from VmInstance[uuid:%s]",
    "en_US": "failed to detach shareable volume[uuid:{0}] from VmInstance[uuid:{1}]",
    "zh_CN": "不能卸载云主机[uuid:{1}]上的共享盘[uuid:{0}]",
    "arguments": [
      "msg.getVolume().getUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 245,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "failed to detach shareable volume from VmInstance:[\\n%s]",
    "en_US": "failed to detach shareable volume from VmInstance:[\\n{0}]",
    "zh_CN": "不能卸载云主机[uuid:{0}]上的共享盘",
    "arguments": [
      "StringUtils.join(errors, \"\\n\\n\")"
    ],
    "line": 257,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "only enterprise account can update global config [name:%s]",
    "en_US": "only enterprise account can update global config [name:{0}]",
    "zh_CN": "",
    "arguments": [
      "getName()"
    ],
    "line": 32,
    "fileName": "src/main/java/org/zstack/mevoco/PremiumGlobalConfig.java"
  },
  {
    "raw": "%s, Cannot send mail because the current email monitor trigger action[uuid:%s,name:%s] does not have a email media server",
    "en_US": "{0}, Cannot send mail because the current email monitor trigger action[uuid:{1},name:{2}] does not have a email media server",
    "zh_CN": "",
    "arguments": [
      "subject",
      "vo.getUuid()",
      "vo.getName()"
    ],
    "line": 45,
    "fileName": "src/main/java/org/zstack/monitoring/EmailTriggerEvent.java"
  },
  {
    "raw": "cannot find monitor trigger[uuid:%s], it may have been deleted",
    "en_US": "cannot find monitor trigger[uuid:{0}], it may have been deleted",
    "zh_CN": "",
    "arguments": [
      "msg.getMonitorTriggerUuid()"
    ],
    "line": 174,
    "fileName": "src/main/java/org/zstack/monitoring/MonitorManagerImpl.java"
  },
  {
    "raw": "cannot find monitor trigger action[uuid:%s], it may have been deleted",
    "en_US": "cannot find monitor trigger action[uuid:{0}], it may have been deleted",
    "zh_CN": "",
    "arguments": [
      "msg.getMonitorTriggerActionUuid()"
    ],
    "line": 183,
    "fileName": "src/main/java/org/zstack/monitoring/MonitorManagerImpl.java"
  },
  {
    "raw": "the resource[type:%s] doesn\u0027t have any monitoring items",
    "en_US": "the resource[type:{0}] doesn\u0027t have any monitoring items",
    "zh_CN": "",
    "arguments": [
      "msg.getResourceType()"
    ],
    "line": 225,
    "fileName": "src/main/java/org/zstack/monitoring/MonitorManagerImpl.java"
  },
  {
    "raw": "the resource[uuid:%s] doesn\u0027t belong to the account[uuid:%s]",
    "en_US": "the resource[uuid:{0}] doesn\u0027t belong to the account[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getTargetResourceUuid()",
      "msg.getSession().getAccountUuid()"
    ],
    "line": 292,
    "fileName": "src/main/java/org/zstack/monitoring/MonitorManagerImpl.java"
  },
  {
    "raw": "cannot find type for the resource[uuid:%s]",
    "en_US": "cannot find type for the resource[uuid:{0}]",
    "zh_CN": "",
    "arguments": [
      "resourceUuid"
    ],
    "line": 335,
    "fileName": "src/main/java/org/zstack/monitoring/MonitorManagerImpl.java"
  },
  {
    "raw": "no monitoring item found for the resourceType[%s] and item[%s]",
    "en_US": "no monitoring item found for the resourceType[{0}] and item[{1}]",
    "zh_CN": "",
    "arguments": [
      "resourceType",
      "triggerExpression.getItem()"
    ],
    "line": 340,
    "fileName": "src/main/java/org/zstack/monitoring/MonitorManagerImpl.java"
  },
  {
    "raw": "failed to delete monitoring stuff for the host[name:%s, uuid:%s], %s",
    "en_US": "failed to delete monitoring stuff for the host[name:{0}, uuid:{1}], {2}",
    "zh_CN": "",
    "arguments": [
      "host.getName()",
      "host.getUuid()",
      "errorCode"
    ],
    "line": 445,
    "fileName": "src/main/java/org/zstack/monitoring/MonitorManagerImpl.java"
  },
  {
    "raw": "failed to delete monitoring stuff for the vm[name:%s, uuid:%s], %s",
    "en_US": "failed to delete monitoring stuff for the vm[name:{0}, uuid:{1}], {2}",
    "zh_CN": "",
    "arguments": [
      "vm.getName()",
      "vm.getUuid()",
      "errorCode"
    ],
    "line": 508,
    "fileName": "src/main/java/org/zstack/monitoring/MonitorManagerImpl.java"
  },
  {
    "raw": "unable to fire an action[uuid:%s, trigger uuid:%s] because of %s",
    "en_US": "unable to fire an action[uuid:{0}, trigger uuid:{1}] because of {2}",
    "zh_CN": "",
    "arguments": [
      "event.getAction().getUuid()",
      "event.getTrigger().getUuid()",
      "errorCode.getDetails()"
    ],
    "line": 211,
    "fileName": "src/main/java/org/zstack/monitoring/MonitorTriggerBase.java"
  },
  {
    "raw": "failed to update the monitor trigger[uuid:%s] because of %s. The trigger will be set in the error status, you can try updating again to recover it",
    "en_US": "failed to update the monitor trigger[uuid:{0}] because of {1}. The trigger will be set in the error status, you can try updating again to recover it",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()",
      "errCode"
    ],
    "line": 362,
    "fileName": "src/main/java/org/zstack/monitoring/MonitorTriggerBase.java"
  },
  {
    "raw": "failed to delete the trigger because of the error: %s",
    "en_US": "failed to delete the trigger because of the error: {0}",
    "zh_CN": "",
    "arguments": [
      "reply.getError()"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/monitoring/MonitorTriggerCascadeExtension.java"
  },
  {
    "raw": "Create email monitor action[uuid:%s,name:%s] success, The system will automatically send a confirmation mail. Please check the recipient mailbox. If you do not receive mail, check the mailbox server configuration, the recipient mailbox",
    "en_US": "Create email monitor action[uuid:{0},name:{1}] success, The system will automatically send a confirmation mail. Please check the recipient mailbox. If you do not receive mail, check the mailbox server configuration, the recipient mailbox",
    "zh_CN": "",
    "arguments": [
      "vo.getUuid()",
      "vo.getName()"
    ],
    "line": 47,
    "fileName": "src/main/java/org/zstack/monitoring/actions/EmailMonitorTriggerActionFactory.java"
  },
  {
    "raw": "A resource[name:{resourceName}, uuid:{resourceUuid}, type:{resourceType}]\u0027s monitoring trigger[uuid:{triggerUuid}] changes status to {triggerStatus}",
    "en_US": "A resource[name:{resourceName}, uuid:{resourceUuid}, type:{resourceType}]\u0027s monitoring trigger[uuid:{triggerUuid}] changes status to {triggerStatus}",
    "zh_CN": "",
    "arguments": [
      "args"
    ],
    "line": 50,
    "fileName": "src/main/java/org/zstack/monitoring/items/AlertText.java"
  },
  {
    "raw": "\\n\u003d\u003d\u003d BELOW ARE DETAILS OF THE PREVIOUS ALERT \u003d\u003d\u003d",
    "en_US": "\\n\u003d\u003d\u003d BELOW ARE DETAILS OF THE PREVIOUS ALERT \u003d\u003d\u003d",
    "zh_CN": "",
    "arguments": [],
    "line": 55,
    "fileName": "src/main/java/org/zstack/monitoring/items/AlertText.java"
  },
  {
    "raw": "\\nalert details:",
    "en_US": "\\nalert details:",
    "zh_CN": "",
    "arguments": [],
    "line": 58,
    "fileName": "src/main/java/org/zstack/monitoring/items/AlertText.java"
  },
  {
    "raw": "\\ncondition: {itemName} {operator} {threshold}",
    "en_US": "\\ncondition: {itemName} {operator} {threshold}",
    "zh_CN": "",
    "arguments": [
      "args"
    ],
    "line": 59,
    "fileName": "src/main/java/org/zstack/monitoring/items/AlertText.java"
  },
  {
    "raw": "\\ncurrent value: {value}",
    "en_US": "\\ncurrent value: {value}",
    "zh_CN": "",
    "arguments": [
      "args"
    ],
    "line": 60,
    "fileName": "src/main/java/org/zstack/monitoring/items/AlertText.java"
  },
  {
    "raw": "Host CPU utilization",
    "en_US": "Host CPU utilization",
    "zh_CN": "",
    "arguments": [],
    "line": 31,
    "fileName": "src/main/java/org/zstack/monitoring/items/host/HostCpuUtilItem.java"
  },
  {
    "raw": "VM CPU utilization",
    "en_US": "VM CPU utilization",
    "zh_CN": "",
    "arguments": [],
    "line": 29,
    "fileName": "src/main/java/org/zstack/monitoring/items/vm/VmCpuUtilItem.java"
  },
  {
    "raw": "invalid expression: %s, %s",
    "en_US": "invalid expression: {0}, {1}",
    "zh_CN": "",
    "arguments": [
      "expr",
      "e.getMessage()"
    ],
    "line": 106,
    "fileName": "src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java"
  },
  {
    "raw": "invalid expression: %s, no expression found",
    "en_US": "invalid expression: {0}, no expression found",
    "zh_CN": "",
    "arguments": [
      "expr"
    ],
    "line": 110,
    "fileName": "src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java"
  },
  {
    "raw": "missing parameter \u0027%s\u0027 in the expression",
    "en_US": "missing parameter \u0027{0}\u0027 in the expression",
    "zh_CN": "",
    "arguments": [
      "key"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java"
  },
  {
    "raw": "wrong type of parameter \u0027%s\u0027 in the expression, it must be type of %s, but got %s",
    "en_US": "wrong type of parameter \u0027{0}\u0027 in the expression, it must be type of {1}, but got {2}",
    "zh_CN": "",
    "arguments": [
      "key",
      "clz",
      "value.getClass()"
    ],
    "line": 131,
    "fileName": "src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java"
  },
  {
    "raw": "l2Network[uuid:%s] has attached to cluster[uuid:%s], can\u0027t attach again",
    "en_US": "l2Network[uuid:{0}] has attached to cluster[uuid:{1}], can\u0027t attach again",
    "zh_CN": "不能再次挂载l2网络[uuid:{0}]，因为已经挂载到集群[uuid:{1}]上了",
    "arguments": [
      "msg.getL2NetworkUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 66,
    "fileName": "src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java"
  },
  {
    "raw": "l2Network[uuid:%s] has not attached to cluster[uuid:%s]",
    "en_US": "l2Network[uuid:{0}] has not attached to cluster[uuid:{1}]",
    "zh_CN": "L2网络[uuid:{0}]没有挂载到集群上[uuid:{1}]",
    "arguments": [
      "msg.getL2NetworkUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java"
  },
  {
    "raw": "unsupported l2Network type[%s]",
    "en_US": "unsupported l2Network type[{0}]",
    "zh_CN": "不支持的网络类型[{0}]",
    "arguments": [
      "msg.getType()"
    ],
    "line": 141,
    "fileName": "src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java"
  },
  {
    "raw": "There has been a L2VlanNetwork[uuid:%s, name:%s] attached to cluster[uuid:%s] that has physical interface[%s], vlan[%s]. Failed to attach L2VlanNetwork[uuid:%s]",
    "en_US": "There has been a L2VlanNetwork[uuid:{0}, name:{1}] attached to cluster[uuid:{2}] that has physical interface[{3}], vlan[{4}]. Failed to attach L2VlanNetwork[uuid:{5}]",
    "zh_CN": "L2网络挂载失败[uuid:{5}]：L2网络[uuid:{0}, name:{1}]的物理接口[{3}], vlan[{4}]已经挂载到集群[uuid:{2}]上",
    "arguments": [
      "vl2.getUuid()",
      "vl2.getName()",
      "msg.getClusterUuid()",
      "vl2.getPhysicalInterface()",
      "vl2.getVlan()",
      "tl2.getUuid()"
    ],
    "line": 113,
    "fileName": "src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java"
  },
  {
    "raw": "There has been a l2Network[uuid:%s, name:%s] attached to cluster[uuid:%s] that has physical interface[%s]. Failed to attach l2Network[uuid:%s]",
    "en_US": "There has been a l2Network[uuid:{0}, name:{1}] attached to cluster[uuid:{2}] that has physical interface[{3}]. Failed to attach l2Network[uuid:{4}]",
    "zh_CN": "L2网络挂载失败[uuid:{4}]：L2网络[uuid:{0}, name:{1}]的物理接口[{3}]]已经挂载到集群[uuid:{2}]上",
    "arguments": [
      "l2.getUuid()",
      "l2.getName()",
      "msg.getClusterUuid()",
      "l2.getPhysicalInterface()",
      "tl2.getUuid()"
    ],
    "line": 90,
    "fileName": "src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java"
  },
  {
    "raw": "cannot configure vxlan network for vm[uuid:%s] on the destination host[uuid:%s]",
    "en_US": "cannot configure vxlan network for vm[uuid:{0}] on the destination host[uuid:{1}]",
    "zh_CN": "无法为云主机[uuid:{0}]在目标物理机[uuid:{1}]上配置VXLAN网络。",
    "arguments": [
      "inv.getUuid()",
      "destHostUuid"
    ],
    "line": 188,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetwork/VxlanNetworkFactory.java"
  },
  {
    "raw": "find multiple vtep ips[%s] for one host[uuid:%s], need to delete host and add again",
    "en_US": "find multiple vtep ips[{0}] for one host[uuid:{1}], need to delete host and add again",
    "zh_CN": "",
    "arguments": [
      "vtepIps",
      "hostUuid"
    ],
    "line": 75,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java"
  },
  {
    "raw": "failed to create bridge[%s] for l2Network[uuid:%s, type:%s, vni:%s] on kvm host[uuid:%s], because %s",
    "en_US": "failed to create bridge[{0}] for l2Network[uuid:{1}, type:{2}, vni:{3}] on kvm host[uuid:{4}], because {5}",
    "zh_CN": "为L2网络[uuid:{1}, type:{2}, vni:{3}]在KVM物理机[uuid:{4}]上创建网桥[{0}]失败，错误细节：{5}。",
    "arguments": [
      "cmd.getBridgeName()",
      "l2Network.getUuid()",
      "l2Network.getType()",
      "l2vxlan.getVni()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java"
  },
  {
    "raw": "failed to check cidr[%s] for l2VxlanNetwork[uuid:%s, name:%s] on kvm host[uuid:%s], %s",
    "en_US": "failed to check cidr[{0}] for l2VxlanNetwork[uuid:{1}, name:{2}] on kvm host[uuid:{3}], {4}",
    "zh_CN": "为KVM物理机[uuid:{3}]上的L2 VXLAN 网络[uuid:{1}, name:{2}]检查CIDR[{0}]失败，错误细节：{4}。",
    "arguments": [
      "cmd.getCidr()",
      "vxlanPool.getUuid()",
      "vxlanPool.getName()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 94,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkPoolBackend.java"
  },
  {
    "raw": "you must update system and category both",
    "en_US": "you must update system and category both",
    "zh_CN": "",
    "arguments": [],
    "line": 100,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "not valid combination of system and category,only %s are valid",
    "en_US": "not valid combination of system and category,only {0} are valid",
    "zh_CN": "",
    "arguments": [
      "L3NetworkCategory.validCombination"
    ],
    "line": 240,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "invalid IP[%s]",
    "en_US": "invalid IP[{0}]",
    "zh_CN": "错误的IP值[{0}]",
    "arguments": [
      "msg.getIp()"
    ],
    "line": 85,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "no ip range in l3[%s]",
    "en_US": "no ip range in l3[{0}]",
    "zh_CN": "",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "ip[%s] is not in the cidr of ip range[uuid:%s, cidr:%s] which l3 network[%s] attached",
    "en_US": "ip[{0}] is not in the cidr of ip range[uuid:{1}, cidr:{2}] which l3 network[{3}] attached",
    "zh_CN": "",
    "arguments": [
      "msg.getRouterInterfaceIp()",
      "ipRangeVO.getUuid()",
      "ipRangeVO.getNetworkCidr()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 96,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "ip[%s] in ip range[uuid:%s, startIp:%s, endIp:%s] which l3 network[%s] attached, this is not allowed",
    "en_US": "ip[{0}] in ip range[uuid:{1}, startIp:{2}, endIp:{3}] which l3 network[{4}] attached, this is not allowed",
    "zh_CN": "",
    "arguments": [
      "msg.getRouterInterfaceIp()",
      "ipRangeVO.getUuid()",
      "ipRangeVO.getStartIp()",
      "ipRangeVO.getEndIp()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 100,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "ipRangeUuid and l3NetworkUuid cannot both be null; you must set either one.",
    "en_US": "ipRangeUuid and l3NetworkUuid cannot both be null; you must set either one.",
    "zh_CN": "IP段和L3的uuid不能都为空，您必须选择一个填上",
    "arguments": [],
    "line": 91,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "%s is not a valid network cidr",
    "en_US": "{0} is not a valid network cidr",
    "zh_CN": "{0}不是有效的无类别域间路由",
    "arguments": [
      "msg.getNetworkCidr()"
    ],
    "line": 118,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "%s is not an allowed network cidr, because it doesn\u0027t have usable ip range",
    "en_US": "{0} is not an allowed network cidr, because it doesn\u0027t have usable ip range",
    "zh_CN": "{0}是不允许的无类别域间路由，因为它不支持可用的IP段",
    "arguments": [
      "msg.getNetworkCidr()"
    ],
    "line": 115,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "ipRangeUuids, L3NetworkUuids, zoneUuids must have at least one be none-empty list, or all is set to true",
    "en_US": "ipRangeUuids, L3NetworkUuids, zoneUuids must have at least one be none-empty list, or all is set to true",
    "zh_CN": "ipRangeUuids, L3NetworkUuids, zoneUuids 至少一个不是为空列表，或者全部不为空",
    "arguments": [],
    "line": 138,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "unsupported l3network type[%s]",
    "en_US": "unsupported l3network type[{0}]",
    "zh_CN": "不支持的L3网络类型[{0}]",
    "arguments": [
      "msg.getType()"
    ],
    "line": 159,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "%s is not a valid domain name",
    "en_US": "{0} is not a valid domain name",
    "zh_CN": "{0}不是有效的域名",
    "arguments": [
      "msg.getDnsDomain()"
    ],
    "line": 165,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "the IP range[%s ~ %s] contains D class addresses which are for multicast",
    "en_US": "the IP range[{0} ~ {1}] contains D class addresses which are for multicast",
    "zh_CN": "这个IP段[{0} ~ {1}]包含了D类的多播地址",
    "arguments": [
      "ipr.getStartIp()",
      "ipr.getEndIp()"
    ],
    "line": 191,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "the IP range[%s ~ %s] contains E class addresses which are reserved",
    "en_US": "the IP range[{0} ~ {1}] contains E class addresses which are reserved",
    "zh_CN": "这个IP段[{0} ~ {1}]包含了E类的保留地址",
    "arguments": [
      "ipr.getStartIp()",
      "ipr.getEndIp()"
    ],
    "line": 195,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "the IP range[%s ~ %s] contains link local addresses which are reserved",
    "en_US": "the IP range[{0} ~ {1}] contains link local addresses which are reserved",
    "zh_CN": "这个IP段[{0} ~ {1}]包含了本地的保留地址",
    "arguments": [
      "ipr.getStartIp()",
      "ipr.getEndIp()"
    ],
    "line": 199,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "the gateway[%s] is not in the subnet %s/%s",
    "en_US": "the gateway[{0}] is not in the subnet {1}/{2}",
    "zh_CN": "网关[{0}]不在子网{1}/{2}",
    "arguments": [
      "ipr.getGateway()",
      "ipr.getStartIp()",
      "ipr.getNetmask()"
    ],
    "line": 205,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "start ip[%s] is not a IPv4 address",
    "en_US": "start ip[{0}] is not a IPv4 address",
    "zh_CN": "开始的ip[{0}] 不是IPV4的地址",
    "arguments": [
      "ipr.getStartIp()"
    ],
    "line": 209,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "end ip[%s] is not a IPv4 address",
    "en_US": "end ip[{0}] is not a IPv4 address",
    "zh_CN": "结束的ip[{0}] 不是IPV4的地址",
    "arguments": [
      "ipr.getEndIp()"
    ],
    "line": 213,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "gateway[%s] is not a IPv4 address",
    "en_US": "gateway[{0}] is not a IPv4 address",
    "zh_CN": "网关[{0}]不是IPV4的地址",
    "arguments": [
      "ipr.getGateway()"
    ],
    "line": 217,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "netmask[%s] is not a netmask, and the IP range netmask cannot be 0.0.0.0",
    "en_US": "netmask[{0}] is not a netmask, and the IP range netmask cannot be 0.0.0.0",
    "zh_CN": "子网掩码[{0}]不是子网掩码，并且IP段的子网掩码不能是0.0.0.0",
    "arguments": [
      "ipr.getNetmask()"
    ],
    "line": 221,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "ip allocation can not contain network address or broadcast address",
    "en_US": "ip allocation can not contain network address or broadcast address",
    "zh_CN": "ip 地址分配不能包含网络地址或广播的地址",
    "arguments": [],
    "line": 225,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "start ip[%s] is behind end ip[%s]",
    "en_US": "start ip[{0}] is behind end ip[{1}]",
    "zh_CN": "起始ip[{0}]在尾ip[{1}]后",
    "arguments": [
      "ipr.getStartIp()",
      "ipr.getEndIp()"
    ],
    "line": 233,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "gateway[%s] can not be part of range[%s, %s]",
    "en_US": "gateway[{0}] can not be part of range[{1}, {2}]",
    "zh_CN": "网关[{0}]不能是IP段[{1}, {2}]的一部分",
    "arguments": [
      "ipr.getGateway()",
      "ipr.getStartIp()",
      "ipr.getEndIp()"
    ],
    "line": 238,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "overlap with ip range[uuid:%s, start ip:%s, end ip: %s]",
    "en_US": "overlap with ip range[uuid:{0}, start ip:{1}, end ip: {2}]",
    "zh_CN": "重叠的IP段[uuid:{0}, 起始ip:{1}, 尾ip: {2}]",
    "arguments": [
      "r.getUuid()",
      "r.getStartIp()",
      "r.getEndIp()"
    ],
    "line": 247,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "multiple CIDR on the same L3 network is not allowed. There has been a IP range[uuid:%s, CIDR:%s], the new IP range[CIDR:%s] is not in the CIDR with the existing one",
    "en_US": "multiple CIDR on the same L3 network is not allowed. There has been a IP range[uuid:{0}, CIDR:{1}], the new IP range[CIDR:{2}] is not in the CIDR with the existing one",
    "zh_CN": "多个无类别域间路由在想通的L3网络上是不允许的，这发生在原有IP范围 [uuid: {0}，CIDR: {1}]。新的IP范围 [CIDR: {2}] 不在现有的一个CIDR",
    "arguments": [
      "ipr.getUuid()",
      "rcidr",
      "cidr"
    ],
    "line": 252,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "DNS[%s] is not a IPv4 address",
    "en_US": "DNS[{0}] is not a IPv4 address",
    "zh_CN": "DNS[{0}]不是一个IPv4地址",
    "arguments": [
      "msg.getDns()"
    ],
    "line": 266,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "there has been a DNS[%s] on L3 network[uuid:%s]",
    "en_US": "there has been a DNS[{0}] on L3 network[uuid:{1}]",
    "zh_CN": "在L3网络[uuid:{1}]上已经存在一个DNS[{0}]",
    "arguments": [
      "msg.getDns()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 308,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "security group[uuid:%s] has not attached to l3Network[uuid:%s], can\u0027t detach",
    "en_US": "security group[uuid:{0}] has not attached to l3Network[uuid:{1}], can\u0027t detach",
    "zh_CN": "不能卸载安全组[uuid:{0}]到L3[uuid:{1}]网络上，因为还未挂载",
    "arguments": [
      "msg.getSecurityGroupUuid()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 66,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "security group[uuid:%s] has attached to l3Network[uuid:%s], can\u0027t attach again",
    "en_US": "security group[uuid:{0}] has attached to l3Network[uuid:{1}], can\u0027t attach again",
    "zh_CN": "不能再次挂载安全组[uuid:{0}]到L3[uuid:{1}]网络上，因为已经挂载了",
    "arguments": [
      "msg.getSecurityGroupUuid()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 114,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "the L3 network[uuid:%s] doesn\u0027t have the network service type[%s] enabled",
    "en_US": "the L3 network[uuid:{0}] doesn\u0027t have the network service type[{1}] enabled",
    "zh_CN": "L3网络[uuid:{0}]没有开启[{1}]类型的网络服务",
    "arguments": [
      "msg.getL3NetworkUuid()",
      "SecurityGroupConstant.SECURITY_GROUP_NETWORK_SERVICE_TYPE"
    ],
    "line": 122,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "VM nics[uuids:%s] are not on L3 networks that have been attached to the security group[uuid:%s]",
    "en_US": "VM nics[uuids:{0}] are not on L3 networks that have been attached to the security group[uuid:{1}]",
    "zh_CN": "云主机网卡[uuids:{0}]不在安全组[uuid:{1}]挂载的L3网络上",
    "arguments": [
      "wrongUuids",
      "securityGroupUuid"
    ],
    "line": 160,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "rule type can not be null. rule dump: %s",
    "en_US": "rule type can not be null. rule dump: {0}",
    "zh_CN": "规则类型(rule type)不能为空(null)。规则内容为：{0}。",
    "arguments": [
      "JSONObjectUtil.toJsonString(ao)"
    ],
    "line": 201,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "unknown rule type[%s], rule can only be Ingress/Egress. rule dump: %s",
    "en_US": "unknown rule type[{0}], rule can only be Ingress/Egress. rule dump: {1}",
    "zh_CN": "未知的规则类型(rule type)[{0}]，规则类型只能为Ingress/Egress。规则内容为：{1}。",
    "arguments": [
      "ao.getType()",
      "JSONObjectUtil.toJsonString(ao)"
    ],
    "line": 206,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "protocol can not be null. rule dump: %s",
    "en_US": "protocol can not be null. rule dump: {0}",
    "zh_CN": "协议(protocol)不能为空(null)。规则内容为：{0}。",
    "arguments": [
      "JSONObjectUtil.toJsonString(ao)"
    ],
    "line": 212,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "invalid protocol[%s]. Valid protocols are [TCP, UDP, ICMP, ALL]. rule dump: %s",
    "en_US": "invalid protocol[{0}]. Valid protocols are [TCP, UDP, ICMP, ALL]. rule dump: {1}",
    "zh_CN": "无效的协议(protocol)[{0}]。有效的协议类型为[TCP,UDP,ICMP,ALL]。规则内容为：{1}。",
    "arguments": [
      "ao.getProtocol()",
      "JSONObjectUtil.toJsonString(ao)"
    ],
    "line": 222,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "can not set port for protocol [type:ALL]. rule dump: %s",
    "en_US": "can not set port for protocol [type:ALL]. rule dump: {0}",
    "zh_CN": "不能为协议类型为 ALL 的规则指定端口号，规则为:{0}",
    "arguments": [
      "JSONObjectUtil.toJsonString(ao)"
    ],
    "line": 229,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "startPort can not be null. rule dump: %s",
    "en_US": "startPort can not be null. rule dump: {0}",
    "zh_CN": "起始端口(startPort)不能为空(null)。规则内容为：{0}。",
    "arguments": [
      "JSONObjectUtil.toJsonString(ao)"
    ],
    "line": 223,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "invalid startPort[%s]. Valid range is [0, 65535]. rule dump: %s",
    "en_US": "invalid startPort[{0}]. Valid range is [0, 65535]. rule dump: {1}",
    "zh_CN": "无效的起始端口(startPort)[{0}]。有效的范围为[0,65535]。规则内容为：{1}。",
    "arguments": [
      "ao.getStartPort()",
      "JSONObjectUtil.toJsonString(ao)"
    ],
    "line": 233,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "invalid ICMP type[%s]. Valid type is [-1, 255]. rule dump: %s",
    "en_US": "invalid ICMP type[{0}]. Valid type is [-1, 255]. rule dump: {1}",
    "zh_CN": "无效的ICMP类型[{0}]。有效的类型为[-1,255]。规则内容为：{1}。",
    "arguments": [
      "ao.getStartPort()",
      "JSONObjectUtil.toJsonString(ao)"
    ],
    "line": 228,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "invalid endPort[%s]. Valid range is [0, 65535]. rule dump: %s",
    "en_US": "invalid endPort[{0}]. Valid range is [0, 65535]. rule dump: {1}",
    "zh_CN": "无效的结束端口(endPort)[{0}]。有效的范围为[0,65535]。规则内容为：{1}。",
    "arguments": [
      "ao.getEndPort()",
      "JSONObjectUtil.toJsonString(ao)"
    ],
    "line": 250,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "invalid ICMP code[%s]. Valid range is [-1, 3]. rule dump: %s",
    "en_US": "invalid ICMP code[{0}]. Valid range is [-1, 3]. rule dump: {1}",
    "zh_CN": "无效的ICMP编码[{0}]。有效的范围为[-1,3]。规则内容为：{1}。",
    "arguments": [
      "ao.getEndPort()",
      "JSONObjectUtil.toJsonString(ao)"
    ],
    "line": 245,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "invalid CIDR[%s]. rule dump: %s",
    "en_US": "invalid CIDR[{0}]. rule dump: {1}",
    "zh_CN": "无效的CIDR[{0}]。规则内容为：{1}。",
    "arguments": [
      "ao.getAllowedCidr()",
      "JSONObjectUtil.toJsonString(ao)"
    ],
    "line": 257,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "rule should not be duplicated. rule dump: %s",
    "en_US": "rule should not be duplicated. rule dump: {0}",
    "zh_CN": "规则不应该重复。规则内容为：{0}。",
    "arguments": [
      "JSONObjectUtil.toJsonString(msg.getRules().get(j))"
    ],
    "line": 265,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "rule exist. rule dump: %s, remoteSecurityGroupUuid:[%s]",
    "en_US": "rule exist. rule dump: {0}, remoteSecurityGroupUuid:[{1}]",
    "zh_CN": "规则已存在，规则内容为:{0}，源安全组[uuid:{1}]",
    "arguments": [
      "JSONObjectUtil.toJsonString(sao)",
      "svo.getRemoteSecurityGroupUuid()"
    ],
    "line": 303,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "unable to change the VM[uuid:%s]\u0027s default L3 network in the DHCP backend, %s. You may need to reboot the VM to use the new default L3 network setting",
    "en_US": "unable to change the VM[uuid:{0}]\u0027s default L3 network in the DHCP backend, {1}. You may need to reboot the VM to use the new default L3 network setting",
    "zh_CN": "无法在DHCP层面改变云主机[uuid:{0}]的默认L3网络，错误细节：{1}。您可能需要重启该云主机以解决问题。",
    "arguments": [
      "vm.getUuid()",
      "errorCode"
    ],
    "line": 227,
    "fileName": "src/main/java/org/zstack/network/service/DhcpExtension.java"
  },
  {
    "raw": "networkServices cannot be empty",
    "en_US": "networkServices cannot be empty",
    "zh_CN": "网络服务(networkServices)不能为空。",
    "arguments": [],
    "line": 41,
    "fileName": "src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java"
  },
  {
    "raw": "network service for provider[uuid:%s] must be specified",
    "en_US": "network service for provider[uuid:{0}] must be specified",
    "zh_CN": "服务提供器[uuid:{0}]的网络服务必须被指定。",
    "arguments": [
      "puuid"
    ],
    "line": 62,
    "fileName": "src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java"
  },
  {
    "raw": "cannot find network service provider[uuid:%s] or it provides no services",
    "en_US": "cannot find network service provider[uuid:{0}] or it provides no services",
    "zh_CN": "无法找到网络服务提供器[uuid:{0}]或它没有提供任何服务。",
    "arguments": [
      "puuid"
    ],
    "line": 67,
    "fileName": "src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java"
  },
  {
    "raw": "network service provider[uuid:%s] doesn\u0027t provide services%s",
    "en_US": "network service provider[uuid:{0}] doesn\u0027t provide services{1}",
    "zh_CN": "网络服务提供器[uuid:{0}]无法提供服务{1}。",
    "arguments": [
      "puuid",
      "notSupported"
    ],
    "line": 81,
    "fileName": "src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java"
  },
  {
    "raw": "there has been a network service[%s] attached to L3 network[uuid:%s]",
    "en_US": "there has been a network service[{0}] attached to L3 network[uuid:{1}]",
    "zh_CN": "已经有一个网络服务[{0}]被挂载到L3网络[uuid:{1}]。",
    "arguments": [
      "type",
      "msg.getL3NetworkUuid()"
    ],
    "line": 100,
    "fileName": "src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java"
  },
  {
    "raw": "L3Network[uuid:%s] doesn\u0027t have network service[type:%s] enabled or no provider provides this network service",
    "en_US": "L3Network[uuid:{0}] doesn\u0027t have network service[type:{1}] enabled or no provider provides this network service",
    "zh_CN": "L3网络[uuid:{0}]上没有网络服务[type:{1}]被启用或没有服务提供器提供该网络服务。",
    "arguments": [
      "l3NetworkUuid",
      "serviceType"
    ],
    "line": 369,
    "fileName": "src/main/java/org/zstack/network/service/NetworkServiceManagerImpl.java"
  },
  {
    "raw": "unable to release a network service of the VM[uuid:%s] when rolling back an attached L3 network[uuid: %s], %s. You may need to reboot the VM to fix the issue",
    "en_US": "unable to release a network service of the VM[uuid:{0}] when rolling back an attached L3 network[uuid: {1}], {2}. You may need to reboot the VM to fix the issue",
    "zh_CN": "未能释放云主机[uuid:{0}]的一个网络服务，发生错误的操作为回滚一个已经挂载的L3网络[uuid: {1}]，错误细节：{2}。您可能需要重启该云主机以解决问题。",
    "arguments": [
      "spec.getVmInventory().getUuid()",
      "l3.getUuid()",
      "errorCode"
    ],
    "line": 499,
    "fileName": "src/main/java/org/zstack/network/service/NetworkServiceManagerImpl.java"
  },
  {
    "raw": "either eipUuid or vipUuid must be set",
    "en_US": "either eipUuid or vipUuid must be set",
    "zh_CN": "eipUuid或vipUuid必须有一个被指定。",
    "arguments": [],
    "line": 66,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "eip[uuid:%s] is not in state of Enabled, cannot get attachable vm nic",
    "en_US": "eip[uuid:{0}] is not in state of Enabled, cannot get attachable vm nic",
    "zh_CN": "eip[uuid:{0}]没有被启用，无法获取可挂载的虚拟机网卡。",
    "arguments": [
      "msg.getEipUuid()"
    ],
    "line": 78,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "eip[uuid:%s] has attached to another vm nic[uuid:%s], can\u0027t attach again",
    "en_US": "eip[uuid:{0}] has attached to another vm nic[uuid:{1}], can\u0027t attach again",
    "zh_CN": "eip[uuid:{0}]已经被挂载到另外一台虚拟机网卡[uuid:{1}]，无法再次挂载。",
    "arguments": [
      "msg.getEipUuid()",
      "vmNicUuid"
    ],
    "line": 94,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "eip[uuid: %s] can only be attached when state is %s, current state is %s",
    "en_US": "eip[uuid: {0}] can only be attached when state is {1}, current state is {2}",
    "zh_CN": "eip[uuid:{0}]只有在状态(state)为{1}的情况下可以被挂载，当前状态是{2}。",
    "arguments": [
      "msg.getEipUuid()",
      "EipState.Enabled",
      "state"
    ],
    "line": 103,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "guest l3Network of vm nic[uuid:%s] and vip l3Network of EIP[uuid:%s] are the same network",
    "en_US": "guest l3Network of vm nic[uuid:{0}] and vip l3Network of EIP[uuid:{1}] are the same network",
    "zh_CN": "虚拟机网卡[uuid:{0}]的客户L3网络，和EIP[uuid:{1}]的虚拟ip L3网络是同一个网络。",
    "arguments": [
      "msg.getVmNicUuid()",
      "msg.getEipUuid()"
    ],
    "line": 123,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "eip[uuid:%s] has not attached to any vm nic",
    "en_US": "eip[uuid:{0}] has not attached to any vm nic",
    "zh_CN": "eip[uuid:{0}]还没有被挂载到任意虚拟机网卡。",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 137,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "overlap public and private subnets. The subnet of EIP[%s] is an overlap with the subnet[%s, %s] of the VM nic[uuid: %s].",
    "en_US": "overlap public and private subnets. The subnet of EIP[{0}] is an overlap with the subnet[{1}, {2}] of the VM nic[uuid: {3}].",
    "zh_CN": "",
    "arguments": [
      "eipIp",
      "gw",
      "netmask",
      "vmNicUuid"
    ],
    "line": 156,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "the vm[uuid:%s] that the EIP is about to attach is already on the public network[uuid:%s] from which the vip[uuid:%s, name:%s, ip:%s] comes",
    "en_US": "the vm[uuid:{0}] that the EIP is about to attach is already on the public network[uuid:{1}] from which the vip[uuid:{2}, name:{3}, ip:{4}] comes",
    "zh_CN": "EIP将要挂载到的虚拟机[uuid:{0}]已经处于公共网络[uuid:{1}]上，该网络上已有vip[uuid:{2}, name:{3}, ip:{4}]。",
    "arguments": [
      "vmUuid",
      "vip.getL3NetworkUuid()",
      "vip.getUuid()",
      "vip.getName()",
      "vip.getIp()"
    ],
    "line": 172,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "vip[uuid:%s] has been occupied other network service entity[%s]",
    "en_US": "vip[uuid:{0}] has been occupied other network service entity[{1}]",
    "zh_CN": "vip[uuid:{0}]已经被其他网络服务实体[{1}]占用。",
    "arguments": [
      "msg.getVipUuid()",
      "vip.getUseFor()"
    ],
    "line": 180,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "vip[uuid:%s] is not in state[%s], current state is %s",
    "en_US": "vip[uuid:{0}] is not in state[{1}], current state is {2}",
    "zh_CN": "vip[uuid:{0}]不处于状态[{1}]中，当前状态[{2}]。",
    "arguments": [
      "msg.getVipUuid()",
      "VipState.Enabled",
      "vip.getState()"
    ],
    "line": 184,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "vm state[%s] is not allowed to operate eip, maybe you should wait the vm process complete",
    "en_US": "vm state[{0}] is not allowed to operate eip, maybe you should wait the vm process complete",
    "zh_CN": "云主机状态[{0}]不允许进行弹性IP操作，你可能需要等待云主机操作完成",
    "arguments": [
      "state.toString()"
    ],
    "line": 204,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "unable to attach the L3 network[uuid:%s, name:%s] to the vm[uuid:%s, name:%s], because the L3 network is providing EIP to one of the vm\u0027s nic",
    "en_US": "unable to attach the L3 network[uuid:{0}, name:{1}] to the vm[uuid:{2}, name:{3}], because the L3 network is providing EIP to one of the vm\u0027s nic",
    "zh_CN": "无法将L3网络[uuid:{0}, name:{1}]挂载到虚拟机[uuid:{2}, name:{3}]，因为L3网络正在为虚拟机上的一块网卡提供EIP。",
    "arguments": [
      "l3.getUuid()",
      "l3.getName()",
      "vm.getUuid()",
      "vm.getName()"
    ],
    "line": 1076,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipManagerImpl.java"
  },
  {
    "raw": "l3 network uuid cannot be null",
    "en_US": "l3 network uuid cannot be null",
    "zh_CN": "L3网络的uuid不能为空。",
    "arguments": [],
    "line": 242,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java"
  },
  {
    "raw": "Cannot find DhcpIp for l3 network[uuid:%s]",
    "en_US": "Cannot find DhcpIp for l3 network[uuid:{0}]",
    "zh_CN": "无法为L3网络[uuid:{0}]找到DHCP IP。",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 274,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java"
  },
  {
    "raw": "cannot configure DHCP for vm[uuid:%s] on the destination host[uuid:%s]",
    "en_US": "cannot configure DHCP for vm[uuid:{0}] on the destination host[uuid:{1}]",
    "zh_CN": "无法为目标物理机[uuid:{1}]上的虚拟机[uuid:{0}]配置DHCP。",
    "arguments": [
      "inv.getUuid()",
      "destHostUuid"
    ],
    "line": 565,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java"
  },
  {
    "raw": "failed to re-apply DHCP configuration of the vm[uuid:%s] to the host[uuid:%s], %s. You may need to reboot the VM to make the DHCP works",
    "en_US": "failed to re-apply DHCP configuration of the vm[uuid:{0}] to the host[uuid:{1}], {2}. You may need to reboot the VM to make the DHCP works",
    "zh_CN": "未能向物理机[uuid:{1}]重新应用云主机[uuid:{0}]的DHCP配置，错误细节：{2}。您可能需要重启该云主机以解决问题。",
    "arguments": [
      "vm.getUuid()",
      "applyHostUuidForRollback",
      "errorCode"
    ],
    "line": 748,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java"
  },
  {
    "raw": "after migration, failed to apply EIPs[uuids:%s] to the vm[uuid:%s, name:%s] on the destination host[uuid:%s], %s",
    "en_US": "after migration, failed to apply EIPs[uuids:{0}] to the vm[uuid:{1}, name:{2}] on the destination host[uuid:{3}], {4}",
    "zh_CN": "迁移后，未能向云主机（VM）[uuid:{1}, name:{2}]应用弹性IP（EIP）[uuids:{0}]，目标物理机为[uuid:{3}]，错误原因为：{4}。",
    "arguments": [
      "eips.stream().map( e -\u003e e.vip).collect(Collectors.toList())",
      "inv.getUuid()",
      "inv.getName()",
      "inv.getHostUuid()",
      "errorCode"
    ],
    "line": 131,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatEipBackend.java"
  },
  {
    "raw": "after migration, failed to apply EIPs[uuids:%s] to the vm[uuid:%s, name:%s] on the destination host[uuid:%s], %s.You may need to reboot the VM to resolve the issue",
    "en_US": "after migration, failed to apply EIPs[uuids:{0}] to the vm[uuid:{1}, name:{2}] on the destination host[uuid:{3}], {4}.You may need to reboot the VM to resolve the issue",
    "zh_CN": "迁移后，未能向云主机（VM）[uuid:{1}, name:{2}]应用弹性IP（EIP）[uuids:{0}]，目标物理机为[uuid:{3}]，错误原因为：{4}。您可能需要重启该云主机以解决问题。",
    "arguments": [
      "eips.stream().map( e -\u003e e.vip).collect(Collectors.toList())",
      "vm.getUuid()",
      "vm.getName()",
      "applyHostUuidForRollback",
      "errorCode"
    ],
    "line": 283,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatEipBackend.java"
  },
  {
    "raw": "unable to apply the EIP operation for the the vm[uuid:%s, state:%s], because cannot find the VM\u0027s hostUUid",
    "en_US": "unable to apply the EIP operation for the the vm[uuid:{0}, state:{1}], because cannot find the VM\u0027s hostUUid",
    "zh_CN": "无法为虚拟机[uuid:{0}, state:{1}]应用EIP操作，因为无法找到该虚拟机的物理机uuid(hostUuid)。",
    "arguments": [
      "vmUuid",
      "vm.getState()"
    ],
    "line": 529,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatEipBackend.java"
  },
  {
    "raw": "host[uuid:%s] is not connected",
    "en_US": "host[uuid:{0}] is not connected",
    "zh_CN": "物理机[uuid:{0}]未连接。",
    "arguments": [
      "struct.getHostUuid()"
    ],
    "line": 341,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatUserdataBackend.java"
  },
  {
    "raw": "vm nics[uuids:%s] are not on the same L3 network. they are on L3 networks[uuids:%s]",
    "en_US": "vm nics[uuids:{0}] are not on the same L3 network. they are on L3 networks[uuids:{1}]",
    "zh_CN": "虚拟机网卡[uuids:{0}]不在同一个L3网络上。它们分别处于[uuids:{1}]这些L3网络上。",
    "arguments": [
      "msg.getVmNicUuids()",
      "l3Uuids"
    ],
    "line": 111,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "the L3 network[uuid:%s] of the vm nics has no network service[%s] enabled",
    "en_US": "the L3 network[uuid:{0}] of the vm nics has no network service[{1}] enabled",
    "zh_CN": "虚拟机网卡所在的L3网络[uuid:{0}]没有启用网络服务[{1}]。",
    "arguments": [
      "l3Uuid",
      "LoadBalancerConstants.LB_NETWORK_SERVICE_TYPE_STRING"
    ],
    "line": 125,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "the vm nics[uuid:%s] are already on the load balancer listener[uuid:%s]",
    "en_US": "the vm nics[uuid:{0}] are already on the load balancer listener[uuid:{1}]",
    "zh_CN": "虚拟机网卡[uuid:{0}]已经处于负载均衡监听器[uuid:{1}]上。",
    "arguments": [
      "existingNics",
      "msg.getListenerUuid()"
    ],
    "line": 134,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "conflict loadBalancerPort[%s], a listener[uuid:%s] has used that port",
    "en_US": "conflict loadBalancerPort[{0}], a listener[uuid:{1}] has used that port",
    "zh_CN": "冲突的负载均衡器端口(loadBalancerPort)[{0}]，一个监听器[uuid:{1}]已经使用了该端口。",
    "arguments": [
      "msg.getLoadBalancerPort()",
      "luuid"
    ],
    "line": 227,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "conflict instancePort[%s], a listener[uuid:%s] has used that port",
    "en_US": "conflict instancePort[{0}], a listener[uuid:{1}] has used that port",
    "zh_CN": "冲突的实例端口(instancePort)[{0}]，一个监听器[uuid:{1}]已经使用了该端口。",
    "arguments": [
      "msg.getInstancePort()",
      "luuid"
    ],
    "line": 236,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "conflict loadBalancerPort[%s], a vip[uuid:%s] has used that port",
    "en_US": "conflict loadBalancerPort[{0}], a vip[uuid:{1}] has used that port",
    "zh_CN": "",
    "arguments": [
      "msg.getLoadBalancerPort()",
      "TargetVipUuids"
    ],
    "line": 267,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "the L3 network of vm nic[uuid:%s] doesn\u0027t have load balancer service enabled",
    "en_US": "the L3 network of vm nic[uuid:{0}] doesn\u0027t have load balancer service enabled",
    "zh_CN": "虚拟机网卡[uuid:{0}]的L3网络没有启用负载均衡服务。",
    "arguments": [
      "msg.getVmNicUuids().get(0)"
    ],
    "line": 902,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerBase.java"
  },
  {
    "raw": "service provider type mismatching. The load balancer[uuid:%s] is provided by the service provider[type:%s], but the L3 network of vm nic[uuid:%s] is enabled with the service provider[type: %s]",
    "en_US": "service provider type mismatching. The load balancer[uuid:{0}] is provided by the service provider[type:{1}], but the L3 network of vm nic[uuid:{2}] is enabled with the service provider[type: {3}]",
    "zh_CN": "网络服务提供器的类型不匹配。负载均衡器[uuid:{0}]由服务提供器[type:{1}]提供，但虚拟机网卡[uuid:{2}]的L3网络启用服务器类型为[type: {3}]。",
    "arguments": [
      "self.getUuid()",
      "self.getProviderType()",
      "msg.getVmNicUuids().get(0)",
      "providerType"
    ],
    "line": 929,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerBase.java"
  },
  {
    "raw": "cannot find the load balancer[uuid:%s]",
    "en_US": "cannot find the load balancer[uuid:{0}]",
    "zh_CN": "无法找到负载均衡器[uuid:{0}]。",
    "arguments": [
      "msg.getLoadBalancerUuid()"
    ],
    "line": 91,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "cannot delete the system tag[%s]. The load balancer plugin relies on it, you can only update it",
    "en_US": "cannot delete the system tag[{0}]. The load balancer plugin relies on it, you can only update it",
    "zh_CN": "无法删除系统标签[{0}]。负载均衡器插件依赖于该标签，该标签只能被更新。",
    "arguments": [
      "tag.getTag()"
    ],
    "line": 230,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid balance algorithm[%s], valid algorithms are %s",
    "en_US": "invalid balance algorithm[{0}], valid algorithms are {1}",
    "zh_CN": "无效的均衡算法[{0}]，有效的为[{1}]。",
    "arguments": [
      "algorithm",
      "LoadBalancerConstants.BALANCE_ALGORITHMS"
    ],
    "line": 250,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid unhealthy threshold[%s], %s is not a number",
    "en_US": "invalid unhealthy threshold[{0}], {1} is not a number",
    "zh_CN": "无效的不健康阈值[{0}]，[{1}]不是一个数字。",
    "arguments": [
      "systemTag",
      "s"
    ],
    "line": 264,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid healthy threshold[%s], %s is not a number",
    "en_US": "invalid healthy threshold[{0}], {1} is not a number",
    "zh_CN": "无效的健康阈值[{0}]，[{1}]不是一个数字。",
    "arguments": [
      "systemTag",
      "s"
    ],
    "line": 278,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid healthy timeout[%s], %s is not a number",
    "en_US": "invalid healthy timeout[{0}], {1} is not a number",
    "zh_CN": "无效的健康超时[{0}]，[{1}]不是一个数字。",
    "arguments": [
      "systemTag",
      "s"
    ],
    "line": 292,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid connection idle timeout[%s], %s is not a number",
    "en_US": "invalid connection idle timeout[{0}], {1} is not a number",
    "zh_CN": "无效的连接空闲超时[{0}]，[{1}]不是一个数字。",
    "arguments": [
      "systemTag",
      "s"
    ],
    "line": 306,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid health check interval[%s], %s is not a number",
    "en_US": "invalid health check interval[{0}], {1} is not a number",
    "zh_CN": "无效的健康检查间隔[{0}]，[{1}]不是一个数字。",
    "arguments": [
      "systemTag",
      "s"
    ],
    "line": 320,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid max connection[%s], %s is not a number",
    "en_US": "invalid max connection[{0}], {1} is not a number",
    "zh_CN": "无效的最大连接[{0}]，[{1}]不是一个数字。",
    "arguments": [
      "systemTag",
      "s"
    ],
    "line": 334,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid health target[%s], the format is targetCheckProtocol:port, for example, tcp:default",
    "en_US": "invalid health target[{0}], the format is targetCheckProtocol:port, for example, tcp:default",
    "zh_CN": "无效的健康检查目标[{0}]，格式为[目标检查协议(targetCheckProtocol):端口(port)], 例如[tcp:default]。",
    "arguments": [
      "systemTag"
    ],
    "line": 347,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid health target[%s], the target checking protocol[%s] is invalid, valid protocols are %s",
    "en_US": "invalid health target[{0}], the target checking protocol[{1}] is invalid, valid protocols are {2}",
    "zh_CN": "无效的健康检查目标[{0}]，目标检查协议无效[{1}]，有效的为[{2}]。",
    "arguments": [
      "systemTag",
      "protocol",
      "LoadBalancerConstants.HEALTH_CHECK_TARGET_PROTOCOLS"
    ],
    "line": 352,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid invalid health target[%s], port[%s] is not a number",
    "en_US": "invalid invalid health target[{0}], port[{1}] is not a number",
    "zh_CN": "无效的健康检查目标[{0}]，端口[{1}]不是一个数字。",
    "arguments": [
      "systemTag",
      "port"
    ],
    "line": 364,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid invalid health target[%s], port[%s] is not in the range of [1, 65535]",
    "en_US": "invalid invalid health target[{0}], port[{1}] is not in the range of [1, 65535]",
    "zh_CN": "无效的无效健康检查目标[{0}]，端口[{1}]不在范围[1, 65535]内。",
    "arguments": [
      "systemTag",
      "port"
    ],
    "line": 361,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "guest l3Network of vm nic[uuid:%s] and vip l3Network of vip[uuid: %s] are the same network",
    "en_US": "guest l3Network of vm nic[uuid:{0}] and vip l3Network of vip[uuid: {1}] are the same network",
    "zh_CN": "虚拟机网卡[uuid:{0}]的客户L3网络和虚拟IP[uuid:{1}]的虚拟IP L3网络是同一个网络。",
    "arguments": [
      "msg.getVmNicUuid()",
      "msg.getVipUuid()"
    ],
    "line": 193,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "the vip[uuid:%s] has been occupied other network service entity[%s]",
    "en_US": "the vip[uuid:{0}] has been occupied other network service entity[{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getVipUuid()",
      "useForList.toString()"
    ],
    "line": 174,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "Port forwarding rule[uuid:%s] is not in state of Enabled, current state is %s",
    "en_US": "Port forwarding rule[uuid:{0}] is not in state of Enabled, current state is {1}",
    "zh_CN": "端口转发规则[uuid:{0}]未启用，当前状态[{1}]。",
    "arguments": [
      "msg.getRuleUuid()",
      "state"
    ],
    "line": 64,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "port forwarding rule rule[uuid:%s] has not been attached to any vm nic, can\u0027t detach",
    "en_US": "port forwarding rule rule[uuid:{0}] has not been attached to any vm nic, can\u0027t detach",
    "zh_CN": "端口转发规则[uuid:{0}]尚未被挂载到任何虚拟机网卡，无法卸载。",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "port forwarding rule[uuid:%s] has been attached to vm nic[uuid:%s], can\u0027t attach again",
    "en_US": "port forwarding rule[uuid:{0}] has been attached to vm nic[uuid:{1}], can\u0027t attach again",
    "zh_CN": "端口转发规则[uuid:{0}]已经被挂载到虚拟机网卡[uuid:{1}]，无法再次挂载。",
    "arguments": [
      "msg.getRuleUuid()",
      "vmNicUuid"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "port forwarding rule[uuid:%s] is not in state of Enabled,  current state is %s. A rule can only be attached when its state is Enabled",
    "en_US": "port forwarding rule[uuid:{0}] is not in state of Enabled,  current state is {1}. A rule can only be attached when its state is Enabled",
    "zh_CN": "端口转发规则[uuid:{0}]没有启用，当前状态为{1}。一个规则只能在启用时被挂载。",
    "arguments": [
      "msg.getRuleUuid()",
      "state"
    ],
    "line": 100,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "guest l3Network of vm nic[uuid:%s] and vip l3Network of port forwarding rule[uuid:%s] are the same network",
    "en_US": "guest l3Network of vm nic[uuid:{0}] and vip l3Network of port forwarding rule[uuid:{1}] are the same network",
    "zh_CN": "虚拟机网卡[uuid:{0}]的客户L3网络和端口转发规则[uuid:{1}]的VIP L3网络是同一个网络。",
    "arguments": [
      "msg.getVmNicUuid()",
      "msg.getRuleUuid()"
    ],
    "line": 116,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "for range port forwarding, the port range size must match; vip range[%s, %s]\u0027s size doesn\u0027t match range[%s, %s]\u0027s size",
    "en_US": "for range port forwarding, the port range size must match; vip range[{0}, {1}]\u0027s size doesn\u0027t match range[{2}, {3}]\u0027s size",
    "zh_CN": "对于范围端口转发，端口范围大小必须匹配；VIP范围[{0}, {1}]的大小不匹配范围[{2}, {3}]的大小。",
    "arguments": [
      "msg.getVipPortStart()",
      "msg.getVipPortEnd()",
      "msg.getPrivatePortStart()",
      "msg.getPrivatePortEnd()"
    ],
    "line": 157,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "invalid CIDR[%s]",
    "en_US": "invalid CIDR[{0}]",
    "zh_CN": "无效的CIDR[{0}]",
    "arguments": [
      "msg.getAllowedCidr()"
    ],
    "line": 164,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "vip port range[vipStartPort:%s, vipEndPort:%s] overlaps with rule[uuid:%s, vipStartPort:%s, vipEndPort:%s]",
    "en_US": "vip port range[vipStartPort:{0}, vipEndPort:{1}] overlaps with rule[uuid:{2}, vipStartPort:{3}, vipEndPort:{4}]",
    "zh_CN": "虚拟IP（vip）端口范围[vipStartPort:{0}, vipEndPort:{1}]与规则[uuid:{2}, vipStartPort:{3}, vipEndPort:{4}]重叠。",
    "arguments": [
      "vipStart",
      "vipEnd",
      "vo.getUuid()",
      "vo.getVipPortStart()",
      "vo.getVipPortEnd()"
    ],
    "line": 174,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "the VM[name:%s uuid:%s] already has port forwarding rules that have different VIPs than the one[uuid:%s]",
    "en_US": "the VM[name:{0} uuid:{1}] already has port forwarding rules that have different VIPs than the one[uuid:{2}]",
    "zh_CN": "虚拟机[name:{0} uuid:{1}]已经有端口转发规则，且与[uuid:{2}]有不同的VIPs。",
    "arguments": [
      "vm.getName()",
      "vm.getUuid()",
      "vipUuid"
    ],
    "line": 242,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "unsupported ip allocation strategy[%s]",
    "en_US": "unsupported ip allocation strategy[{0}]",
    "zh_CN": "不支持的ip分配策略[{0}]",
    "arguments": [
      "msg.getAllocatorStrategy()"
    ],
    "line": 50,
    "fileName": "src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java"
  },
  {
    "raw": "requiredIp[%s] is not in valid IPv4 mediaType",
    "en_US": "requiredIp[{0}] is not in valid IPv4 mediaType",
    "zh_CN": "请求的ip[{0}]不是有效的IPv4地址。",
    "arguments": [
      "msg.getRequiredIp()"
    ],
    "line": 55,
    "fileName": "src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java"
  },
  {
    "raw": "there is already a vip[%s] on l3Network[uuid:%s]",
    "en_US": "there is already a vip[{0}] on l3Network[uuid:{1}]",
    "zh_CN": "已有一个vip[{0}]在L3网络[uuid:{1}]上。",
    "arguments": [
      "msg.getRequiredIp()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 65,
    "fileName": "src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java"
  },
  {
    "raw": "service provider of the vip[uuid:%s, name:%s, ip: %s] has been set to %s",
    "en_US": "service provider of the vip[uuid:{0}, name:{1}, ip: {2}] has been set to {3}",
    "zh_CN": "vip[uuid:{0}, name:{1}, ip: {2}]的服务提供器已经被设置成[{3}]。",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "self.getIp()",
      "self.getServiceProvider()"
    ],
    "line": 179,
    "fileName": "src/main/java/org/zstack/network/service/vip/VipBase.java"
  },
  {
    "raw": "Vip [uuid %s, ip %s] of router public interface can not be deleted",
    "en_US": "Vip [uuid {0}, ip {1}] of router public interface can not be deleted",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()",
      "self.getIp()"
    ],
    "line": 629,
    "fileName": "src/main/java/org/zstack/network/service/vip/VipBase.java"
  },
  {
    "raw": "no qos about [vip:%s]is setting",
    "en_US": "no qos about [vip:{0}]is setting",
    "zh_CN": "",
    "arguments": [
      "msg.getVipUuid()"
    ],
    "line": 31,
    "fileName": "src/main/java/org/zstack/network/service/vip/VipQosApiInterceptor.java"
  },
  {
    "raw": "no inbound qos for vip[uuid:%s] set",
    "en_US": "no inbound qos for vip[uuid:{0}] set",
    "zh_CN": "",
    "arguments": [
      "msg.getVipUuid()"
    ],
    "line": 42,
    "fileName": "src/main/java/org/zstack/network/service/vip/VipQosApiInterceptor.java"
  },
  {
    "raw": "no outbound qos for vip[uuid:%s] set",
    "en_US": "no outbound qos for vip[uuid:{0}] set",
    "zh_CN": "",
    "arguments": [
      "msg.getVipUuid()"
    ],
    "line": 45,
    "fileName": "src/main/java/org/zstack/network/service/vip/VipQosApiInterceptor.java"
  },
  {
    "raw": "the L3 network[uuid:%s, type:%s] do not support vipQos, please check the l3 type or try to attach VipQos network service to it",
    "en_US": "the L3 network[uuid:{0}, type:{1}] do not support vipQos, please check the l3 type or try to attach VipQos network service to it",
    "zh_CN": "三层网络[uuid:{0},类型:{1}]不支持设置网络带宽，请检查网络类型或者尝试加载VipQos服务到该三层网络",
    "arguments": [
      "t.get(0)",
      "t.get(1)"
    ],
    "line": 501,
    "fileName": "src/main/java/org/zstack/network/service/vip/VipQosManagerImpl.java"
  },
  {
    "raw": "the virtual router[name:%s, uuid:%s, current state:%s] is not running,and cannot perform required operation. Please retry your operation later once it is running",
    "en_US": "the virtual router[name:{0}, uuid:{1}, current state:{2}] is not running,and cannot perform required operation. Please retry your operation later once it is running",
    "zh_CN": "云路由[name:{0}, uuid:{1}, current state:{2}]没有运行，无法执行请求的操作。请在其启动后重试。",
    "arguments": [
      "self.getName()",
      "self.getUuid()",
      "self.getState()"
    ],
    "line": 246,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java"
  },
  {
    "raw": "virtual router[uuid:%s] is in status of %s that cannot make http call to %s",
    "en_US": "virtual router[uuid:{0}] is in status of {1} that cannot make http call to {2}",
    "zh_CN": "云路由[uuid:{0}]处于状态{1}中，无法向{2}发送http调用。",
    "arguments": [
      "self.getUuid()",
      "getSelf().getStatus()",
      "msg.getPath()"
    ],
    "line": 251,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java"
  },
  {
    "raw": "unable to add nic[%s] to virtual router vm[uuid:%s ip:%s], because %s",
    "en_US": "unable to add nic[{0}] to virtual router vm[uuid:{1} ip:{2}], because {3}",
    "zh_CN": "无法向云路由设备[uuid:{1} ip:{2}]添加网卡[{0}]，错误细节：{3}。",
    "arguments": [
      "info",
      "vr.getUuid()",
      "vr.getManagementNic().getIp()",
      "rsp.getError()"
    ],
    "line": 429,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java"
  },
  {
    "raw": "unable to detach nic[%s] from virtual router vm[uuid:%s ip:%s], because %s",
    "en_US": "unable to detach nic[{0}] from virtual router vm[uuid:{1} ip:{2}], because {3}",
    "zh_CN": "无法从云路由设备[uuid:{1} ip:{2}]上卸载网卡[{0}]，错误细节：{3}。",
    "arguments": [
      "info",
      "vr.getUuid()",
      "vr.getManagementNic().getIp()",
      "rsp.getError()"
    ],
    "line": 470,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java"
  },
  {
    "raw": "image[uuid:%s]\u0027s mediaType is %s, the mediaType of a virtual router image must be %s",
    "en_US": "image[uuid:{0}]\u0027s mediaType is {1}, the mediaType of a virtual router image must be {2}",
    "zh_CN": "镜像[uuid:{0}]的mediaType为{1}，云路由的mediaType必须为{2}。",
    "arguments": [
      "msg.getImageUuid()",
      "type",
      "ImageMediaType.RootVolumeTemplate"
    ],
    "line": 130,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is of format %s, cannot be used for virtual router",
    "en_US": "image[uuid:{0}] is of format {1}, cannot be used for virtual router",
    "zh_CN": "镜像[uuid:{0}]的格式为{1}，无法被用于云路由。",
    "arguments": [
      "msg.getImageUuid()",
      "format"
    ],
    "line": 136,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "management network[uuid:%s] is not in the same zone[uuid:%s] this offering is going to create",
    "en_US": "management network[uuid:{0}] is not in the same zone[uuid:{1}] this offering is going to create",
    "zh_CN": "管理网络[uuid:{0}]和将要创建的规格不处于同一个区域（zone）[uuid:{1}]中。",
    "arguments": [
      "msg.getManagementNetworkUuid()",
      "msg.getZoneUuid()"
    ],
    "line": 106,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "public network[uuid:%s] is not in the same zone[uuid:%s] this offering is going to create",
    "en_US": "public network[uuid:{0}] is not in the same zone[uuid:{1}] this offering is going to create",
    "zh_CN": "公共网络[uuid:{0}]和将要创建的规格不处于同一个区域（zone）[uuid:{1}]中。",
    "arguments": [
      "msg.getManagementNetworkUuid()",
      "msg.getZoneUuid()"
    ],
    "line": 119,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "the L3 network[uuid: %s] has the SNAT service enabled, it cannot be used as a public network",
    "en_US": "the L3 network[uuid: {0}] has the SNAT service enabled, it cannot be used as a public network",
    "zh_CN": "L3网络[uuid: {0}]启用了SNAT服务，无法被用作公共网络。",
    "arguments": [
      "msg.getPublicNetworkUuid()"
    ],
    "line": 147,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "the L3 network[uuid: %s] has the SNAT service enabled, it cannot be used as a management network",
    "en_US": "the L3 network[uuid: {0}] has the SNAT service enabled, it cannot be used as a management network",
    "zh_CN": "L3网络[uuid: {0}]启用了SNAT服务，无法被用作管理网络。",
    "arguments": [
      "msg.getManagementNetworkUuid()"
    ],
    "line": 145,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "the management network[uuid:%s] doesn\u0027t have any IP range",
    "en_US": "the management network[uuid:{0}] doesn\u0027t have any IP range",
    "zh_CN": "管理网络[uuid:{0}]不包含任何的IP范围。",
    "arguments": [
      "managementNetworkUuid"
    ],
    "line": 173,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "the management network[uuid:%s, gateway:%s] is not reachable",
    "en_US": "the management network[uuid:{0}, gateway:{1}] is not reachable",
    "zh_CN": "管理网络[uuid:{0}, gateway:{1}]不可抵达。",
    "arguments": [
      "managementNetworkUuid",
      "gateway"
    ],
    "line": 175,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "failed to create VirtualRouterBootstrapIso[%s] on kvm host[uuid:%s, ip:%s] for virtual router[uuid:%s], because %s",
    "en_US": "failed to create VirtualRouterBootstrapIso[{0}] on kvm host[uuid:{1}, ip:{2}] for virtual router[uuid:{3}], because {4}",
    "zh_CN": "创建云路由引导镜像（VirtualRouterBootstrapIso）[{0}]失败，该操作是在KVM物理机[uuid:{1}, ip:{2}]上为云路由[uuid:{3}]执行的，原因为{4}。",
    "arguments": [
      "iso.getIsoPath()",
      "vrSpec.getDestHost().getUuid()",
      "vrSpec.getDestHost().getManagementIp()",
      "iso.getVirtualRouterUuid()",
      "rsp.getError()"
    ],
    "line": 108,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterKvmBackend.java"
  },
  {
    "raw": "failed to delete VirtualRouterBootstrapIso[%s] on kvm host[uuid:%s] for virtual router[uuid:%s], because %s",
    "en_US": "failed to delete VirtualRouterBootstrapIso[{0}] on kvm host[uuid:{1}] for virtual router[uuid:{2}], because {3}",
    "zh_CN": "删除云路由引导镜像（VirtualRouterBootstrapIso）[{0}]失败，该操作是在KVM物理机[uuid:{1}]上为云路由[uuid:{2}]执行的，原因为{3}。",
    "arguments": [
      "iso.getIsoPath()",
      "hostUuid",
      "iso.getVirtualRouterUuid()",
      "rsp.getError()"
    ],
    "line": 142,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterKvmBackend.java"
  },
  {
    "raw": "cannot create virtual Router vm while virtual router network overlaps with private network in ip ",
    "en_US": "cannot create virtual Router vm while virtual router network overlaps with private network in ip ",
    "zh_CN": "当云路由规格的网络和私有网络IP范围有重叠时，无法创建云路由设备。",
    "arguments": [],
    "line": 257,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java"
  },
  {
    "raw": "virtual router[uuid:%s] for l3 network[uuid:%s] is not in Running state, current state is %s. We don\u0027t have HA feature now(it\u0027s coming soon), please restart it from UI and then try starting this vm again",
    "en_US": "virtual router[uuid:{0}] for l3 network[uuid:{1}] is not in Running state, current state is {2}. We don\u0027t have HA feature now(it\u0027s coming soon), please restart it from UI and then try starting this vm again",
    "zh_CN": "L3网络[uuid:{1}]上的云路由[uuid:{0}]不处于运行状态，当前状态为{2}。目前我们没有HA特性（很快就会有），请从界面上重启它，然后尝试启动虚拟机。",
    "arguments": [
      "vr.getUuid()",
      "l3Nw.getUuid()",
      "vr.getState()"
    ],
    "line": 650,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java"
  },
  {
    "raw": "failed tot attach virtual router network services to l3Network[uuid:%s]. When eip is selected, snat must be selected too",
    "en_US": "failed to attach virtual router network services to l3Network[uuid:{0}]. When eip is selected, snat must be selected too",
    "zh_CN": "挂载虚拟路由网络服务到L3网络[uuid:{0}]失败。选中EIP服务时，SNAT服务也必须被选中。",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 921,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java"
  },
  {
    "raw": "failed tot attach virtual router network services to l3Network[uuid:%s]. When port forwarding is selected, snat must be selected too",
    "en_US": "failed to attach virtual router network services to l3Network[uuid:{0}]. When port forwarding is selected, snat must be selected too",
    "zh_CN": "挂载虚拟路由网络服务到L3网络[uuid:{0}]失败。选中端口转发服务时，SNAT服务也必须被选中。",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 925,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java"
  },
  {
    "raw": "unable to add dhcp entries to virtual router vm[uuid:%s ip:%s], because %s, dhcp entry[%s]",
    "en_US": "unable to add dhcp entries to virtual router vm[uuid:{0} ip:{1}], because {2}, dhcp entry[{3}]",
    "zh_CN": "无法向云路由[uuid:{0} ip:{1}]添加DHCP条目，因为{2}，DHCP条目为[{3}]。",
    "arguments": [
      "vr.getUuid()",
      "vr.getManagementNic().getIp()",
      "rsp.getError()",
      "struct"
    ],
    "line": 120,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/dhcp/VirtualRouterDhcpBackend.java"
  },
  {
    "raw": "unable to program dhcp entries served by virtual router[uuid:%s, ip:%s], %s",
    "en_US": "unable to program dhcp entries served by virtual router[uuid:{0}, ip:{1}], {2}",
    "zh_CN": "无法执行由云路由[uuid:{0}, ip:{1}]提供的DHCP条目{2}.",
    "arguments": [
      "vr.getUuid()",
      "vr.getManagementNic().getIp()",
      "ret.getError()"
    ],
    "line": 175,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/dhcp/VirtualRouterSyncDHCPOnStartFlow.java"
  },
  {
    "raw": "virtual router[uuid:%s, ip:%s] failed to configure dns%s for L3Network[uuid:%s, name:%s], %s",
    "en_US": "virtual router[uuid:{0}, ip:{1}] failed to configure dns{2} for L3Network[uuid:{3}, name:{4}], {5}",
    "zh_CN": "云路由[uuid:{0}, ip:{1}]未能为L3网络[uuid:{3}, name:{4}]配置DNS{2}，错误细节：{5}。",
    "arguments": [
      "vr.getUuid()",
      "vr.getManagementNic().getIp()",
      "struct",
      "l3.getUuid()",
      "l3.getName()",
      "ret.getError()"
    ],
    "line": 193,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/dns/VirtualRouterDnsBackend.java"
  },
  {
    "raw": "virtual router[name: %s, uuid: %s] failed to configure dns%s, %s ",
    "en_US": "virtual router[name: {0}, uuid: {1}] failed to configure dns{2}, {3} ",
    "zh_CN": "云路由[name: {0}, uuid: {1}]未能配置DNS{2}，错误细节：{3}。",
    "arguments": [
      "vr.getName()",
      "vr.getUuid()",
      "JSONObjectUtil.toJsonString(dns)",
      "ret.getError()"
    ],
    "line": 108,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/dns/VirtualRouterSyncDnsOnStartFlow.java"
  },
  {
    "raw": "failed to create eip[uuid:%s, name:%s, ip:%s] for vm nic[uuid:%s] on virtual router[uuid:%s], %s",
    "en_US": "failed to create eip[uuid:{0}, name:{1}, ip:{2}] for vm nic[uuid:{3}] on virtual router[uuid:{4}], {5}",
    "zh_CN": "无法为虚拟机网卡[uuid:{3}]在云路由[uuid:{4}]上创建EIP[uuid:{0}, name:{1}, ip:{2}]，错误细节：{5}。",
    "arguments": [
      "struct.getEip().getUuid()",
      "struct.getEip().getName()",
      "struct.getVip().getIp()",
      "struct.getNic().getUuid()",
      "vr.getUuid()",
      "ret.getError()"
    ],
    "line": 149,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterEipBackend.java"
  },
  {
    "raw": "found a virtual router offering[uuid:%s] for L3Network[uuid:%s] in zone[uuid:%s]; however, the network\u0027s public network[uuid:%s] is not the same to EIP[uuid:%s]\u0027s; you may need to use system tag guestL3Network::l3NetworkUuid to specify a particular virtual router offering for the L3Network",
    "en_US": "found a virtual router offering[uuid:{0}] for L3Network[uuid:{1}] in zone[uuid:{2}]; however, the network\u0027s public network[uuid:{3}] is not the same to EIP[uuid:{4}]\u0027s; you may need to use system tag guestL3Network::l3NetworkUuid to specify a particular virtual router offering for the L3Network",
    "zh_CN": "在区域（zone）[uuid:{2}]上为L3网络[uuid:{1}]找到了云路由规格[uuid:{0}]；但是，其公共网络[uuid:{3}]和EIP[uuid:{4}]的公共网络不是同一个L3网络。你可能需要使用系统标签[guestL3Network::l3NetworkUuid]为该L3网络指定一个特定的云路有规格。",
    "arguments": [
      "offering.getUuid()",
      "l3inv.getUuid()",
      "l3inv.getZoneUuid()",
      "struct.getVip().getL3NetworkUuid()",
      "struct.getEip().getUuid()"
    ],
    "line": 185,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterEipBackend.java"
  },
  {
    "raw": "failed to remove eip[uuid:%s, name:%s, ip:%s] for vm nic[uuid:%s] on virtual router[uuid:%s], %s",
    "en_US": "failed to remove eip[uuid:{0}, name:{1}, ip:{2}] for vm nic[uuid:{3}] on virtual router[uuid:{4}], {5}",
    "zh_CN": "未能在云路由[uuid:{4}]上为虚拟机网卡[uuid:{3}]移除EIP[uuid:{0}, name:{1}, ip:{2}]，错误细节：{5}。",
    "arguments": [
      "struct.getEip().getUuid()",
      "struct.getEip().getName()",
      "struct.getVip().getIp()",
      "struct.getNic().getUuid()",
      "vr.getUuid()",
      "ret.getError()"
    ],
    "line": 288,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterEipBackend.java"
  },
  {
    "raw": "failed to sync eip on virtual router[uuid:%s], %s",
    "en_US": "failed to sync eip on virtual router[uuid:{0}], {1}",
    "zh_CN": "未能在云路由[uuid:{0}]上同步EIP，错误细节：{1}。",
    "arguments": [
      "vr.getUuid()",
      "ret.getError()"
    ],
    "line": 180,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterSyncEipOnStartFlow.java"
  },
  {
    "raw": "cannot find virtual router for load balancer [uuid:%s]",
    "en_US": "cannot find virtual router for load balancer [uuid:{0}]",
    "zh_CN": "未能为负载均衡器[uuid:{0}]找到云路由。",
    "arguments": [
      "struct.getLb().getUuid()"
    ],
    "line": 701,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/lb/VirtualRouterLoadBalancerBackend.java"
  },
  {
    "raw": "guest l3Network[uuid:%s, name:%s] needs SNAT service provided by virtual router, but public l3Network[uuid:%s] of virtual router offering[uuid: %s, name:%s] is the same to this guest l3Network",
    "en_US": "guest l3Network[uuid:{0}, name:{1}] needs SNAT service provided by virtual router, but public l3Network[uuid:{2}] of virtual router offering[uuid: {3}, name:{4}] is the same to this guest l3Network",
    "zh_CN": "用户L3网络[uuid:{0}, name:{1}]需要云路由提供的SNAT服务，但是云路由规格[uuid: {3}, name:{4}]的公共L3网络[uuid:{2}]与该客户L3网络相同。",
    "arguments": [
      "guestL3.getUuid()",
      "guestL3.getName()",
      "offering.getPublicNetworkUuid()",
      "offering.getUuid()",
      "offering.getName()"
    ],
    "line": 73,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/nat/VirtualRouterSnatBackend.java"
  },
  {
    "raw": "virtual router[uuid:%s, ip:%s] failed to apply snat[%s] for vm[uuid:%s, name:%s] on L3Network[uuid:%s, name:%s], because %s",
    "en_US": "virtual router[uuid:{0}, ip:{1}] failed to apply snat[{2}] for vm[uuid:{3}, name:{4}] on L3Network[uuid:{5}, name:{6}], because {7}",
    "zh_CN": "云路由[uuid:{0}, ip:{1}]无法为虚拟机[uuid:{3}, name:{4}]在L3网络[uuid:{5}, name:{6}]上应用SNAT规则[{2}]，因为：{7}。",
    "arguments": [
      "vr.getUuid()",
      "vr.getManagementNic().getIp()",
      "JSONObjectUtil.toJsonString(info)",
      "spec.getVmInventory().getUuid()",
      "spec.getVmInventory().getName()",
      "struct.getL3Network().getUuid()",
      "struct.getL3Network().getName()",
      "ret.getError()"
    ],
    "line": 124,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/nat/VirtualRouterSnatBackend.java"
  },
  {
    "raw": "virtual router[name: %s, uuid: %s] failed to sync snat%s, %s",
    "en_US": "virtual router[name: {0}, uuid: {1}] failed to sync snat{2}, {3}",
    "zh_CN": "云路由[name: {0}, uuid: {1}]未能同步SNAT{2}，错误细节：{3}。",
    "arguments": [
      "vr.getName()",
      "vr.getUuid()",
      "JSONObjectUtil.toJsonString(snatInfo)",
      "ret.getError()"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/nat/VirtualRouterSyncSNATOnStartFlow.java"
  },
  {
    "raw": "failed to create port forwarding rule[vip ip: %s, private ip: %s, vip start port: %s, vip end port: %s, private start port: %s, private end port: %s], because %s",
    "en_US": "failed to create port forwarding rule[vip ip: {0}, private ip: {1}, vip start port: {2}, vip end port: {3}, private start port: {4}, private end port: {5}], because {6}",
    "zh_CN": "无法创建端口转发规则[vip ip: {0}, private ip: {1}, vip start port: {2}, vip end port: {3}, private start port: {4}, private end port: {5}]，错误细节：{6}。",
    "arguments": [
      "to.getVipIp()",
      "to.getPrivateIp()",
      "to.getVipPortStart()",
      "to.getVipPortEnd()",
      "to.getPrivatePortStart()",
      "to.getPrivatePortEnd()",
      "ret.getError()"
    ],
    "line": 81,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/portforwarding/ApplyPortforwardingRuleOnVirtualRouterVmFlow.java"
  },
  {
    "raw": "failed to revoke port forwarding rules %s, because %s",
    "en_US": "failed to revoke port forwarding rules {0}, because {1}",
    "zh_CN": "未能解除端口转发规则{0}，原因：{1}。",
    "arguments": [
      "JSONObjectUtil.toJsonString(to)",
      "ret.getError()"
    ],
    "line": 75,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/portforwarding/ReleasePortForwardingRuleOnVirtualRouterVmFlow.java"
  },
  {
    "raw": "found a virtual router offering[uuid:%s] for L3Network[uuid:%s] in zone[uuid:%s]; however, the network\u0027s public network[uuid:%s] is not the same to PortForwarding rule[uuid:%s]\u0027s; you may need to use system tag guestL3Network::l3NetworkUuid to specify a particular virtual router offering for the L3Network",
    "en_US": "found a virtual router offering[uuid:{0}] for L3Network[uuid:{1}] in zone[uuid:{2}]; however, the network\u0027s public network[uuid:{3}] is not the same to PortForwarding rule[uuid:{4}]\u0027s; you may need to use system tag guestL3Network::l3NetworkUuid to specify a particular virtual router offering for the L3Network",
    "zh_CN": "在区域（zone）[uuid:{2}]内为L3网络[uuid:{1}]找到了一个云路由规格[uuid:{0}]；然而，其网络的公共网络[uuid:{3}]和端口转发规则[uuid:{4}]的公共网络不一致。你可能需要使用系统标签[guestL3Network::l3NetworkUuid]为该L3网络指定一个特定的云路有规格。",
    "arguments": [
      "offering.getUuid()",
      "struct.getGuestL3Network().getUuid()",
      "struct.getGuestL3Network().getZoneUuid()",
      "struct.getVip().getL3NetworkUuid()",
      "struct.getRule().getUuid()"
    ],
    "line": 141,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java"
  },
  {
    "raw": "virtual router doesn\u0027t support port forwarding range redirection, the vipPortStart must be equals to privatePortStart and vipPortEnd must be equals to privatePortEnd;but this rule rule has a mismatching range: vip port[%s, %s], private port[%s, %s]",
    "en_US": "virtual router doesn\u0027t support port forwarding range redirection, the vipPortStart must be equals to privatePortStart and vipPortEnd must be equals to privatePortEnd;but this rule has a mismatching range: vip port[{0}, {1}], private port[{2}, {3}]",
    "zh_CN": "云路由不支持范围性的端口转发重定向，vipPortStart和privatePortStart必须一致，vipPortEnd和privatePortEnd必须一致，但这条规则有个不匹配的范围：vip端口范围[{0}, {1}]，私有端口范围[{2}, {3}]。",
    "arguments": [
      "rule.getVipPortStart()",
      "rule.getVipPortEnd()",
      "rule.getPrivatePortStart()",
      "rule.getPrivatePortEnd()"
    ],
    "line": 207,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java"
  },
  {
    "raw": "failed to sync port forwarding rules served by virtual router[name: %s, uuid: %s], because %s",
    "en_US": "failed to sync port forwarding rules served by virtual router[name: {0}, uuid: {1}], because {2}",
    "zh_CN": "未能同步由云路由[name: {0}, uuid: {1}]提供的端口转发规则，因为：{2}。",
    "arguments": [
      "vr.getName()",
      "vr.getUuid()",
      "ret.getError()"
    ],
    "line": 187,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterSyncPortForwardingRulesOnStartFlow.java"
  },
  {
    "raw": "virtual router[name: %s, uuid: %s] failed to create vip for public ip %s because no ip range for l3NetworkUuid %s",
    "en_US": "virtual router[name: {0}, uuid: {1}] failed to create vip for public ip {2} because no ip range for l3NetworkUuid {3}",
    "zh_CN": "",
    "arguments": [
      "vr.getName()",
      "vr.getUuid()",
      "nic.getIp()",
      "nic.getL3NetworkUuid()"
    ],
    "line": 55,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterCreateVipForPublicIpFlow.java"
  },
  {
    "raw": "virtual router[uuid:%s, state:%s] is not running, current HA has not been supported, please manually start this virtual router",
    "en_US": "virtual router[uuid:{0}, state:{1}] is not running, current HA has not been supported, please manually start this virtual router",
    "zh_CN": "云路由[uuid:{0}, state:{1}]没有运行，当前HA机制尚不支持，请手动启动该云路由。",
    "arguments": [
      "vipvo.getVirtualRouterVmUuid()",
      "vrState"
    ],
    "line": 171,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBackend.java"
  },
  {
    "raw": "failed to create vip%s on virtual router[uuid:%s], because %s",
    "en_US": "failed to create vip{0} on virtual router[uuid:{1}], because {2}",
    "zh_CN": "未能在云路由[uuid:{1}]上创建VIP{0}，因为{2}。",
    "arguments": [
      "tos",
      "vr.getUuid()",
      "ret.getError()"
    ],
    "line": 176,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBaseBackend.java"
  },
  {
    "raw": "failed to remove vip%s, because %s",
    "en_US": "failed to remove vip{0}, because {1}",
    "zh_CN": "未能移除VIP{0}，因为{1}。",
    "arguments": [
      "tos",
      "ret.getError()"
    ],
    "line": 141,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBaseBackend.java"
  },
  {
    "raw": "found a virtual router offering[uuid:%s] for L3Network[uuid:%s] in zone[uuid:%s]; however, the network\u0027s public network[uuid:%s] is not the same to VIP[uuid:%s]\u0027s; you may need to use system tag guestL3Network::l3NetworkUuid to specify a particular virtual router offering for the L3Network",
    "en_US": "found a virtual router offering[uuid:{0}] for L3Network[uuid:{1}] in zone[uuid:{2}]; however, the network\u0027s public network[uuid:{3}] is not the same to VIP[uuid:{4}]\u0027s; you may need to use system tag guestL3Network::l3NetworkUuid to specify a particular virtual router offering for the L3Network",
    "zh_CN": "在区域（zone）[uuid:{2}]内为L3网络[uuid:{1}]找到了一个云路由规格[uuid:{0}]；然而，其网络的公共网络[uuid:{3}]和VIP[uuid:{4}]的公共网络不一致。你可能需要使用系统标签[guestL3Network::l3NetworkUuid]为该L3网络指定一个特定的云路有规格。",
    "arguments": [
      "offering.getUuid()",
      "s.getL3Network().getUuid()",
      "s.getL3Network().getZoneUuid()",
      "self.getL3NetworkUuid()",
      "self.getUuid()"
    ],
    "line": 228,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBaseBackend.java"
  },
  {
    "raw": "virtual router[uuid:%s, state:%s] is not running",
    "en_US": "virtual router[uuid:{0}, state:{1}] is not running",
    "zh_CN": "云路由[uuid:{0}, state:{1}]没有运行。",
    "arguments": [
      "vipvo.getVirtualRouterVmUuid()",
      "vrState"
    ],
    "line": 196,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBaseBackend.java"
  },
  {
    "raw": "unable to ssh in to the vyos[%s], the ssh port seems not open",
    "en_US": "unable to ssh in to the vyos[{0}], the ssh port seems not open",
    "zh_CN": "未能通过ssh进入vyos[{0}]，ssh端口看起来没有打开。",
    "arguments": [
      "mgmtNicIp"
    ],
    "line": 87,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosDeployAgentFlow.java"
  },
  {
    "raw": "can not attach this pci device[uuid:%s] to vm[uuid:%s] due to host allocation",
    "en_US": "can not attach this pci device[uuid:{0}] to vm[uuid:{1}] due to host allocation",
    "zh_CN": "",
    "arguments": [
      "msg.getPciDeviceUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 326,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceManager.java"
  },
  {
    "raw": "can not migrate vm[uuid:%s] since pci device attached",
    "en_US": "can not migrate vm[uuid:{0}] since pci device attached",
    "zh_CN": "",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 530,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceManager.java"
  },
  {
    "raw": "cannot migrate root volume[uuid:%s] because there are pci devices attached",
    "en_US": "cannot migrate root volume[uuid:{0}] because there are pci devices attached",
    "zh_CN": "",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 567,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceManager.java"
  },
  {
    "raw": "The host [%s] has failed to enter the maintenance, The vm [%s] cannot migrate automatically because it contains the PCI device",
    "en_US": "The host [{0}] has failed to enter the maintenance, The vm [{1}] cannot migrate automatically because it contains the PCI device",
    "zh_CN": "",
    "arguments": [
      "inventory.getUuid()",
      "hasPciVmUuids.toString()"
    ],
    "line": 68,
    "fileName": "src/main/java/org/zstack/pciDevice/PciHostChangeStateExtension.java"
  },
  {
    "raw": "resourceUuid[%s] is not a valid uuid. A valid uuid is a UUID(v4 recommended) with \u0027-\u0027 stripped. see http://en.wikipedia.org/wiki/Universally_unique_identifier for format of UUID, the regular expression ZStack uses to validate a UUID is \u0027[0-9a-f]{8}[0-9a-f]{4}[1-5][0-9a-f]{3}[89ab][0-9a-f]{3}[0-9a-f]{12}\u0027",
    "en_US": "resourceUuid[{0}] is not a valid uuid. A valid uuid is a UUID(v4 recommended) with \u0027-\u0027 stripped. see http://en.wikipedia.org/wiki/Universally_unique_identifier for format of UUID, the regular expression ZStack uses to validate a UUID is \u0027[0-9a-f]{8}[0-9a-f]{4}[1-5][0-9a-f]{3}[89ab][0-9a-f]{3}[0-9a-f]{12}\u0027",
    "zh_CN": "资源UUID（）不是一个有效的uuid。一个有效的UUID是一个没有-的UUID（建议为UUIDv4）.格式参见http://en.wikipedia.org/wiki/Universally_unique_identifier，ZStack中验证一个UUID的正则表达式为：[0-9a-f]{8}[0-9a-f]{4}[1-5][0-9a-f]{3}[89ab][0-9a-f]{3}[0-9a-f]{12}。",
    "arguments": [
      "cmsg.getResourceUuid()"
    ],
    "line": 241,
    "fileName": "src/main/java/org/zstack/portal/apimediator/ApiMediatorImpl.java"
  },
  {
    "raw": "the relativeTime[%s] is invalid, it must be in format of, for example, 10s, 1h",
    "en_US": "the relativeTime[{0}] is invalid, it must be in format of, for example, 10s, 1h",
    "zh_CN": "相关时间[{0}]不合法,格式必须例如10s，1h",
    "arguments": [
      "msg.getRelativeTime()"
    ],
    "line": 41,
    "fileName": "src/main/java/org/zstack/prometheus/PrometheusApiInterceptor.java"
  },
  {
    "raw": "the relativeTime[%s] is invalid, it\u0027s too big",
    "en_US": "the relativeTime[{0}] is invalid, it\u0027s too big",
    "zh_CN": "相关时间[{0}]不合法，值\u0027s 过大",
    "arguments": [
      "msg.getRelativeTime()"
    ],
    "line": 45,
    "fileName": "src/main/java/org/zstack/prometheus/PrometheusApiInterceptor.java"
  },
  {
    "raw": "query failure; status code:%s,%s",
    "en_US": "query failure; status code:{0},{1}",
    "zh_CN": "查询失败；失败码为：{0},{1}",
    "arguments": [
      "rsp.getStatusCode()",
      "rsp.getBody()"
    ],
    "line": 426,
    "fileName": "src/main/java/org/zstack/prometheus/PrometheusManagerImpl.java"
  },
  {
    "raw": "the expression[%s] contains disallowed metric[%s]",
    "en_US": "the expression[{0}] contains disallowed metric[{1}]",
    "zh_CN": "表达[{0}]包含了不允许的度量[{1}]",
    "arguments": [
      "msg.getExpression()",
      "disallowedMetric"
    ],
    "line": 459,
    "fileName": "src/main/java/org/zstack/prometheus/PrometheusManagerImpl.java"
  },
  {
    "raw": "query failure, errorType:%s, error: %s",
    "en_US": "query failure, errorType:{0}, error: {1}",
    "zh_CN": "查询失败，错误类型：{0}, 错误：{1}",
    "arguments": [
      "ret.get(\"errorType\")",
      "ret.get(\"error\")"
    ],
    "line": 481,
    "fileName": "src/main/java/org/zstack/prometheus/PrometheusManagerImpl.java"
  },
  {
    "raw": "prometheus query error: %s",
    "en_US": "prometheus query error: {0}",
    "zh_CN": "",
    "arguments": [
      "ret.get(\"error\")"
    ],
    "line": 450,
    "fileName": "src/main/java/org/zstack/prometheus/PrometheusManagerImpl.java"
  },
  {
    "raw": "conflict alert rule[%s], there has been a rule[%s] with the same name",
    "en_US": "conflict alert rule[{0}], there has been a rule[{1}] with the same name",
    "zh_CN": "",
    "arguments": [
      "rb.name",
      "r"
    ],
    "line": 115,
    "fileName": "src/main/java/org/zstack/prometheus/monitoring/AlertRuleWriter.java"
  },
  {
    "raw": "ALERT:\n resource[name: %s, uuid: %s, type: %s]\nevent: %s %s %s\ncurrent value: %s\nduration: %s seconds\n",
    "en_US": "ALERT:\n resource[name: {0}, uuid: {1}, type: {2}]\nevent: {3} {4} {5}\ncurrent value: {6}\nduration: {7} seconds\n",
    "zh_CN": "",
    "arguments": [
      "resourceName",
      "resourceUuid",
      "toI18nString(resourceType)",
      "itemName",
      "toI18nString(expression.getOperator())",
      "expression.getConstant()",
      "value",
      "tvo.getDuration()"
    ],
    "line": 61,
    "fileName": "src/main/java/org/zstack/prometheus/monitoring/PrometheusAlert.java"
  },
  {
    "raw": "CPU Utilization",
    "en_US": "CPU Utilization",
    "zh_CN": "",
    "arguments": [],
    "line": 89,
    "fileName": "src/main/java/org/zstack/prometheus/monitoring/PrometheusHostCpuUtilAlertWriter.java"
  },
  {
    "raw": "CPU number",
    "en_US": "CPU number",
    "zh_CN": "",
    "arguments": [],
    "line": 96,
    "fileName": "src/main/java/org/zstack/prometheus/monitoring/PrometheusHostCpuUtilAlertWriter.java"
  },
  {
    "raw": "CPU utilization type",
    "en_US": "CPU utilization type",
    "zh_CN": "",
    "arguments": [],
    "line": 98,
    "fileName": "src/main/java/org/zstack/prometheus/monitoring/PrometheusHostCpuUtilAlertWriter.java"
  },
  {
    "raw": "invalid cpu[%s], the host[uuid:%s] doesn\u0027t have a CPU numbered by %s",
    "en_US": "invalid cpu[{0}], the host[uuid:{1}] doesn\u0027t have a CPU numbered by {2}",
    "zh_CN": "",
    "arguments": [
      "cpu",
      "trigger.getTargetResourceUuid()",
      "cpuNum"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/prometheus/monitoring/PrometheusHostCpuUtilItem.java"
  },
  {
    "raw": "Host Disk Capacity",
    "en_US": "Host Disk Capacity",
    "zh_CN": "",
    "arguments": [],
    "line": 92,
    "fileName": "src/main/java/org/zstack/prometheus/monitoring/PrometheusHostDiskCapacityAlertWriter.java"
  },
  {
    "raw": "Host Disk Capacity type",
    "en_US": "Host Disk Capacity type",
    "zh_CN": "",
    "arguments": [],
    "line": 98,
    "fileName": "src/main/java/org/zstack/prometheus/monitoring/PrometheusHostDiskCapacityAlertWriter.java"
  },
  {
    "raw": "Host devices",
    "en_US": "Host devices",
    "zh_CN": "",
    "arguments": [],
    "line": 100,
    "fileName": "src/main/java/org/zstack/prometheus/monitoring/PrometheusHostDiskCapacityAlertWriter.java"
  },
  {
    "raw": "Disk IO",
    "en_US": "Disk IO",
    "zh_CN": "",
    "arguments": [],
    "line": 88,
    "fileName": "src/main/java/org/zstack/prometheus/monitoring/PrometheusHostDiskIOAlertWriter.java"
  },
  {
    "raw": "Disk IO direction",
    "en_US": "Disk IO direction",
    "zh_CN": "",
    "arguments": [],
    "line": 94,
    "fileName": "src/main/java/org/zstack/prometheus/monitoring/PrometheusHostDiskIOAlertWriter.java"
  },
  {
    "raw": "Disk IO type",
    "en_US": "Disk IO type",
    "zh_CN": "",
    "arguments": [],
    "line": 95,
    "fileName": "src/main/java/org/zstack/prometheus/monitoring/PrometheusHostDiskIOAlertWriter.java"
  },
  {
    "raw": "Memory Utilization",
    "en_US": "Memory Utilization",
    "zh_CN": "",
    "arguments": [],
    "line": 78,
    "fileName": "src/main/java/org/zstack/prometheus/monitoring/PrometheusHostMemUtilAlertWriter.java"
  },
  {
    "raw": "Host",
    "en_US": "Host",
    "zh_CN": "",
    "arguments": [],
    "line": 79,
    "fileName": "src/main/java/org/zstack/prometheus/monitoring/PrometheusHostNetworkIOAlertWriter.java"
  },
  {
    "raw": "Network IO",
    "en_US": "Network IO",
    "zh_CN": "",
    "arguments": [],
    "line": 86,
    "fileName": "src/main/java/org/zstack/prometheus/monitoring/PrometheusHostNetworkIOAlertWriter.java"
  },
  {
    "raw": "Network IO direction",
    "en_US": "Network IO direction",
    "zh_CN": "",
    "arguments": [],
    "line": 91,
    "fileName": "src/main/java/org/zstack/prometheus/monitoring/PrometheusHostNetworkIOAlertWriter.java"
  },
  {
    "raw": "invalid type[%s], only %s are allowed",
    "en_US": "invalid type[{0}], only {1} are allowed",
    "zh_CN": "",
    "arguments": [
      "type",
      "ALLOWED_TYPES"
    ],
    "line": 21,
    "fileName": "src/main/java/org/zstack/prometheus/monitoring/PrometheusVmDiskIOItem.java"
  },
  {
    "raw": "invalid right value[%s], it must be a float or double number",
    "en_US": "invalid right value[{0}], it must be a float or double number",
    "zh_CN": "",
    "arguments": [
      "expression.getConstant()"
    ],
    "line": 53,
    "fileName": "src/main/java/org/zstack/prometheus/monitoring/PrometheusVmMemUtilItem.java"
  },
  {
    "raw": "invalid right value[%s], it must be float or double number greater than zero and lesser than one",
    "en_US": "invalid right value[{0}], it must be float or double number greater than zero and lesser than one",
    "zh_CN": "",
    "arguments": [
      "expression.getConstant()"
    ],
    "line": 49,
    "fileName": "src/main/java/org/zstack/prometheus/monitoring/PrometheusVmMemUtilItem.java"
  },
  {
    "raw": "invalid arguments %s, no argument is allowed",
    "en_US": "invalid arguments {0}, no argument is allowed",
    "zh_CN": "",
    "arguments": [
      "expression.getArguments().keySet()"
    ],
    "line": 47,
    "fileName": "src/main/java/org/zstack/prometheus/monitoring/PrometheusVmMemUtilItem.java"
  },
  {
    "raw": "Virtual Machine",
    "en_US": "Virtual Machine",
    "zh_CN": "",
    "arguments": [],
    "line": 79,
    "fileName": "src/main/java/org/zstack/prometheus/monitoring/PrometheusVmNetworkIOAlertWriter.java"
  },
  {
    "raw": "invalid right value[%s], it must be a number(int, long, float, double)",
    "en_US": "invalid right value[{0}], it must be a number(int, long, float, double)",
    "zh_CN": "",
    "arguments": [
      "expression.getConstant()"
    ],
    "line": 24,
    "fileName": "src/main/java/org/zstack/prometheus/monitoring/PrometheusVmNetworkIOItem.java"
  },
  {
    "raw": "invalid direction[%s], only %s are allowed",
    "en_US": "invalid direction[{0}], only {1} are allowed",
    "zh_CN": "",
    "arguments": [
      "dir",
      "ALLOWED_DIRECTION"
    ],
    "line": 20,
    "fileName": "src/main/java/org/zstack/prometheus/monitoring/PrometheusVmNetworkIOItem.java"
  },
  {
    "raw": "condition name[%s] is invalid, no such field on inventory class[%s]",
    "en_US": "condition name[{0}] is invalid, no such field on inventory class[{1}]",
    "zh_CN": "条件名[{0}]非法，在清单类里面没有这个阈",
    "arguments": [
      "attr",
      "inventoryClass.getName()"
    ],
    "line": 431,
    "fileName": "src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java"
  },
  {
    "raw": "condition name[%s] is invalid, field[%s] of inventory[%s] is annotated as @Unqueryable field",
    "en_US": "condition name[{0}] is invalid, field[{1}] of inventory[{2}] is annotated as @Unqueryable field",
    "zh_CN": "条件名[{0}]非法，清单[{2}]的值[{1}]不是被标记为@Unqueryable的值",
    "arguments": [
      "attr",
      "attr",
      "inventoryClass.getName()"
    ],
    "line": 436,
    "fileName": "src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java"
  },
  {
    "raw": "entity meta class[%s] has no field[%s]",
    "en_US": "entity meta class[{0}] has no field[{1}]",
    "zh_CN": "实体元类[{0}]中没有值[{1}]",
    "arguments": [
      "info.jpaMetaClass.getName()",
      "attr"
    ],
    "line": 447,
    "fileName": "src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java"
  },
  {
    "raw": "field[%s] is not a primitive of the inventory %s; you cannot specify it in the parameter \u0027fields\u0027;valid fields are %s",
    "en_US": "field[{0}] is not a primitive of the inventory {1}; you cannot specify it in the parameter \u0027fields\u0027;valid fields are {2}",
    "zh_CN": "值[{0}]不是清单{1}的原语；你不能在参数\u0027域\u0027中指定该参数；非法的域{2}",
    "arguments": [
      "f",
      "info.inventoryClass.getSimpleName()",
      "info.premitiveFieldNames"
    ],
    "line": 999,
    "fileName": "src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java"
  },
  {
    "raw": "\u0027value\u0027 of query condition %s cannot be null",
    "en_US": "\u0027value\u0027 of query condition {0} cannot be null",
    "zh_CN": "查询条件中{0}的\u0027值\u0027不能为空",
    "arguments": [
      "JSONObjectUtil.toJsonString(cond)"
    ],
    "line": 257,
    "fileName": "src/main/java/org/zstack/query/QueryFacadeImpl.java"
  },
  {
    "raw": "Can not add job[uuid:%s] twice to the same trigger[uuid:%s]",
    "en_US": "Can not add job[uuid:{0}] twice to the same trigger[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getSchedulerJobUuid()",
      "msg.getSchedulerTriggerUuid()"
    ],
    "line": 69,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "Can not add job[uuid:%s] to a out of time trigger[uuid:%s]",
    "en_US": "Can not add job[uuid:{0}] to a out of time trigger[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getSchedulerJobUuid()",
      "msg.getSchedulerTriggerUuid()"
    ],
    "line": 67,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "stopTime has been passed",
    "en_US": "stopTime has been passed",
    "zh_CN": "",
    "arguments": [],
    "line": 96,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "vm[uuid:%s] changed state to Running from Unknown, resume all its scheduler job",
    "en_US": "vm[uuid:{0}] changed state to Running from Unknown, resume all its scheduler job",
    "zh_CN": "",
    "arguments": [
      "vm.getUuid()"
    ],
    "line": 692,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerFacadeImpl.java"
  },
  {
    "raw": "vm[uuid:%s] changed state to Unknown from Running, pause all its scheduler job",
    "en_US": "vm[uuid:{0}] changed state to Unknown from Running, pause all its scheduler job",
    "zh_CN": "",
    "arguments": [
      "vm.getUuid()"
    ],
    "line": 685,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerFacadeImpl.java"
  },
  {
    "raw": "Create snap shot of volume[uuid:%s] failed [executed time:%s]",
    "en_US": "Create snap shot of volume[uuid:{0}] failed [executed time:{1}]",
    "zh_CN": "",
    "arguments": [
      "volumeUuid",
      "new Date().toString()"
    ],
    "line": 62,
    "fileName": "src/main/java/org/zstack/scheduler/storage/volume/snapshot/CreateVolumeSnapshotJob.java"
  },
  {
    "raw": "Create snap shot of volume[uuid:%s] succeed [executed time:%s]",
    "en_US": "Create snap shot of volume[uuid:{0}] succeed [executed time:{1}]",
    "zh_CN": "",
    "arguments": [
      "volumeUuid",
      "new Date().toString()"
    ],
    "line": 59,
    "fileName": "src/main/java/org/zstack/scheduler/storage/volume/snapshot/CreateVolumeSnapshotJob.java"
  },
  {
    "raw": "Reboot vm instance job for vm[uuid:%s] failed [executed time:%s]",
    "en_US": "Reboot vm instance job for vm[uuid:{0}] failed [executed time:{1}]",
    "zh_CN": "",
    "arguments": [
      "vmUuid",
      "new Date().toString()"
    ],
    "line": 51,
    "fileName": "src/main/java/org/zstack/scheduler/vm/RebootVmInstanceJob.java"
  },
  {
    "raw": "Reboot vm instance job for vm[uuid:%s] succeed [executed time:%s]",
    "en_US": "Reboot vm instance job for vm[uuid:{0}] succeed [executed time:{1}]",
    "zh_CN": "",
    "arguments": [
      "vmUuid",
      "new Date().toString()"
    ],
    "line": 48,
    "fileName": "src/main/java/org/zstack/scheduler/vm/RebootVmInstanceJob.java"
  },
  {
    "raw": "Start vm instance job for vm[uuid:%s] failed [executed time:%s]",
    "en_US": "Start vm instance job for vm[uuid:{0}] failed [executed time:{1}]",
    "zh_CN": "",
    "arguments": [
      "vmUuid",
      "new Date().toString()"
    ],
    "line": 52,
    "fileName": "src/main/java/org/zstack/scheduler/vm/StartVmInstanceJob.java"
  },
  {
    "raw": "Start vm instance job for vm[uuid:%s] succeed [executed time:%s]",
    "en_US": "Start vm instance job for vm[uuid:{0}] succeed [executed time:{1}]",
    "zh_CN": "",
    "arguments": [
      "vmUuid",
      "new Date().toString()"
    ],
    "line": 49,
    "fileName": "src/main/java/org/zstack/scheduler/vm/StartVmInstanceJob.java"
  },
  {
    "raw": "Stop vm instance job for vm[uuid:%s] failed [executed time:%s]",
    "en_US": "Stop vm instance job for vm[uuid:{0}] failed [executed time:{1}]",
    "zh_CN": "",
    "arguments": [
      "vmUuid",
      "new Date().toString()"
    ],
    "line": 55,
    "fileName": "src/main/java/org/zstack/scheduler/vm/StopVmInstanceJob.java"
  },
  {
    "raw": "Stop vm instance job for vm[uuid:%s] succeed [executed time:%s]",
    "en_US": "Stop vm instance job for vm[uuid:{0}] succeed [executed time:{1}]",
    "zh_CN": "",
    "arguments": [
      "vmUuid",
      "new Date().toString()"
    ],
    "line": 52,
    "fileName": "src/main/java/org/zstack/scheduler/vm/StopVmInstanceJob.java"
  },
  {
    "raw": "%s should not be null",
    "en_US": "{0} should not be null",
    "zh_CN": "{0} 不能为空",
    "arguments": [
      "name"
    ],
    "line": 64,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java"
  },
  {
    "raw": "zoneUuids, backupStorageUuids must have at least one be none-empty list, or all is set to true",
    "en_US": "zoneUuids, backupStorageUuids must have at least one be none-empty list, or all is set to true",
    "zh_CN": "zoneUuids, backupStorageUuids 至少有一个不为空，或者all被设置为真 ",
    "arguments": [],
    "line": 87,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java"
  },
  {
    "raw": "backup storage[uuid:%s] has not been attached to zone[uuid:%s]",
    "en_US": "backup storage[uuid:{0}] has not been attached to zone[uuid:{1}]",
    "zh_CN": "镜像服务器[uuid:{0}]没有被加载到zone[uuid:{1}]",
    "arguments": [
      "msg.getBackupStorageUuid()",
      "msg.getZoneUuid()"
    ],
    "line": 117,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java"
  },
  {
    "raw": "backup storage[uuid:%s] has been attached to zone[uuid:%s]",
    "en_US": "backup storage[uuid:{0}] has been attached to zone[uuid:{1}]",
    "zh_CN": "镜像服务器[uuid:{0}]已经被加载到zone[uuid:{1}]",
    "arguments": [
      "msg.getBackupStorageUuid()",
      "msg.getZoneUuid()"
    ],
    "line": 126,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java"
  },
  {
    "raw": "cannot get image. The image url is %s. Exception is %s",
    "en_US": "cannot get image. The image url is {0}. Exception is {1}",
    "zh_CN": "无法取得镜像。镜像的url是{0}，抛出的错误为{1}",
    "arguments": [
      "url",
      "e.toString()"
    ],
    "line": 131,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageBase.java"
  },
  {
    "raw": "the backup storage[uuid:%s, name:%s] has not enough capacity to download the image[%s].Required size:%s, available size:%s",
    "en_US": "the backup storage[uuid:{0}, name:{1}] has not enough capacity to download the image[{2}].Required size:{3}, available size:{4}",
    "zh_CN": "镜像服务器[uuid:{0}, name:{1}]没有足够的容量可供下载镜像[{2}]。需要的大小：{3}，可用的大小：{4}",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "url",
      "size",
      "self.getAvailableCapacity()"
    ],
    "line": 139,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageBase.java"
  },
  {
    "raw": "backup storage cannot proceed message[%s] because its status is %s",
    "en_US": "backup storage cannot proceed message[{0}] because its status is {1}",
    "zh_CN": "镜像服务器无法处理消息[{0}]因为它的状态为{1}",
    "arguments": [
      "msg.getClass().getName()",
      "self.getStatus()"
    ],
    "line": 154,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageBase.java"
  },
  {
    "raw": "backup storage cannot proceed message[%s] because its state is %s",
    "en_US": "backup storage cannot proceed message[{0}] because its state is {1}",
    "zh_CN": "镜像服务器无法处理消息[{0}]因为它的状态为{1}",
    "arguments": [
      "msg.getClass().getName()",
      "self.getState()"
    ],
    "line": 160,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageBase.java"
  },
  {
    "raw": "cannot reserve %s on the backup storage[uuid:%s], it only has %s available",
    "en_US": "cannot reserve {0} on the backup storage[uuid:{1}], it only has {2} available",
    "zh_CN": "无法在镜像服务器{1}保留{0}，它仅有{2}可用容量",
    "arguments": [
      "size",
      "backupStorageUuid",
      "capacityVO.getAvailableCapacity()"
    ],
    "line": 139,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageCapacityUpdater.java"
  },
  {
    "raw": "capacity reservation on all backup storage failed",
    "en_US": "capacity reservation on all backup storage failed",
    "zh_CN": "在所有镜像服务器上保留容量失败",
    "arguments": [],
    "line": 302,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageManagerImpl.java"
  },
  {
    "raw": "after subtracting reserved capacity[%s], no backup storage has required capacity[%s bytes]",
    "en_US": "after subtracting reserved capacity[{0}], no backup storage has required capacity[{1} bytes]",
    "zh_CN": "在减去保留容量[{0}]，没有镜像服务器有容量[{1}] bytes",
    "arguments": [
      "BackupStorageGlobalConfig.RESERVED_CAPACITY.value()",
      "spec.getSize()"
    ],
    "line": 46,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageReservedCapacityAllocatorFlow.java"
  },
  {
    "raw": "unable to commit backup storage specified by uuids: %s, becasue: %s",
    "en_US": "unable to commit backup storage specified by uuids: {0}, becasue: {1}",
    "zh_CN": "无法向镜像服务器[uuids:{0}]提交数据，因为：{1}",
    "arguments": [
      "String.join(\",\", msg.getBackupStorageUuids())",
      "errorCodes.get(0).getCause().getDetails()"
    ],
    "line": 303,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/CommitVolumeAsImageFlowChain.java"
  },
  {
    "raw": "unable to connect to SimpleHttpBackupStorage[url:%s], because %s",
    "en_US": "unable to connect to SimpleHttpBackupStorage[url:{0}], because {1}",
    "zh_CN": "无法连接到SimpleHttpBackupStorage[url:{0}]，因为{1}",
    "arguments": [
      "url",
      "rsp.getError()"
    ],
    "line": 154,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "commercial license is required to use ImageStore",
    "en_US": "commercial license is required to use ImageStore",
    "zh_CN": "",
    "arguments": [],
    "line": 153,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "Missing cert file for downloading image: %s",
    "en_US": "Missing cert file for downloading image: {0}",
    "zh_CN": "",
    "arguments": [
      "iinv.getName()"
    ],
    "line": 317,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "No response",
    "en_US": "No response",
    "zh_CN": "",
    "arguments": [],
    "line": 468,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "image store [%s] cannot add image, because it is used for backup remote",
    "en_US": "image store [{0}] cannot add image, because it is used for backup remote",
    "zh_CN": "",
    "arguments": [],
    "line": 731,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "the uuid of imagestoreBackupStorage agent changed[expected:%s, actual:%s], it\u0027s most likely the agent was manually restarted. Issue a reconnect to sync the status",
    "en_US": "the uuid of imagestoreBackupStorage agent changed[expected:{0}, actual:{1}], it\u0027s most likely the agent was manually restarted. Issue a reconnect to sync the status",
    "zh_CN": "镜像镜像服务器的代理的uuid发生了改变[期望：{0}，实际：{1}]，很有可能代理被手动重启了，需要重连同步状态",
    "arguments": [
      "self.getUuid()",
      "ret.getUuid()"
    ],
    "line": 638,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "hostname[%s] is neither an IPv4 address nor a valid hostname",
    "en_US": "hostname[{0}] is neither an IPv4 address nor a valid hostname",
    "zh_CN": "主机名[{0}]不是一个IPv4的地址，而是一个非法的主机名",
    "arguments": [
      "msg.getHostname()"
    ],
    "line": 61,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "dst backupstorage[%s] already contains it, which uuid is: [%s]",
    "en_US": "dst backupstorage[{0}] already contains it, which uuid is: [{1}]",
    "zh_CN": "",
    "arguments": [
      "bsUuid",
      "imageUuid"
    ],
    "line": 51,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "src backupstorage[%s] doesn\u0027t contain image[%s]",
    "en_US": "src backupstorage[{0}] doesn\u0027t contain image[{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getSrcBackupStorageUuid()",
      "msg.getUuid()"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "duplicate backup storage. There has been an image store backup storage[hostname:%s]",
    "en_US": "duplicate backup storage. There has been an image store backup storage[hostname:{0}]",
    "zh_CN": "重复的镜像服务器。已经存在一个镜像服务器[主机名：{0}]",
    "arguments": [
      "msg.getHostname()"
    ],
    "line": 67,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "file path needed",
    "en_US": "file path needed",
    "zh_CN": "需要文件路径",
    "arguments": [],
    "line": 72,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "absolute file path required: %s",
    "en_US": "absolute file path required: {0}",
    "zh_CN": "需要文件的绝对路径；{0}",
    "arguments": [
      "dir"
    ],
    "line": 76,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "the url contains an invalid folder[/dev or /proc or /sys]",
    "en_US": "the url contains an invalid folder[/dev or /proc or /sys]",
    "zh_CN": "URL包含了一个无效的目录[/dev or /proc or /sys]。",
    "arguments": [],
    "line": 80,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "file path contains invalid character: %s",
    "en_US": "file path contains invalid character: {0}",
    "zh_CN": "文件路径包含非法字符：{0}",
    "arguments": [
      "dir"
    ],
    "line": 85,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "invalid url[%s], the url must be an absolute path starting with \u0027/\u0027",
    "en_US": "invalid url[{0}], the url must be an absolute path starting with \u0027/\u0027",
    "zh_CN": "无效的url[{0}]，url必须是以\u0027/\u0027开头的绝对路径",
    "arguments": [
      "amsg.getUrl()"
    ],
    "line": 78,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java"
  },
  {
    "raw": "existing SimpleHttpBackupStorage with hostname[%s] found",
    "en_US": "existing SimpleHttpBackupStorage with hostname[{0}] found",
    "zh_CN": "存在主机名为[{0}]的简单http镜像服务器",
    "arguments": [
      "hostname"
    ],
    "line": 87,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java"
  },
  {
    "raw": "ansible mkdir failed, due to: %s",
    "en_US": "ansible mkdir failed, due to: {0}",
    "zh_CN": "",
    "arguments": [
      "result.getStderr()"
    ],
    "line": 91,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java"
  },
  {
    "raw": "ansible failed, due to: %s",
    "en_US": "ansible failed, due to: {0}",
    "zh_CN": "",
    "arguments": [
      "result.getStderr()"
    ],
    "line": 103,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java"
  },
  {
    "raw": "ansible attach nas failed, due to: %s",
    "en_US": "ansible attach nas failed, due to: {0}",
    "zh_CN": "",
    "arguments": [
      "result.getStdout()"
    ],
    "line": 101,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java"
  },
  {
    "raw": "create tmp file [%s] failed, due to: %s",
    "en_US": "create tmp file [{0}] failed, due to: {1}",
    "zh_CN": "",
    "arguments": [
      "tmpHostFile",
      "result.getStderr()"
    ],
    "line": 313,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageManagerImpl.java"
  },
  {
    "raw": "sync status failed.",
    "en_US": "sync status failed.",
    "zh_CN": "",
    "arguments": [],
    "line": 152,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageManagerImpl.java"
  },
  {
    "raw": "delete image metadata file failed: %s",
    "en_US": "delete image metadata file failed: {0}",
    "zh_CN": "删除镜像元数据文件失败：{0}",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 498,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "AddImage is forbidden in Disaster BS: [%s]",
    "en_US": "AddImage is forbidden in Disaster BS: [{0}]",
    "zh_CN": "",
    "arguments": [
      "bsUuid"
    ],
    "line": 297,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "Check image metadata file: %s failed",
    "en_US": "Check image metadata file: {0} failed",
    "zh_CN": "检查镜像元数据文件：{0}失败",
    "arguments": [
      "rsp.getBackupStorageMetaFileName()"
    ],
    "line": 455,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "Create image metadata file : %s failed",
    "en_US": "Create image metadata file : {0} failed",
    "zh_CN": "创建镜像元数据文件：{0}失败",
    "arguments": [
      "rsp.getBackupStorageMetaFileName()"
    ],
    "line": 320,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "Create image metadata file sync : %s failed",
    "en_US": "Create image metadata file sync : {0} failed",
    "zh_CN": "",
    "arguments": [
      "rsp.getBackupStorageMetaFileName()"
    ],
    "line": 450,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "Image metadata file: %s is not exist",
    "en_US": "Image metadata file: {0} is not exist",
    "zh_CN": "镜像元数据文件：{0}不存在",
    "arguments": [
      "rsp.getBackupStorageMetaFileName()"
    ],
    "line": 460,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "parse create time error: %s",
    "en_US": "parse create time error: {0}",
    "zh_CN": "",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreImageStruct.java"
  },
  {
    "raw": "SftpBackupStorage doesn\u0027t support scheme[%s] in url[%s]",
    "en_US": "SftpBackupStorage doesn\u0027t support scheme[{0}] in url[{1}]",
    "zh_CN": "Sftp镜像服务器不支持在url[{1}]里包含scheme[{0}]",
    "arguments": [
      "scheme",
      "url"
    ],
    "line": 100,
    "fileName": "src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorage.java"
  },
  {
    "raw": "the uuid of sftpBackupStorage agent changed[expected:%s, actual:%s], it\u0027s most likely the agent was manually restarted. Issue a reconnect to sync the status",
    "en_US": "the uuid of sftpBackupStorage agent changed[expected:{0}, actual:{1}], it\u0027s most likely the agent was manually restarted. Issue a reconnect to sync the status",
    "zh_CN": "Sftp镜像镜像服务器的代理的uuid发生了改变[期望：{0}，实际：{1}]，很有可能代理被手动重启了，需要重连同步状态",
    "arguments": [
      "self.getUuid()",
      "ret.getUuid()"
    ],
    "line": 272,
    "fileName": "src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorage.java"
  },
  {
    "raw": " the url contains an invalid folder[/dev or /proc or /sys]",
    "en_US": " the url contains an invalid folder[/dev or /proc or /sys]",
    "zh_CN": "URL包含了一个无效的目录[/dev or /proc or /sys]。",
    "arguments": [],
    "line": 73,
    "fileName": "src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "duplicate backup storage. There has been a sftp backup storage[hostname:%s] existing",
    "en_US": "duplicate backup storage. There has been a sftp backup storage[hostname:{0}] existing",
    "zh_CN": "重复的镜像服务器。已经存在一个镜像服务器[主机名：{0}]",
    "arguments": [
      "msg.getHostname()"
    ],
    "line": 69,
    "fileName": "src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "check image metadata file: %s failed",
    "en_US": "check image metadata file: {0} failed",
    "zh_CN": "检查镜像元数据文件：{0}失败",
    "arguments": [
      "rsp.getBackupStorageMetaFileName()"
    ],
    "line": 466,
    "fileName": "src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "create image metadata file : %s failed",
    "en_US": "create image metadata file : {0} failed",
    "zh_CN": "创建镜像元数据文件：{0}失败",
    "arguments": [
      "rsp.getBackupStorageMetaFileName()"
    ],
    "line": 327,
    "fileName": "src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "image metadata file: %s is not exist",
    "en_US": "image metadata file: {0} is not exist",
    "zh_CN": "镜像元数据文件：{0}不存在",
    "arguments": [
      "rsp.getBackupStorageMetaFileName()"
    ],
    "line": 471,
    "fileName": "src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "Ceph pool[uuid:%s] with this name is already added into ZStack and used elsewhere, cannot reuse the ceph pool.",
    "en_US": "Ceph pool[uuid:{0}] with this name is already added into ZStack and used elsewhere, cannot reuse the ceph pool.",
    "zh_CN": "池名称为此的扩展池[uuid:{0}]已经被添加进 ZStack 了，已做它用，不能复用该扩展池。",
    "arguments": [
      "msg.getPoolName()",
      "duplicatePoolUuid"
    ],
    "line": 89,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "creation failure, duplicate poolName[%s]. There has been a pool[uuid:%s] with the same name existing.",
    "en_US": "creation failure, duplicate poolName[{0}]. There has been a pool[uuid:{1}] with the same name existing.",
    "zh_CN": "创建失败，重复的池名称[{0}]。已经有一个相同名称的扩展池[uuid:{1}]存在",
    "arguments": [
      "msg.getPoolName()",
      "duplicatePoolUuid"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "cannot add ceph primary storage, there has been some ceph primary storage using mon[hostnames:%s]",
    "en_US": "cannot add ceph primary storage, there has been some ceph primary storage using mon[hostnames:{0}]",
    "zh_CN": "无法添加ceph主存储，一定有某些ceph主存储使用了mon[主机名：{0}]",
    "arguments": [
      "existing"
    ],
    "line": 81,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "Adding the same Mon node is not allowed",
    "en_US": "Adding the same Mon node is not allowed",
    "zh_CN": "",
    "arguments": [],
    "line": 116,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "invalid monUrl[%s]. A valid url is in format of %s",
    "en_US": "invalid monUrl[{0}]. A valid url is in format of {1}",
    "zh_CN": "非法的monUrl[{0}]. 格式为{1}的非法url",
    "arguments": [
      "monUrl",
      "MON_URL_FORMAT"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "dataVolumePoolName can be null but cannot be an empty string",
    "en_US": "dataVolumePoolName can be null but cannot be an empty string",
    "zh_CN": "数据盘池名可以为空但是不能为一个空字符串",
    "arguments": [],
    "line": 134,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "rootVolumePoolName can be null but cannot be an empty string",
    "en_US": "rootVolumePoolName can be null but cannot be an empty string",
    "zh_CN": "根数据盘池名可以为空但是不能为一个空字符串",
    "arguments": [],
    "line": 139,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "imageCachePoolName can be null but cannot be an empty string",
    "en_US": "imageCachePoolName can be null but cannot be an empty string",
    "zh_CN": "镜像缓存池名可以为空但是不能为空字符串",
    "arguments": [],
    "line": 144,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "cannot add ceph backup storage, there has been some ceph backup storage using mon[hostnames:%s]",
    "en_US": "cannot add ceph backup storage, there has been some ceph backup storage using mon[hostnames:{0}]",
    "zh_CN": "无法添加ceph镜像服务器，已经有某个ceph镜像服务器使用mon[主机名：{0}]",
    "arguments": [
      "existing"
    ],
    "line": 167,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "poolName is required when importImages is true",
    "en_US": "poolName is required when importImages is true",
    "zh_CN": "当importImages为真的时候必须填写池名",
    "arguments": [],
    "line": 175,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "poolName can be null but cannot be an empty string",
    "en_US": "poolName can be null but cannot be an empty string",
    "zh_CN": "池名可以为空但是不能是空的字符串",
    "arguments": [],
    "line": 173,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "The problem may be caused by an incorrect user name or password or SSH port",
    "en_US": "The problem may be caused by an incorrect user name or password or SSH port",
    "zh_CN": "",
    "arguments": [],
    "line": 51,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephMonBase.java"
  },
  {
    "raw": "all ceph mons are Disconnected in ceph backup storage[uuid:%s]",
    "en_US": "all ceph mons are Disconnected in ceph backup storage[uuid:{0}]",
    "zh_CN": "所有在ceph镜像服务器[uuid:{0}]的监控节点都处于失联状态",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 436,
    "fileName": "src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java"
  },
  {
    "raw": "unable to connect to the ceph backup storage[uuid:%s]. Failed to connect all ceph mons. Errors are %s",
    "en_US": "unable to connect to the ceph backup storage[uuid:{0}]. Failed to connect all ceph mons. Errors are {1}",
    "zh_CN": "无法连接到ceph镜像服务器[uuid:{0}]。所有监控节点均无法连接。错误是{1}",
    "arguments": [
      "self.getUuid()",
      "JSONObjectUtil.toJsonString(errorCodes)"
    ],
    "line": 839,
    "fileName": "src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java"
  },
  {
    "raw": "there is another CEPH backup storage[name:%s, uuid:%s] with the same FSID[%s], you cannot add the same CEPH setup as two different backup storage",
    "en_US": "there is another CEPH backup storage[name:{0}, uuid:{1}] with the same FSID[{2}], you cannot add the same CEPH setup as two different backup storage",
    "zh_CN": "有另外一个CEPH镜像服务器[name:{0}, uuid:{1}]有相同的FSID[{2}]，你不能添加同样的CEPH为两个不同的镜像服务器",
    "arguments": [
      "otherCeph.getName()",
      "otherCeph.getUuid()",
      "fsId"
    ],
    "line": 926,
    "fileName": "src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java"
  },
  {
    "raw": "unable to add mon to ceph backup storage",
    "en_US": "unable to add mon to ceph backup storage",
    "zh_CN": "在ceph镜像服务器上添加监控节点失败",
    "arguments": [],
    "line": 1330,
    "fileName": "src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java"
  },
  {
    "raw": "cannot update status of the ceph backup storage mon[uuid:%s], it has been deleted.This error can be ignored",
    "en_US": "cannot update status of the ceph backup storage mon[uuid:{0}], it has been deleted.This error can be ignored",
    "zh_CN": "无法更新ceph镜像服务器监控节点[uuid:{0}]，他已经被删除。这个错误可以被忽略",
    "arguments": [
      "uuid"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageMonBase.java"
  },
  {
    "raw": "all mons failed to execute http call[%s], errors are %s",
    "en_US": "all mons failed to execute http call[{0}], errors are {1}",
    "zh_CN": "所有的监控节点都无法执行http call[{0}]，错误是{1}",
    "arguments": [
      "path",
      "JSONObjectUtil.toJsonString(errorCodes)"
    ],
    "line": 1658,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "unable to connect mons",
    "en_US": "unable to connect mons",
    "zh_CN": "无法连接到mons",
    "arguments": [],
    "line": 2262,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "the mon[ip:%s] returns a fsid[%s] different from the current fsid[%s] of the cep cluster,are you adding a mon not belonging to current cluster mistakenly?",
    "en_US": "the mon[ip:{0}] returns a fsid[{1}] different from the current fsid[{2}] of the cep cluster,are you adding a mon not belonging to current cluster mistakenly?",
    "zh_CN": "mon[ip:{0}]返回了一个fsid[{1}]和当前ceph集群的fsid[{2}]不同，你是否错误地添加了一个不属于当前集群的mon？",
    "arguments": [
      "base.getSelf().getHostname()",
      "fsid",
      "getSelf().getFsid()"
    ],
    "line": 2325,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "the backup storage[uuid:%s, name:%s, fsid:%s] is not in the same ceph cluster with the primary storage[uuid:%s, name:%s, fsid:%s]",
    "en_US": "the backup storage[uuid:{0}, name:{1}, fsid:{2}] is not in the same ceph cluster with the primary storage[uuid:{3}, name:{4}, fsid:{5}]",
    "zh_CN": "镜像服务器[uuid:{0}, name:{1}, fsid:{2}]和主存储[uuid:{3}, name:{4}, fsid:{5}]不在同一个ceph集群中",
    "arguments": [
      "backupStorage.getUuid()",
      "backupStorage.getName()",
      "bsFsid",
      "self.getUuid()",
      "self.getName()",
      "getSelf().getFsid()"
    ],
    "line": 924,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "all ceph mons of primary storage[uuid:%s] are not in Connected state",
    "en_US": "all ceph mons of primary storage[uuid:{0}] are not in Connected state",
    "zh_CN": "Ceph主存储[uuid:{0}]所有的监控节点都不是已连接状态",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 1645,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "ceph primary storage[uuid:%s] may have been deleted.",
    "en_US": "ceph primary storage[uuid:{0}] may have been deleted.",
    "zh_CN": "Ceph主存储[uuid:{0}]可能已经被删除。",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 1794,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "unable to connect to the ceph primary storage[uuid:%s]. Failed to connect all ceph mons. Errors are %s",
    "en_US": "unable to connect to the ceph primary storage[uuid:{0}]. Failed to connect all ceph mons. Errors are {1}",
    "zh_CN": "无法连接到ceph主存储[uuid:{0}]。所有监控节点均连接失败。错误是{1}",
    "arguments": [
      "self.getUuid()",
      "JSONObjectUtil.toJsonString(errorCodes)"
    ],
    "line": 1715,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "the fsid returned by mons are mismatching, it seems the mons belong to different ceph clusters:\\n",
    "en_US": "the fsid returned by mons are mismatching, it seems the mons belong to different ceph clusters:\\n",
    "zh_CN": "监控节点返回的fsid不匹配，似乎监控节点属于不同的ceph集群",
    "arguments": [],
    "line": 1786,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "there is another CEPH primary storage[name:%s, uuid:%s] with the same FSID[%s], you cannot add the same CEPH setup as two different primary storage",
    "en_US": "there is another CEPH primary storage[name:{0}, uuid:{1}] with the same FSID[{2}], you cannot add the same CEPH setup as two different primary storage",
    "zh_CN": "有另外一个CEPH主存储[name:{0}, uuid:{1}] 有相同的 FSID[{2}]，你不能添加相同的CEPH设置到两个不同的主存储",
    "arguments": [
      "otherCeph.getName()",
      "otherCeph.getUuid()",
      "fsId"
    ],
    "line": 1804,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "failed to reconnect the mon[uuid:%s] server of the ceph primary storage[uuid:%s, name:%s], %s",
    "en_US": "failed to reconnect the mon[uuid:{0}] server of the ceph primary storage[uuid:{1}, name:{2}], {3}",
    "zh_CN": "重连ceph主存储[uuid:{1}, name:{2}]的mon服务[uuid:{0}]失败，错误细节：{3}。",
    "arguments": [
      "mon.getSelf().getUuid()",
      "self.getUuid()",
      "self.getName()",
      "errorCode"
    ],
    "line": 2119,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "the ceph primary storage[uuid:%s, name:%s] is down, as one mon[uuid:%s] reports an operation failure[%s]",
    "en_US": "the ceph primary storage[uuid:{0}, name:{1}] is down, as one mon[uuid:{2}] reports an operation failure[{3}]",
    "zh_CN": "ceph主存储[uuid:{0}, name:{1}]关闭，因为一个mon[uuid:{2}]报告了一个操作失败[{3}]",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "mon.getSelf().getUuid()",
      "res.error"
    ],
    "line": 2028,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "unable to add mon to ceph primary storage",
    "en_US": "unable to add mon to ceph primary storage",
    "zh_CN": "无法添加mon到ceph主存储",
    "arguments": [],
    "line": 2306,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "unable to upload bits to the backup storage[type:%s], we only support CEPH",
    "en_US": "unable to upload bits to the backup storage[type:{0}], we only support CEPH",
    "zh_CN": "",
    "arguments": [
      "bsType"
    ],
    "line": 3053,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "backing up snapshots to backup storage is a depreciated feature, which will be removed in future version",
    "en_US": "backing up snapshots to backup storage is a depreciated feature, which will be removed in future version",
    "zh_CN": "备份快照到镜像服务器是一个弃用的功能，将会在未来版本中被移除",
    "arguments": [],
    "line": 2541,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "cannot find any Connected ceph mon for the primary storage[uuid:%s]",
    "en_US": "cannot find any Connected ceph mon for the primary storage[uuid:{0}]",
    "zh_CN": "无法为Ceph主存储[uuid:{0}]找到一台处于Connected状态的的监控节点",
    "arguments": [
      "vol.getPrimaryStorageUuid()"
    ],
    "line": 256,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot update status of the ceph primary storage mon[uuid:%s], it has been deleted.This error can be ignored",
    "en_US": "cannot update status of the ceph primary storage mon[uuid:{0}], it has been deleted.This error can be ignored",
    "zh_CN": "不能更新一台已经被删除的Ceph主存储监控节点[uuid:{0}]，这个错误可被忽略",
    "arguments": [
      "uuid"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageMonBase.java"
  },
  {
    "raw": "fusionstor primary storage[uuid:%s] may have been deleted.",
    "en_US": "fusionstor primary storage[uuid:{0}] may have been deleted.",
    "zh_CN": "Fusionstor主存储[uuid:{0}]可能已经被删除。",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 1661,
    "fileName": "src/main/java/org/zstack/storage/fusionstor/primary/FusionstorPrimaryStorageBase.java"
  },
  {
    "raw": "the total capacity of the fusionstor primary is wrong, uuid[%s]",
    "en_US": "the total capacity of the fusionstor primary is wrong, uuid[{0}]",
    "zh_CN": "",
    "arguments": [
      "cap.getUuid()"
    ],
    "line": 183,
    "fileName": "src/main/java/org/zstack/storage/fusionstor/primary/FusionstorPrimaryStorageFactory.java"
  },
  {
    "raw": "Source BS and Destination BS cannot be the same.",
    "en_US": "Source BS and Destination BS cannot be the same.",
    "zh_CN": "",
    "arguments": [],
    "line": 92,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Source BS and Destination BS must not be Disabled.",
    "en_US": "Source BS and Destination BS must not be Disabled.",
    "zh_CN": "",
    "arguments": [],
    "line": 100,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Image[uuid:%s] is not in status Ready, cannot migrate it.",
    "en_US": "Image[uuid:{0}] is not in status Ready, cannot migrate it.",
    "zh_CN": "",
    "arguments": [
      "msg.getImageUuid()"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Image[uuid:%s] is not in source backup storage[uuid:%s]",
    "en_US": "Image[uuid:{0}] is not in source backup storage[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getImageUuid()",
      "msg.getSrcBackupStorageUuid()"
    ],
    "line": 118,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Cannot migrate image from %s to %s.",
    "en_US": "Cannot migrate image from {0} to {1}.",
    "zh_CN": "",
    "arguments": [
      "srcBS.getType()",
      "dstBS.getType()"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Source PS and Destination PS must not be Disabled or Maintenance state.",
    "en_US": "Source PS and Destination PS must not be Disabled or Maintenance state.",
    "zh_CN": "",
    "arguments": [],
    "line": 148,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Volume[uuid:%s] is already in PS[uuid:%s], cannot migrate.",
    "en_US": "Volume[uuid:{0}] is already in PS[uuid:{1}], cannot migrate.",
    "zh_CN": "",
    "arguments": [
      "msg.getVolumeUuid()",
      "msg.getDstPrimaryStorageUuid()"
    ],
    "line": 155,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Volume[uuid:%s] is not in status Ready, cannot migrate it.",
    "en_US": "Volume[uuid:{0}] is not in status Ready, cannot migrate it.",
    "zh_CN": "",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 162,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s] is still attached on vm[uuid:%s], please detach it before migration.",
    "en_US": "the volume[uuid:{0}] is still attached on vm[uuid:{1}], please detach it before migration.",
    "zh_CN": "",
    "arguments": [
      "msg.getVolumeUuid()",
      "srcVolume.getVmInstanceUuid()"
    ],
    "line": 213,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Cannot migrate root volume when vm instance is not stopped.",
    "en_US": "Cannot migrate root volume when vm instance is not stopped.",
    "zh_CN": "",
    "arguments": [],
    "line": 174,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Cannot migrate root volume when there are data volumes attached to the vm instance.",
    "en_US": "Cannot migrate root volume when there are data volumes attached to the vm instance.",
    "zh_CN": "",
    "arguments": [],
    "line": 181,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "The clusterUuid of vm[uuid:%s] cannot be null when migrate the root volume[uuid:%s]",
    "en_US": "The clusterUuid of vm[uuid:{0}] cannot be null when migrate the root volume[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "srcVm.getUuid()",
      "srcVolume.getUuid()"
    ],
    "line": 187,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "The destination primary storage is not attached to any cluster that has the same L2 networks as source cluster.",
    "en_US": "The destination primary storage is not attached to any cluster that has the same L2 networks as source cluster.",
    "zh_CN": "",
    "arguments": [],
    "line": 207,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Cannot migrate volume from %s to %s.",
    "en_US": "Cannot migrate volume from {0} to {1}.",
    "zh_CN": "",
    "arguments": [
      "srcPS.getType()",
      "dstPS.getType()"
    ],
    "line": 224,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Cannot reserve enough space for Image[uuid:%s] in BS[uuid:%s]",
    "en_US": "Cannot reserve enough space for Image[uuid:{0}] in BS[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "imageUuid",
      "dstBsUuid"
    ],
    "line": 61,
    "fileName": "src/main/java/org/zstack/storage/migration/backup/ReserveCapacityFromDstBSFlow.java"
  },
  {
    "raw": "Failed to migrate Image %s from BS %s to BS %s.",
    "en_US": "Failed to migrate Image {0} from BS {1} to BS {2}.",
    "zh_CN": "",
    "arguments": [
      "imageUuid",
      "srcBsUuid",
      "dstBsUuid"
    ],
    "line": 126,
    "fileName": "src/main/java/org/zstack/storage/migration/backup/ceph/CephToCephMigrateImageFlow.java"
  },
  {
    "raw": "Cannot reserve enough space for Volume[uuid:%s] in PS[uuid:%s]",
    "en_US": "Cannot reserve enough space for Volume[uuid:{0}] in PS[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "volumeUuid",
      "dstPsUuid"
    ],
    "line": 81,
    "fileName": "src/main/java/org/zstack/storage/migration/primary/ReserveCapacityFromDstPSFlow.java"
  },
  {
    "raw": "The type [%s] of destination volume is invalid.",
    "en_US": "The type [{0}] of destination volume is invalid.",
    "zh_CN": "",
    "arguments": [
      "volume.getType().toString()"
    ],
    "line": 76,
    "fileName": "src/main/java/org/zstack/storage/migration/primary/ceph/CephToCephMigrateVolumeFlow.java"
  },
  {
    "raw": "all ceph mons are Disconnected in ceph primary storage[uuid:%s]",
    "en_US": "all ceph mons are Disconnected in ceph primary storage[uuid:{0}]",
    "zh_CN": "",
    "arguments": [
      "dstPsVO.getUuid()"
    ],
    "line": 100,
    "fileName": "src/main/java/org/zstack/storage/migration/primary/ceph/CephToCephMigrateVolumeFlow.java"
  },
  {
    "raw": "zoneUuids, clusterUuids, primaryStorageUuids must have at least one be none-empty list, or all is set to true",
    "en_US": "zoneUuids, clusterUuids, primaryStorageUuids must have at least one be none-empty list, or all is set to true",
    "zh_CN": "区域、集群、主存储的Uuids中必须至少有一个不为空列表，除非将字段 all 设为 true",
    "arguments": [],
    "line": 77,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "primary storage[uuid:%s] has not been attached to cluster[uuid:%s] yet",
    "en_US": "primary storage[uuid:{0}] has not been attached to cluster[uuid:{1}] yet",
    "zh_CN": "主存储[uuid:{0}]还未加载到集群[uuid:{1}]上",
    "arguments": [
      "msg.getPrimaryStorageUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 99,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "primary storage[uuid:%s] has been attached to cluster[uuid:%s]",
    "en_US": "primary storage[uuid:{0}] has been attached to cluster[uuid:{1}]",
    "zh_CN": "主存储[uuid:{0}]已被加载到集群[uuid:{1}]上",
    "arguments": [
      "msg.getPrimaryStorageUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 116,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "primary storage[uuid:%s] and cluster[uuid:%s] are not in the same zone",
    "en_US": "primary storage[uuid:{0}] and cluster[uuid:{1}] are not in the same zone",
    "zh_CN": "主存储[uuid:{0}]和集群[uuid:{1}]不在同一个区域内",
    "arguments": [
      "msg.getPrimaryStorageUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 131,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "url[%s] has been occupied, it cannot be duplicate in same cluster",
    "en_US": "url[{0}] has been occupied, it cannot be duplicate in same cluster",
    "zh_CN": "",
    "arguments": [
      "url"
    ],
    "line": 155,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "primary storage[uuid:%s] cannot be deleted for still being attached to cluster[uuid:%s].",
    "en_US": "primary storage[uuid:{0}] cannot be deleted for still being attached to cluster[uuid:{1}].",
    "zh_CN": "不能删除主存储[uuid:{0}]，因为它还被加载在集群[uuid:{1}]上",
    "arguments": [
      "msg.getPrimaryStorageUuid()",
      "clusterUuidsString"
    ],
    "line": 151,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "after removing primary storage%s to avoid, there is no candidate primary storage anymore",
    "en_US": "after removing primary storage{0} to avoid, there is no candidate primary storage anymore",
    "zh_CN": "把主存储{0}移到排除列表后，就没有可用的主存储了",
    "arguments": [
      "spec.getAvoidPrimaryStorageUuids()"
    ],
    "line": 50,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageAvoidAllocatorFlow.java"
  },
  {
    "raw": "From agent report: change status between primary storage[uuid:%s] and host[uuid:%s] from %s to %s in db",
    "en_US": "From agent report: change status between primary storage[uuid:{0}] and host[uuid:{1}] from {2} to {3} in db",
    "zh_CN": "",
    "arguments": [
      "psUuid",
      "hostUuid",
      "oldStatus \u003d\u003d null ? \"unknown\" : oldStatus.toString()",
      "newStatus"
    ],
    "line": 334,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java"
  },
  {
    "raw": "backup storage[uuid:%s] is not attached to zone[uuid:%s] the primary storage[uuid:%s] belongs to",
    "en_US": "backup storage[uuid:{0}] is not attached to zone[uuid:{1}] the primary storage[uuid:{2}] belongs to",
    "zh_CN": "镜像服务器[uuid:{0}]没有加载到主存储[uuid:{2}]所在的区域[uuid:{1}]",
    "arguments": [
      "bsUuid",
      "self.getZoneUuid()",
      "self.getUuid()"
    ],
    "line": 426,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java"
  },
  {
    "raw": "operation not supported",
    "en_US": "operation not supported",
    "zh_CN": "不支持的操作",
    "arguments": [],
    "line": 533,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java"
  },
  {
    "raw": "cannot attach volume[uuid:%s] whose primary storage is Maintenance",
    "en_US": "cannot attach volume[uuid:{0}] whose primary storage is Maintenance",
    "zh_CN": "无法挂载云盘[uuid:{0}]，其主存储处于维护模式。",
    "arguments": [
      "volumeUuid"
    ],
    "line": 1095,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java"
  },
  {
    "raw": "cannot reserve %s bytes on the primary storage[uuid:%s], it\u0027s short of available capacity",
    "en_US": "cannot reserve {0} bytes on the primary storage[uuid:{1}], it\u0027s short of available capacity",
    "zh_CN": "无法在主存储[uuid:{1}]上保留{0}字节，可用容量不足",
    "arguments": [
      "size",
      "capacityVO.getUuid()"
    ],
    "line": 280,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageCapacityUpdater.java"
  },
  {
    "raw": "%s is invalid. %s is not a valid zstack uuid",
    "en_US": "{0} is invalid. {1} is not a valid zstack uuid",
    "zh_CN": "{0}是无效的，{1}不是一个有效的ZStack uuid",
    "arguments": [
      "systemTag",
      "uuid"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java"
  },
  {
    "raw": "no primary storage[uuid:%s] found",
    "en_US": "no primary storage[uuid:{0}] found",
    "zh_CN": "找不到主存储[uuid:{0}]",
    "arguments": [
      "resourceUuid"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java"
  },
  {
    "raw": "cannot find any qualified primary storage, errors are %s",
    "en_US": "cannot find any qualified primary storage, errors are {0}",
    "zh_CN": "找不到可用的主存储，错误为:{0}",
    "arguments": [
      "errs"
    ],
    "line": 571,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java"
  },
  {
    "raw": "after subtracting reserved capacity[%s], there is no primary storage having required size[%s bytes]",
    "en_US": "after subtracting reserved capacity[{0}], there is no primary storage having required size[{1} bytes]",
    "zh_CN": "释放保留容量[{0}]后，就没有主存储拥有要求的大小：{1}字节了",
    "arguments": [
      "PrimaryStorageGlobalConfig.RESERVED_CAPACITY.value()",
      "spec.getSize()"
    ],
    "line": 48,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageReservedCapacityAllocatorFlow.java"
  },
  {
    "raw": "cannot find primary storage[uuid:%s], the uuid is specified in instance offering or disk offering",
    "en_US": "cannot find primary storage[uuid:{0}], the uuid is specified in instance offering or disk offering",
    "zh_CN": "找不到由计算规格或云盘规格指定的主存储[uuid:{0}]",
    "arguments": [
      "uuid"
    ],
    "line": 126,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageTagAllocatorExtension.java"
  },
  {
    "raw": "cannot find primary storage having user tag[%s]. The user tag is specified in instance offering or disk offering",
    "en_US": "cannot find primary storage having user tag[{0}]. The user tag is specified in instance offering or disk offering",
    "zh_CN": "找不到带有指定用户标签的主存储[uuid:{0}]，该标签由计算规格或者云盘规格指定",
    "arguments": [
      "tag"
    ],
    "line": 166,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageTagAllocatorExtension.java"
  },
  {
    "raw": "PrimaryStorageTagAllocatorExtensionPoint[%s] returns zero primary storage candidate",
    "en_US": "PrimaryStorageTagAllocatorExtensionPoint[{0}] returns zero primary storage candidate",
    "zh_CN": "主存储标签分配插件[{0}]找不到可用的主存储",
    "arguments": [
      "extp.getClass().getName()"
    ],
    "line": 85,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageTagAllocatorFlow.java"
  },
  {
    "raw": "System can\u0027t find imagestore backup Storage. Please do not set imagestore backup Storage server IP to localhost(127.*.*.*),",
    "en_US": "System can\u0027t find imagestore backup Storage. Please do not set imagestore backup Storage server IP to localhost(127.*.*.*),",
    "zh_CN": "系统找不到镜像仓库镜像服务器。请不要设置镜像服务器IP为localhost(127.*.*.*)",
    "arguments": [],
    "line": 198,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/local/LocalStorageKvmImageStoreBackupStorageMediatorImpl.java"
  },
  {
    "raw": "%s failed to download bits from the imagestore backup storage[hostname:%s, path: %s] to the local primary storage[uuid:%s, path: %s], %s",
    "en_US": "{0} failed to download bits from the imagestore backup storage[hostname:{1}, path: {2}] to the local primary storage[uuid:{3}, path: {4}], {5}",
    "zh_CN": "{0}从镜像仓库镜像服务器[hostname:{1}, path: {2}]到本地主存储[uuid:{3}, path: {4}]下载失败，{5}",
    "arguments": [
      "operationSuggestion",
      "greply.getHostname()",
      "backupStorageInstallPath",
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "rsp.getError()"
    ],
    "line": 201,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/local/LocalStorageKvmImageStoreBackupStorageMediatorImpl.java"
  },
  {
    "raw": "fails to create root volume[uuid:%s] from cached image[path:%s] because %s",
    "en_US": "fails to create root volume[uuid:{0}] from cached image[path:{1}] because {2}",
    "zh_CN": "从镜像[path:{1}]创建根云盘失败，因为{2}",
    "arguments": [
      "volume.getUuid()",
      "image.getImageUuid()",
      "rsp.getError()"
    ],
    "line": 181,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/nfs/NfsPrimaryToImageStoreBackupKVMBackend.java"
  },
  {
    "raw": "failed to upload bits from the local storage[uuid:%s, path:%s] to image store [hostname:%s], %s",
    "en_US": "failed to upload bits from the local storage[uuid:{0}, path:{1}] to image store [hostname:{2}], {3}",
    "zh_CN": "无法从本地存储[uuid:{0}, path:{1}]上传数据到镜像仓库[主机名:{2}]，因为{3}",
    "arguments": [
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "r.getHostname()",
      "rsp.getError()"
    ],
    "line": 305,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/nfs/NfsPrimaryToImageStoreBackupKVMBackend.java"
  },
  {
    "raw": "failed to download bits from the imagestore backup storage[hostname:%s, path: %s] to the nfs primary storage[uuid:%s, path: %s], %s",
    "en_US": "failed to download bits from the imagestore backup storage[hostname:{0}, path: {1}] to the nfs primary storage[uuid:{2}, path: {3}], {4}",
    "zh_CN": "无法从ImageStore镜像服务器[hostname:{0}, path: {1}]下载数据到NFS主存储[uuid:{2}, path: {3}]，错误细节：{4}。",
    "arguments": [
      "greply.getHostname()",
      "backupStorageInstallPath",
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "rsp.getError()"
    ],
    "line": 230,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/nfs/NfsPrimaryToImageStoreBackupKVMBackend.java"
  },
  {
    "raw": "failed to upload bits from the NFS[uuid:%s, path:%s] to image store [hostname:%s], %s",
    "en_US": "failed to upload bits from the NFS[uuid:{0}, path:{1}] to image store [hostname:{2}], {3}",
    "zh_CN": "无法从NFS主存储[uuid:{0}, path:{1}]上传数据到镜像仓库[主机名:{2}]，因为{3}",
    "arguments": [
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "r.getHostname()",
      "rsp.getError()"
    ],
    "line": 283,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/nfs/NfsPrimaryToImageStoreBackupKVMBackend.java"
  },
  {
    "raw": "cannot find any connected host to perform the operation, it seems all KVM hosts in the clusters attached with the shared mount point storage[uuid:%s] are disconnected",
    "en_US": "cannot find any connected host to perform the operation, it seems all KVM hosts in the clusters attached with the shared mount point storage[uuid:{0}] are disconnected",
    "zh_CN": "找不到任何Connected的物理机去执行操作，看起来加载到shared mount point存储的集群上所有物理机都处于Disconnected状态",
    "arguments": [
      "this.primaryStorageUuid"
    ],
    "line": 67,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/smp/KvmAgentCommandDispatcher.java"
  },
  {
    "raw": "the type of primary storage[uuid:%s] chosen is not local storage, check if the resource can be created on other storage when cluster has attached local primary storage",
    "en_US": "the type of primary storage[uuid:{0}] chosen is not local storage, check if the resource can be created on other storage when cluster has attached local primary storage",
    "zh_CN": "被选择的主存储[uuid:{0}]的类型不是本地存储，检查该资源能否在其他存储上被创建当集群已经挂载了本地存储。",
    "arguments": [
      "psUuid"
    ],
    "line": 98,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageAllocateCapacityFlow.java"
  },
  {
    "raw": "The cluster mounts multiple primary storage[%s(%s), other non-LocalStorage primary storage], primaryStorageUuidForDataVolume cannot be specified %s",
    "en_US": "The cluster mounts multiple primary storage[{0}({1}), other non-LocalStorage primary storage], primaryStorageUuidForDataVolume cannot be specified {2}",
    "zh_CN": "",
    "arguments": [
      "requiredPrimaryStorageUuidForDataVolume.getUuid()",
      "requiredPrimaryStorageUuidForDataVolume.getType()",
      "LocalStorageConstants.LOCAL_STORAGE_TYPE"
    ],
    "line": 175,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageAllocateCapacityFlow.java"
  },
  {
    "raw": "the volume[uuid:%s] is not on any local primary storage",
    "en_US": "the volume[uuid:{0}] is not on any local primary storage",
    "zh_CN": "云盘[uuid:{0}]不在任一本地主存储上",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 73,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s] is already on the host[uuid:%s]",
    "en_US": "the volume[uuid:{0}] is already on the host[uuid:{1}]",
    "zh_CN": "云盘[uuid:{0}]已经在物理机[uuid:{1}]上",
    "arguments": [
      "msg.getVolumeUuid()",
      "msg.getDestHostUuid()"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the primary storage[uuid:%s] is not found",
    "en_US": "the primary storage[uuid:{0}] is not found",
    "zh_CN": "主存储[uuid:{0}]未找到",
    "arguments": [
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 82,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the primary storage[uuid:%s] is disabled or maintenance cold migrate is not allowed",
    "en_US": "the primary storage[uuid:{0}] is disabled or maintenance cold migrate is not allowed",
    "zh_CN": "主存储[uuid:{0}]为Disabled或维护状态时不允许冷迁移",
    "arguments": [
      "ref.getPrimaryStorageUuid()"
    ],
    "line": 86,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the dest host[uuid:%s] doesn\u0027t belong to the local primary storage[uuid:%s] where the volume[uuid:%s] locates",
    "en_US": "the dest host[uuid:{0}] doesn\u0027t belong to the local primary storage[uuid:{1}] where the volume[uuid:{2}] locates",
    "zh_CN": "目标物理机[uuid:{0}]不在云盘[uuid:{2}]位于的本地主存储[uuid:{1}]上",
    "arguments": [
      "msg.getDestHostUuid()",
      "ref.getPrimaryStorageUuid()",
      "msg.getVolumeUuid()"
    ],
    "line": 93,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s] is not in status of Ready, cannot migrate it",
    "en_US": "the volume[uuid:{0}] is not in status of Ready, cannot migrate it",
    "zh_CN": "云盘[uuid:{0}]的状态不是Ready，不能迁移",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 99,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s] is the root volume of the vm[uuid:%s]. Currently the vm is in state of %s, please stop it before migration",
    "en_US": "the volume[uuid:{0}] is the root volume of the vm[uuid:{1}]. Currently the vm is in state of {2}, please stop it before migration",
    "zh_CN": "云盘[uuid:{0}]是云主机[uuid:{1}]的根云盘。当前云主机的状态为{2}，请停止后再迁移",
    "arguments": [
      "vol.getUuid()",
      "vol.getVmInstanceUuid()",
      "vmstate"
    ],
    "line": 124,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s] is the root volume of the vm[uuid:%s]. Currently the vm still has %s data volumes attached, please detach them before migration",
    "en_US": "the volume[uuid:{0}] is the root volume of the vm[uuid:{1}]. Currently the vm still has {2} data volumes attached, please detach them before migration",
    "zh_CN": "云盘[uuid:{0}]是云主机[uuid:{1}]的根云盘。当前云主机仍有已挂载的数据云盘，请卸载后再迁移",
    "arguments": [
      "vol.getUuid()",
      "vol.getVmInstanceUuid()",
      "count"
    ],
    "line": 133,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "The two clusters[uuid:%s,uuid:%s] cannot access each other in l2 network  when migrate the vm[uuid:%s] to another cluster",
    "en_US": "The two clusters[uuid:{0},uuid:{1}] cannot access each other in l2 network  when migrate the vm[uuid:{2}] to another cluster",
    "zh_CN": "两个集群[uuid:{0},uuid:{1}]无法在L2网络中互相访问对方，当迁移云主机[uuid:{2}]从其中一个集群到另一个集群时。",
    "arguments": [
      "originClusterUuid",
      "clusterUuid",
      "vol.getVmInstanceUuid()"
    ],
    "line": 162,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the data volume[uuid:%s, name: %s] is still attached on the VM[uuid:%s]. Please detach it before migration",
    "en_US": "the data volume[uuid:{0}, name: {1}] is still attached on the VM[uuid:{2}]. Please detach it before migration",
    "zh_CN": "数据云盘[uuid:{0}, 名称: {1}]仍然挂载在云主机[uuid:{2}]上，请在迁移前卸载",
    "arguments": [
      "vol.getUuid()",
      "vol.getName()",
      "vol.getVmInstanceUuid()"
    ],
    "line": 103,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the url[%s] is not an absolute path starting with \u0027/\u0027",
    "en_US": "the url[{0}] is not an absolute path starting with \u0027/\u0027",
    "zh_CN": "url[{0}]不是一个以\u0027/\u0027开头的绝对路径",
    "arguments": [
      "msg.getUrl()"
    ],
    "line": 130,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "The primary storage[uuid:%s] is disabled cold migrate is not allowed",
    "en_US": "The primary storage[uuid:{0}] is disabled cold migrate is not allowed",
    "zh_CN": "主存储[uuid:{0}]Disabled时不允许冷迁移",
    "arguments": [
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 210,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "volume[uuid:%s] is not on the local storage anymore,it may have been deleted",
    "en_US": "volume[uuid:{0}] is not on the local storage anymore,it may have been deleted",
    "zh_CN": "云盘[uuid:{0}]已经不在本地存储上，可能已经被删除",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 274,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "failed to download image[uuid:%s] to all hosts in the local storage[uuid:%s]. %s",
    "en_US": "failed to download image[uuid:{0}] to all hosts in the local storage[uuid:{1}]. {2}",
    "zh_CN": "在所有属于本地存储[uuid:{1}]的物理机上，均无法下载镜像[uuid:{0}]。{2}",
    "arguments": [
      "msg.getImage().getUuid()",
      "self.getUuid()",
      "JSONObjectUtil.toJsonString(ret.errorCodes)"
    ],
    "line": 778,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "Resource[uuid:%s] can only be operated on host[uuid:%s], but the host has been deleted",
    "en_US": "Resource[uuid:{0}] can only be operated on host[uuid:{1}], but the host has been deleted",
    "zh_CN": "资源[uuid:{0}]只能在物理机[uuid:{0}]上对其操作，但是该物理机已经被删除了",
    "arguments": [
      "resUuid",
      "huuid"
    ],
    "line": 1106,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "cannot find any host which has resource[uuid:%s]",
    "en_US": "cannot find any host which has resource[uuid:{0}]",
    "zh_CN": "找不到任何拥有资源[uuid:{0}]的物理机",
    "arguments": [],
    "line": 1099,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "cannot find any host which has resource[uuid:%s], name :[%s], type :[%s]",
    "en_US": "cannot find any host which has resource[uuid:{0}], name :[{1}], type :[{2}]",
    "zh_CN": "",
    "arguments": [
      "resUuid",
      "vo.getResourceName()",
      "vo.getResourceType()"
    ],
    "line": 1115,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "host[uuid: %s] of local primary storage[uuid: %s] doesn\u0027t have enough capacity[current: %s bytes, needed: %s]",
    "en_US": "host[uuid: {0}] of local primary storage[uuid: {1}] doesn\u0027t have enough capacity[current: {2} bytes, needed: {3}]",
    "zh_CN": "主存储[uuid:{1}]上的物理机[uuid:{0}]没有足够的容量[现在: {2} bytes, 需要: {3}]",
    "arguments": [
      "hostUuid",
      "self.getUuid()",
      "ref.getAvailableCapacity()",
      "size"
    ],
    "line": 1296,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "unable to create the data volume[uuid: %s] on a local primary storage[uuid:%s], because the hostUuid is not specified.",
    "en_US": "unable to create the data volume[uuid: {0}] on a local primary storage[uuid:{1}], because the hostUuid is not specified.",
    "zh_CN": "不能在本地主存储[uuid:{1}]上创建云盘[uuid:{0}]，因为物理机uuid没有指定",
    "arguments": [
      "msg.getVolumeUuid()",
      "self.getUuid()"
    ],
    "line": 1556,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "There is no LocalStorage primary storage[state\u003d%s,status\u003d%s] on the cluster[%s], when the cluster mounts multiple primary storage, the system uses the local primary storage by default. Check the state/status of primary storage and make sure they have been attached to clusters",
    "en_US": "There is no LocalStorage primary storage[state\u003d{0},status\u003d{1}] on the cluster[{2}], when the cluster mounts multiple primary storage, the system uses the local primary storage by default. Check the state/status of primary storage and make sure they have been attached to clusters",
    "zh_CN": "",
    "arguments": [
      "PrimaryStorageState.Enabled",
      "PrimaryStorageStatus.Connected",
      "clusterUuid"
    ],
    "line": 103,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageDefaultAllocateCapacityFlow.java"
  },
  {
    "raw": "The cluster[uuid\u003d%s] mounts multiple primary storage[LocalStorage, other non-LocalStorage primary storage], You must specify the primary storage where the root disk is located",
    "en_US": "The cluster[uuid\u003d{0}] mounts multiple primary storage[LocalStorage, other non-LocalStorage primary storage], You must specify the primary storage where the root disk is located",
    "zh_CN": "",
    "arguments": [
      "spec.getDestHost().getClusterUuid()"
    ],
    "line": 119,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageDesignatedAllocateCapacityFlow.java"
  },
  {
    "raw": "The cluster[uuid\u003d%s] mounts multiple primary storage[LocalStorage, other non-LocalStorage primary storage], You must specify the primary storage where the data disk is located",
    "en_US": "The cluster[uuid\u003d{0}] mounts multiple primary storage[LocalStorage, other non-LocalStorage primary storage], You must specify the primary storage where the data disk is located",
    "zh_CN": "",
    "arguments": [
      "spec.getDestHost().getClusterUuid()"
    ],
    "line": 125,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageDesignatedAllocateCapacityFlow.java"
  },
  {
    "raw": "local storage doesn\u0027t support live migration for hypervisor[%s]",
    "en_US": "local storage doesn\u0027t support live migration for hypervisor[{0}]",
    "zh_CN": "本地存储不支持对虚拟化类型[{0}]进行热迁移",
    "arguments": [
      "spec.getVmInventory().getHypervisorType()"
    ],
    "line": 334,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "cannot attach the data volume[uuid:%s] to the vm[uuid:%s]. Both vm\u0027s root volume and the data volume are on local primary storage, but they are on different hosts. The root volume[uuid:%s] is on the host[uuid:%s] but the data volume[uuid: %s] is on the host[uuid: %s]",
    "en_US": "cannot attach the data volume[uuid:{0}] to the vm[uuid:{1}]. Both vm\u0027s root volume and the data volume are on local primary storage, but they are on different hosts. The root volume[uuid:{2}] is on the host[uuid:{3}] but the data volume[uuid: {4}] is on the host[uuid: {5}]",
    "zh_CN": "不能加载数据云盘[uuid:{0}]到云主机[uuid:{1}]。根云盘和数据云盘都在本地主存储上，但他们属于不同的物理机。根云盘[uuid:{2}]在物理机[uuid:{3}]上，但数据云盘[uuid:{4}]在物理机[uuid:{5}]上",
    "arguments": [
      "volume.getUuid()",
      "vm.getUuid()",
      "vm.getRootVolumeUuid()",
      "rootHost",
      "volume.getUuid()",
      "dataHost"
    ],
    "line": 510,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "the data volume[name:%s, uuid:%s] is on the local storage[uuid:%s]; however,the host on which the data volume is has been deleted. Unable to recover this volume",
    "en_US": "the data volume[name:{0}, uuid:{1}] is on the local storage[uuid:{2}]; however,the host on which the data volume is has been deleted. Unable to recover this volume",
    "zh_CN": "数据云盘[name:{0}, uuid:{1}]在本地存储[uuid:{2}]上；然而物理机内的数据云盘已经被删除了",
    "arguments": [
      "vol.getName()",
      "vol.getUuid()",
      "vol.getPrimaryStorageUuid()"
    ],
    "line": 716,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "unable to recover the vm[uuid:%s, name:%s]. The vm\u0027s root volume is on the local storage[uuid:%s]; however, the host on which the root volume is has been deleted",
    "en_US": "unable to recover the vm[uuid:{0}, name:{1}]. The vm\u0027s root volume is on the local storage[uuid:{2}]; however, the host on which the root volume is has been deleted",
    "zh_CN": "不能恢复云主机[uuid:{0}, name:{1}]。云主机的根云盘在本地存储[uuid:{2}]上；然而物理机内的根云盘已经被删除了",
    "arguments": [
      "vm.getUuid()",
      "vm.getName()",
      "psuuid"
    ],
    "line": 759,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "unable to live migrate vm[uuid:%s] with data volumes on local storage. Need detach all data volumes first.",
    "en_US": "unable to live migrate vm[uuid:{0}] with data volumes on local storage. Need detach all data volumes first.",
    "zh_CN": "无法在本地存储上热迁移挂载了数据云盘的云主机[uuid:{0}]。需要先手动卸载所有数据云盘。",
    "arguments": [
      "vm.getUuid()"
    ],
    "line": 779,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "unable to live migrate vm[uuid:%s] with local storage. Only linux guest is supported. Current platform is [%s]",
    "en_US": "unable to live migrate vm[uuid:{0}] with local storage. Only linux guest is supported. Current platform is [{1}]",
    "zh_CN": "无法在本地存储上热迁移云主机[uuid:{0}]。只有Linux类型的云主机支持该操作。当前类型为：[{1}]。",
    "arguments": [
      "vm.getUuid()",
      "vm.getPlatform()"
    ],
    "line": 784,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "unable to live migrate with local storage. The vm[uuid:%s] has volumes on local storage,to protect your data, please stop the vm and do the volume migration",
    "en_US": "unable to live migrate with local storage. The vm[uuid:{0}] has volumes on local storage,to protect your data, please stop the vm and do the volume migration",
    "zh_CN": "本地存储不能热迁移。云主机[uuid:{0}]在本地存储上有云盘，为了保护你的数据，请停止云主机做云盘迁移",
    "arguments": [
      "vm.getUuid()"
    ],
    "line": 796,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "To create data volume on the local primary storage, you must specify the host that the data volume is going to be created using the system tag [%s]",
    "en_US": "To create data volume on the local primary storage, you must specify the host that the data volume is going to be created using the system tag [{0}]",
    "zh_CN": "要在本地主存储上创建数据云盘，必须用系统标签[0]指定创建数据云盘的物理机",
    "arguments": [
      "LocalStorageSystemTags.DEST_HOST_FOR_CREATING_DATA_VOLUME.getTagFormat()"
    ],
    "line": 841,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "the host[uuid:%s] doesn\u0027t belong to the local primary storage[uuid:%s]",
    "en_US": "the host[uuid:{0}] doesn\u0027t belong to the local primary storage[uuid:{1}]",
    "zh_CN": "物理机[uuid:{0}] 不属于本地主存储[uuid:{1}]",
    "arguments": [
      "hostUuid",
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 851,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "KVM host[uuid: %s] fails to be added into local primary storage[uuid: %s], %s",
    "en_US": "KVM host[uuid: {0}] fails to be added into local primary storage[uuid: {1}], {2}",
    "zh_CN": "本地存储[uuid:{1}]添加物理机[uuid:{0}]失败，{2}",
    "arguments": [
      "context.getInventory().getUuid()",
      "priUuid",
      "reply.getError()"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageKvmFactory.java"
  },
  {
    "raw": "unable to create an empty volume[uuid:%s, name:%s] on the kvm host[uuid:%s]",
    "en_US": "unable to create an empty volume[uuid:{0}, name:{1}] on the kvm host[uuid:{2}]",
    "zh_CN": "不能在物理机[uuid:{2}]上创建空云盘[uuid:{0}, name:{1}]",
    "arguments": [
      "p.volume.getUuid()",
      "p.volume.getName()",
      "dstHostUuid"
    ],
    "line": 1099,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageKvmMigrateVmFlow.java"
  },
  {
    "raw": "failed to download bits from the SFTP backup storage[hostname:%s, path: %s] to the local primary storage[uuid:%s, path: %s], %s",
    "en_US": "failed to download bits from the SFTP backup storage[hostname:{0}, path: {1}] to the local primary storage[uuid:{2}, path: {3}], {4}",
    "zh_CN": "从SFTP镜像服务器[hostname:{0}, path: {1}] 下载到本地存储[uuid:{2}, path: {3}]失败，{4}",
    "arguments": [
      "greply.getHostname()",
      "backupStorageInstallPath",
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "rsp.getError()"
    ],
    "line": 202,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageKvmSftpBackupStorageMediatorImpl.java"
  },
  {
    "raw": "failed to upload bits from the local storage[uuid:%s, path:%s] to the SFTP backup storage[hostname:%s, path:%s], %s",
    "en_US": "failed to upload bits from the local storage[uuid:{0}, path:{1}] to the SFTP backup storage[hostname:{2}, path:{3}], {4}",
    "zh_CN": "从本地存储[uuid:{0}, path: {1}]上传到SFTP镜像服务器[hostname:{2}, path:{3}]失败, {4}",
    "arguments": [
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "r.getHostname()",
      "backupStorageInstallPath",
      "rsp.getError()"
    ],
    "line": 253,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageKvmSftpBackupStorageMediatorImpl.java"
  },
  {
    "raw": "there has been a nfs primary storage having url as %s in zone[uuid:%s]",
    "en_US": "there has been a nfs primary storage having url as {0} in zone[uuid:{1}]",
    "zh_CN": "区域[uuid:{1}]内已经存在 url 为 {0} 的 NFS 主存储",
    "arguments": [
      "url",
      "zoneUuid"
    ],
    "line": 31,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java"
  },
  {
    "raw": "there are %s running VMs on the NFS primary storage, please stop them and try again:\n%s\n",
    "en_US": "there are {0} running VMs on the NFS primary storage, please stop them and try again:\n{1}\n",
    "zh_CN": "在NFS主存储上有{0}个运行中的VM，请先手动关闭再尝试：\n{1}\n。",
    "arguments": [
      "vms.size()",
      "StringUtils.join(vms, \"\\n\")"
    ],
    "line": 232,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "cannot find usable backend",
    "en_US": "cannot find usable backend",
    "zh_CN": "无法找到可用的NFS主存储后端。",
    "arguments": [],
    "line": 247,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "no usable backend found",
    "en_US": "no usable backend found",
    "zh_CN": "无法找到可用的NFS主存储后端。",
    "arguments": [],
    "line": 272,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "no host in Connected status to which nfs primary storage[uuid:%s, name:%s] attached found to revert volume[uuid:%s] to snapshot[uuid:%s, name:%s]",
    "en_US": "no host in Connected status to which nfs primary storage[uuid:{0}, name:{1}] attached found to revert volume[uuid:{2}] to snapshot[uuid:{3}, name:{4}]",
    "zh_CN": "没有找到挂载到NFS主存储[uuid:{0}, name:{1}]且处于Connected状态的物理机，无法回退云盘[uuid:{2}]到快照[uuid:{3}, name:{4}]。",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "msg.getVolume().getUuid()",
      "msg.getSnapshot().getUuid()",
      "msg.getSnapshot().getName()"
    ],
    "line": 411,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "no host in Connected status to which nfs primary storage[uuid:%s, name:%s] attached found to revert volume[uuid:%s] to image[uuid:%s]",
    "en_US": "no host in Connected status to which nfs primary storage[uuid:{0}, name:{1}] attached found to revert volume[uuid:{2}] to image[uuid:{3}]",
    "zh_CN": "没有找到挂载到NFS主存储[uuid:{0}, name:{1}]且处于Connected状态的物理机，无法回退云盘[uuid:{2}]到镜像[uuid:{3}]。",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "msg.getVolume().getUuid()",
      "msg.getVolume().getRootImageUuid()"
    ],
    "line": 441,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "NFS primary storage[uuid:%s] failed to delete a volume snapshot[uuid:%s], %s. A GC job[uuid:%s] is scheduled to cleanup it in the interval of %s seconds",
    "en_US": "NFS primary storage[uuid:{0}] failed to delete a volume snapshot[uuid:{1}], {2}. A GC job[uuid:{3}] is scheduled to cleanup it in the interval of {4} seconds",
    "zh_CN": "NFS主存储[uuid:{0}]删除一个云盘快照[uuid:{1}]失败，错误细节：{2}。一个定时任务（GC job）[uuid:{3}]被创建，以{4}秒的间隔重试清理。",
    "arguments": [
      "self.getUuid()",
      "sinv.getUuid()",
      "errorCode",
      "NfsPrimaryStorageGlobalConfig.GC_INTERVAL.value(Long.class)"
    ],
    "line": 456,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "vm[uuid:%s] is not Running, Paused or Stopped, current state is %s",
    "en_US": "vm[uuid:{0}] is not Running, Paused or Stopped, current state is {1}",
    "zh_CN": "云主机[uuid:{0}]不是运行中、已暂停或者已停止状态，现在的状态是{1}",
    "arguments": [
      "vol.getVmInstanceUuid()",
      "state"
    ],
    "line": 485,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "primary storage[uuid:%s] doesn\u0027t attach to any cluster",
    "en_US": "primary storage[uuid:{0}] doesn\u0027t attach to any cluster",
    "zh_CN": "主存储[uuid:{0}]没有挂载到任何集群。",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 560,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "the NFS primary storage[uuid:%s, name:%s] cannot find any usable host to create the data volume[uuid:%s, name:%s]",
    "en_US": "the NFS primary storage[uuid:{0}, name:{1}] cannot find any usable host to create the data volume[uuid:{2}, name:{3}]",
    "zh_CN": "NFS主存储[uuid:{0}, name:{1}]无法找到任何可用的物理机以创建数据云盘[uuid:{2}, name:{3}]。",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "msg.getVolume().getUuid()",
      "msg.getVolume().getName()"
    ],
    "line": 736,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "the NFS primary storage[uuid:%s, name:%s] cannot find hosts in attached clusters to perform the operation",
    "en_US": "the NFS primary storage[uuid:{0}, name:{1}] cannot find hosts in attached clusters to perform the operation",
    "zh_CN": "NFS主存储[uuid:{0}, name:{1}]不能找到物理机挂载到集群，执行此操作",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 1016,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "unable to reconnect the primary storage[uuid:%s, name:%s], %s",
    "en_US": "unable to reconnect the primary storage[uuid:{0}, name:{1}], {2}",
    "zh_CN": "无法重连主存储[uuid:{0}, name:{1}]，错误细节：{2}。",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "future.getErrorCode()"
    ],
    "line": 1070,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "the NFS primary storage[uuid:%s, name:%s] has not attached to any clusters, or no hosts in the attached clusters are connected",
    "en_US": "the NFS primary storage[uuid:{0}, name:{1}] has not attached to any clusters, or no hosts in the attached clusters are connected",
    "zh_CN": "NFS主存储[uuid:{0}, name:{1}] 没有挂载到任何一个集群，或者挂载到集群的物理机均无法连接",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 1209,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "found multiple CIDR",
    "en_US": "found multiple CIDR",
    "zh_CN": "",
    "arguments": [],
    "line": 86,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "invalid CIDR: %s",
    "en_US": "invalid CIDR: {0}",
    "zh_CN": "",
    "arguments": [
      "cidr"
    ],
    "line": 99,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "IP address[%s] is not in CIDR[%s]",
    "en_US": "IP address[{0}] is not in CIDR[{1}]",
    "zh_CN": "",
    "arguments": [
      "ipAddr",
      "cidr"
    ],
    "line": 103,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "the NFS primary storage[uuid:%s] is not attached to any clusters, and cannot expunge the root volume[uuid:%s] of the VM[uuid:%s]",
    "en_US": "the NFS primary storage[uuid:{0}] is not attached to any clusters, and cannot expunge the root volume[uuid:{1}] of the VM[uuid:{2}]",
    "zh_CN": "NFS主存储[uuid:{0}]没有挂载到任何集群，无法彻底删除VM[uuid:{2}]的根云盘[uuid:{1}]。",
    "arguments": [
      "psUuid",
      "vmUuid",
      "volumeUuid"
    ],
    "line": 109,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot find a Connected host to execute command for nfs primary storage[uuid:%s]",
    "en_US": "cannot find a Connected host to execute command for nfs primary storage[uuid:{0}]",
    "zh_CN": "对nfs主存储[uuid:{0}]来说不能发现一个可连接的物理机执行命令",
    "arguments": [
      "pri.getUuid()"
    ],
    "line": 185,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot find a host which has Connected host-NFS connection to execute command for nfs primary storage[uuid:%s]",
    "en_US": "cannot find a host which has Connected host-NFS connection to execute command for nfs primary storage[uuid:{0}]",
    "zh_CN": "找不到一个和NFS主存储[uuid:{0}]处于已连接状态的物理机为其执行命令",
    "arguments": [
      "pri.getUuid()"
    ],
    "line": 244,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java"
  },
  {
    "raw": "change status between primary storage[uuid:%s] and host[uuid:%s] from %s to %s in db",
    "en_US": "change status between primary storage[uuid:{0}] and host[uuid:{1}] from {2} to {3} in db",
    "zh_CN": "",
    "arguments": [
      "psUuid",
      "huuid",
      "oldStatus \u003d\u003d null ? \"unknown\" : oldStatus.toString()",
      "newStatus.toString()"
    ],
    "line": 280,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot find proper hypervisorType for primary storage[uuid:%s] to handle image format or volume format[%s]",
    "en_US": "cannot find proper hypervisorType for primary storage[uuid:{0}] to handle image format or volume format[{1}]",
    "zh_CN": "对主存储[uuid:{0}]来说不能发现合适的管理程序类型来处理镜像格式或云盘格式[{1}]",
    "arguments": [
      "psUuid",
      "imageFormat"
    ],
    "line": 225,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java"
  },
  {
    "raw": "unable to attach a primary storage[uuid:%s, name:%s] to cluster[uuid:%s]. Kvm host in the cluster has qemu-img with version[%s]; but the primary storage has attached to another cluster that has kvm host which has qemu-img with version[%s]. qemu-img version greater than %s is incompatible with versions less than %s, this will causes volume snapshot operation to fail. Please avoid attaching a primary storage to clusters that have different Linux distributions, in order to prevent qemu-img version mismatch",
    "en_US": "unable to attach a primary storage[uuid:{0}, name:{1}] to cluster[uuid:{2}]. Kvm host in the cluster has qemu-img with version[{3}]; but the primary storage has attached to another cluster that has kvm host which has qemu-img with version[{4}]. qemu-img version greater than {5} is incompatible with versions less than {6}, this will causes volume snapshot operation to fail. Please avoid attaching a primary storage to clusters that have different Linux distributions, in order to prevent qemu-img version mismatch",
    "zh_CN": "不能挂载主存储[uuid:{0}, name:{1}]到集群[uuid:{2}].集群中的物理机存在[{3}]版本qemu-img；但是主存储已经挂载到另一个物理机拥有[{4}]版本qemu-img的集群。版本大于{5}的qemu-img不兼容版本小于{6}，这将会造成云盘快照操作失败。为了防止qemu-img版本不兼容，请避免挂载主存储到物理机装有不同linux版本的集群",
    "arguments": [
      "inv.getUuid()",
      "inv.getName()",
      "clusterUuid",
      "versionInCluster",
      "otherVersion",
      "QCOW3_QEMU_IMG_VERSION",
      "QCOW3_QEMU_IMG_VERSION"
    ],
    "line": 206,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "no host accessed to the nfs[uuid:%s]",
    "en_US": "no host accessed to the nfs[uuid:{0}]",
    "zh_CN": "没有物理机可以访问NFS[uuid:{0}]",
    "arguments": [
      "inv.getUuid()"
    ],
    "line": 376,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "no host in is Connected or primary storage[uuid:%s] attach no cluster",
    "en_US": "no host in is Connected or primary storage[uuid:{0}] attach no cluster",
    "zh_CN": "没有物理机处于Connected状态，或主存储[uuid:{0}]没有挂载到任何集群。",
    "arguments": [
      "inv.getUuid()"
    ],
    "line": 400,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "failed to ping nfs primary storage[uuid:%s] from host[uuid:%s],because %s. disconnect this host-ps connection",
    "en_US": "failed to ping nfs primary storage[uuid:{0}] from host[uuid:{1}],because {2}. disconnect this host-ps connection",
    "zh_CN": "从物理机[uuid:{1}]Ping NFS主存储[uuid:{0}]失败，原因：{2}。断开该 物理机-主存储 连接。",
    "arguments": [
      "psUuid",
      "huuid",
      "reply.isSuccess() ? rsp.getError() : reply.getError()"
    ],
    "line": 436,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "failed to check existence of %s on nfs primary storage[uuid:%s], %s",
    "en_US": "failed to check existence of {0} on nfs primary storage[uuid:{1}], {2}",
    "zh_CN": "检查nfs主存储中是否存在{0}失败",
    "arguments": [
      "installPath",
      "inv.getUuid()",
      "rsp.getError()"
    ],
    "line": 502,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "unable to attach a primary storage to cluster. Kvm host[uuid:%s, name:%s] in cluster has qemu-img with version[%s]; but the primary storage has attached to a cluster that has kvm host[uuid:%s], which has qemu-img with version[%s]. qemu-img version greater than %s is incompatible with versions less than %s, this will causes volume snapshot operation to fail. Please avoid attaching a primary storage to clusters that have different Linux distributions, in order to prevent qemu-img version mismatch",
    "en_US": "unable to attach a primary storage to cluster. Kvm host[uuid:{0}, name:{1}] in cluster has qemu-img with version[{2}]; but the primary storage has attached to a cluster that has kvm host[uuid:{3}], which has qemu-img with version[{4}]. qemu-img version greater than {5} is incompatible with versions less than {6}, this will causes volume snapshot operation to fail. Please avoid attaching a primary storage to clusters that have different Linux distributions, in order to prevent qemu-img version mismatch",
    "zh_CN": "不能挂载主存储到集群。集群中的物理机[uuid:{0}, name:{1}]拥有[{2}]版本的qemu-img；但是主存储已经挂载到拥有[{4}]版本qemu-img的集群上。版本大于{5}的qemu-img不兼容版本小于{6}，这将会造成云盘快照操作失败。为了防止qemu-img版本不兼容，请避免挂载主存储到物理机装有不同linux版本的集群",
    "arguments": [
      "context.getInventory().getUuid()",
      "context.getInventory().getName()",
      "mine",
      "e.getKey()",
      "version",
      "QCOW3_QEMU_IMG_VERSION",
      "QCOW3_QEMU_IMG_VERSION"
    ],
    "line": 560,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "unable to create empty volume[uuid:%s,  name:%s] on kvm host[uuid:%s, ip:%s], because %s",
    "en_US": "unable to create empty volume[uuid:{0},  name:{1}] on kvm host[uuid:{2}, ip:{3}], because {4}",
    "zh_CN": "不能在物理机[uuid:{2}, ip:{3}]上创建空云盘[uuid:{0},  name:{1}]，因为{4}",
    "arguments": [
      "volume.getUuid()",
      "volume.getName()",
      "host.getUuid()",
      "host.getManagementIp()",
      "rsp.getError()"
    ],
    "line": 607,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "failed to revert volume[uuid:%s] to snapshot[uuid:%s] on kvm host[uuid:%s, ip:%s], %s",
    "en_US": "failed to revert volume[uuid:{0}] to snapshot[uuid:{1}] on kvm host[uuid:{2}, ip:{3}], {4}",
    "zh_CN": "回滚在物理机[uuid:{2}, ip:{3}]上的云盘[uuid:{0}]到快照[uuid:{1}]的状态失败，{4}",
    "arguments": [
      "vol.getUuid()",
      "sinv.getUuid()",
      "host.getUuid()",
      "host.getManagementIp()",
      "rsp.getError()"
    ],
    "line": 723,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "failed to revert volume[uuid:%s] to image[uuid:%s] on kvm host[uuid:%s, ip:%s], %s",
    "en_US": "failed to revert volume[uuid:{0}] to image[uuid:{1}] on kvm host[uuid:{2}, ip:{3}], {4}",
    "zh_CN": "回滚在物理机[uuid:{2}, ip:{3}]上的云盘[uuid:{0}]到镜像[uuid:{1}]，{4}",
    "arguments": [
      "vol.getUuid()",
      "vol.getRootImageUuid()",
      "host.getUuid()",
      "host.getManagementIp()",
      "rsp.getError()"
    ],
    "line": 756,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "No connected Host found in PrimaryStorage: [%s]",
    "en_US": "No connected Host found in PrimaryStorage: [{0}]",
    "zh_CN": "",
    "arguments": [
      "pinv.getUuid()"
    ],
    "line": 1130,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "unable to update the nfs[uuid:%s, name:%s] mount point from %s to %s on the host[uuid:%s], %s. Put the host-nfs into Disconnected status",
    "en_US": "unable to update the nfs[uuid:{0}, name:{1}] mount point from {2} to {3} on the host[uuid:{4}], {5}. Put the host-nfs into Disconnected status",
    "zh_CN": "",
    "arguments": [
      "pinv.getUuid()",
      "pinv.getName()",
      "oldMountPoint",
      "newMountPoint",
      "hostUuid",
      "errorCode"
    ],
    "line": 1161,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "fail to mount nfs[uuid:%s] from host[uuid:%s], because:%s",
    "en_US": "fail to mount nfs[uuid:{0}] from host[uuid:{1}], because:{2}",
    "zh_CN": "",
    "arguments": [
      "inv.getUuid()",
      "huuid",
      "errorCode.toString()"
    ],
    "line": 1239,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "failed to download[%s] from SftpBackupStorage[hostname:%s] to nfs primary storage[uuid:%s, path:%s], %s",
    "en_US": "failed to download[{0}] from SftpBackupStorage[hostname:{1}] to nfs primary storage[uuid:{2}, path:{3}], {4}",
    "zh_CN": "从Sftp镜像服务器[hostname:{1}] 下载[{0}]到nfs主存储[uuid:{2}, path:{3}]失败，{4}",
    "arguments": [
      "backupStorageInstallPath",
      "greply.getHostname()",
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "rsp.getError()"
    ],
    "line": 159,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryToSftpBackupKVMBackend.java"
  },
  {
    "raw": "failed to upload bits from nfs primary storage[uuid:%s, path:%s] to SFTP backup storage[hostname:%s, path: %s], %s",
    "en_US": "failed to upload bits from nfs primary storage[uuid:{0}, path:{1}] to SFTP backup storage[hostname:{2}, path: {3}], {4}",
    "zh_CN": "从nfs主存储[uuid:{0}, path:{1}]上传数据到STFP镜像服务器[hostname:{2}, path: {3}]失败，{4}",
    "arguments": [
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "hostname",
      "backupStorageInstallPath",
      "rsp.getError()"
    ],
    "line": 216,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryToSftpBackupKVMBackend.java"
  },
  {
    "raw": "the image[uuid:%s, name: %s] is not available to download on any backup storage:\n1. check if image is in status of Deleted\n2. check if the backup storage on which the image is shown as Ready is attached to the zone[uuid:%s]",
    "en_US": "the image[uuid:{0}, name: {1}] is not available to download on any backup storage:\n1. check if image is in status of Deleted\n2. check if the backup storage on which the image is shown as Ready is attached to the zone[uuid:{2}]",
    "zh_CN": "不能从镜像服务器中下载镜像[uuid:%s, name: %s]\n1.检查镜像是否处于被删除状态\n2.检查镜像处于就绪状态的镜像服务器是否挂载到区域[uuid:{2}]",
    "arguments": [
      "img.getUuid()",
      "img.getName()",
      "self.getZoneUuid()"
    ],
    "line": 979,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/KvmBackend.java"
  },
  {
    "raw": "no connected host found in the cluster[uuid:%s]",
    "en_US": "no connected host found in the cluster[uuid:{0}]",
    "zh_CN": "cluster[uuid:{0}]不存在已连接的物理机",
    "arguments": [
      "clusterUuid"
    ],
    "line": 206,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/KvmBackend.java"
  },
  {
    "raw": "vm[uuid:%s] is not Running, Paused or Stopped, current state[%s]",
    "en_US": "vm[uuid:{0}] is not Running, Paused or Stopped, current state[{1}]",
    "zh_CN": "云主机[uuid:{0}]不是运行中、已暂停或者已停止状态，现在的状态是[{1}]",
    "arguments": [
      "vol.getVmInstanceUuid()",
      "state"
    ],
    "line": 800,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/KvmBackend.java"
  },
  {
    "raw": "the volume[uuid;%s] is attached to a VM[uuid:%s] which is in state of %s, cannot do the snapshot merge",
    "en_US": "the volume[uuid;{0}] is attached to a VM[uuid:{1}] which is in state of {2}, cannot do the snapshot merge",
    "zh_CN": "云盘[uuid;{0}] 挂载到处于{2}状态的虚拟机，不能合并快照",
    "arguments": [
      "volume.getUuid()",
      "volume.getVmInstanceUuid()",
      "state"
    ],
    "line": 926,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/KvmBackend.java"
  },
  {
    "raw": "cannot find backup storage[uuid:%s]",
    "en_US": "cannot find backup storage[uuid:{0}]",
    "zh_CN": "找不到镜像服务器[uuid:{0}]",
    "arguments": [
      "backupStorageUuid"
    ],
    "line": 1298,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/KvmBackend.java"
  },
  {
    "raw": "hosts[uuid:%s] have the same mount path, but actually mount different storage.",
    "en_US": "hosts[uuid:{0}] have the same mount path, but actually mount different storage.",
    "zh_CN": "",
    "arguments": [
      "ret.firstAccessHostUuids"
    ],
    "line": 1376,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/KvmBackend.java"
  },
  {
    "raw": "the shared mount point primary storage[uuid:%s, name:%s] cannot find any available host in attached clusters for instantiating the volume",
    "en_US": "the shared mount point primary storage[uuid:{0}, name:{1}] cannot find any available host in attached clusters for instantiating the volume",
    "zh_CN": "共享挂载点主存储[uuid:{0}, name:{1}]在挂载的集群中找不到任何可用的物理机来实例化云盘",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 87,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageBase.java"
  },
  {
    "raw": "not supported operation",
    "en_US": "not supported operation",
    "zh_CN": "不支持的操作",
    "arguments": [],
    "line": 326,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageBase.java"
  },
  {
    "raw": "the SMP primary storage[uuid:%s] is not attached to any clusters, and cannot expunge the root volume[uuid:%s] of the VM[uuid:%s]",
    "en_US": "the SMP primary storage[uuid:{0}] is not attached to any clusters, and cannot expunge the root volume[uuid:{1}] of the VM[uuid:{2}]",
    "zh_CN": "SMP主存储[uuid:{0}]没有挂载到任何集群，无法彻底删除云主机[uuid:{2}]的根云盘[uuid:{1}]。",
    "arguments": [
      "psUuid",
      "vmUuid",
      "volumeUuid"
    ],
    "line": 101,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot find a Connected host to execute command for smp primary storage[uuid:%s]",
    "en_US": "cannot find a Connected host to execute command for smp primary storage[uuid:{0}]",
    "zh_CN": "找不到一个已连接状态的物理机为SMP主存储[uuid:{0}]执行命令",
    "arguments": [
      "pri.getUuid()"
    ],
    "line": 300,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot find a host which has Connected host-SMP connection to execute command for smp primary storage[uuid:%s]",
    "en_US": "cannot find a host which has Connected host-SMP connection to execute command for smp primary storage[uuid:{0}]",
    "zh_CN": "找不到一个和SMP主存储[uuid:{0}]处于已连接状态的物理机为其执行命令",
    "arguments": [
      "pri.getUuid()"
    ],
    "line": 324,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageFactory.java"
  },
  {
    "raw": "Data volume pool not provided",
    "en_US": "Data volume pool not provided",
    "zh_CN": "",
    "arguments": [],
    "line": 26,
    "fileName": "src/main/java/org/zstack/storage/primary/xsky/XSkyApiInterceptor.java"
  },
  {
    "raw": "Image cache pool not provided",
    "en_US": "Image cache pool not provided",
    "zh_CN": "",
    "arguments": [],
    "line": 30,
    "fileName": "src/main/java/org/zstack/storage/primary/xsky/XSkyApiInterceptor.java"
  },
  {
    "raw": "Root volume pool not provided",
    "en_US": "Root volume pool not provided",
    "zh_CN": "",
    "arguments": [],
    "line": 34,
    "fileName": "src/main/java/org/zstack/storage/primary/xsky/XSkyApiInterceptor.java"
  },
  {
    "raw": "Missing access token",
    "en_US": "Missing access token",
    "zh_CN": "",
    "arguments": [],
    "line": 38,
    "fileName": "src/main/java/org/zstack/storage/primary/xsky/XSkyApiInterceptor.java"
  },
  {
    "raw": "found multiple access token tags",
    "en_US": "found multiple access token tags",
    "zh_CN": "",
    "arguments": [],
    "line": 53,
    "fileName": "src/main/java/org/zstack/storage/primary/xsky/XSkyApiInterceptor.java"
  },
  {
    "raw": "No access token found",
    "en_US": "No access token found",
    "zh_CN": "",
    "arguments": [],
    "line": 61,
    "fileName": "src/main/java/org/zstack/storage/primary/xsky/XSkyApiInterceptor.java"
  },
  {
    "raw": "KVM host[uuid: %s] fails to be added to zses primary storage[uuid: %s], %s",
    "en_US": "KVM host[uuid: {0}] fails to be added to zses primary storage[uuid: {1}], {2}",
    "zh_CN": "",
    "arguments": [
      "context.getInventory().getUuid()",
      "priUuid",
      "reply.getError()"
    ],
    "line": 94,
    "fileName": "src/main/java/org/zstack/storage/primary/zses/ZsesKvmFactory.java"
  },
  {
    "raw": "cannot find an available host for volume[uuid:%s]",
    "en_US": "cannot find an available host for volume[uuid:{0}]",
    "zh_CN": "找不到一个可用的物理机操作云盘[uuid:{0}]",
    "arguments": [
      "volumeUuid"
    ],
    "line": 87,
    "fileName": "src/main/java/org/zstack/storage/primary/zses/ZsesPrimaryStorageBase.java"
  },
  {
    "raw": "destination host is null",
    "en_US": "destination host is null",
    "zh_CN": "",
    "arguments": [],
    "line": 499,
    "fileName": "src/main/java/org/zstack/storage/primary/zses/ZsesPrimaryStorageBase.java"
  },
  {
    "raw": "unable to create the data volume[uuid: %s] on a zses primary storage[uuid:%s], because the hostUuid is not specified.",
    "en_US": "unable to create the data volume[uuid: {0}] on a zses primary storage[uuid:{1}], because the hostUuid is not specified.",
    "zh_CN": "",
    "arguments": [
      "msg.getVolumeUuid()",
      "self.getUuid()"
    ],
    "line": 621,
    "fileName": "src/main/java/org/zstack/storage/primary/zses/ZsesPrimaryStorageBase.java"
  },
  {
    "raw": "To create data volume on the zses primary storage, you must specify the host that the data volume is going to be created using the system tag [%s]",
    "en_US": "To create data volume on the zses primary storage, you must specify the host that the data volume is going to be created using the system tag [{0}]",
    "zh_CN": "",
    "arguments": [
      "LocalStorageSystemTags.DEST_HOST_FOR_CREATING_DATA_VOLUME.getTagFormat()"
    ],
    "line": 158,
    "fileName": "src/main/java/org/zstack/storage/primary/zses/ZsesPrimaryStorageFactory.java"
  },
  {
    "raw": "the host[uuid:%s] doesn\u0027t belong to the zses primary storage[uuid:%s]",
    "en_US": "the host[uuid:{0}] doesn\u0027t belong to the zses primary storage[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "hostUuid",
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 168,
    "fileName": "src/main/java/org/zstack/storage/primary/zses/ZsesPrimaryStorageFactory.java"
  },
  {
    "raw": "failed to upload bits from the Zses storage[uuid:%s, path:%s] to image store [hostname:%s], %s",
    "en_US": "failed to upload bits from the Zses storage[uuid:{0}, path:{1}] to image store [hostname:{2}], {3}",
    "zh_CN": "无法从Zses主存储[uuid:{0}, path:{1}]上传数据到镜像仓库[主机名:{2}]，因为{3}",
    "arguments": [
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "r.getHostname()",
      "rsp.getError()"
    ],
    "line": 451,
    "fileName": "src/main/java/org/zstack/storage/primary/zses/ZsesPrimarytoImageStoreKVMBackend.java"
  },
  {
    "raw": "volume snapshot[uuid:%s] is not on primary storage, cannot be backed up",
    "en_US": "volume snapshot[uuid:{0}] is not on primary storage, cannot be backed up",
    "zh_CN": "云盘快照[uuid:{0}]不在主存储上，不能备份",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 82,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java"
  },
  {
    "raw": "volume snapshot[uuid:%s] is already on backup storage[uuid: %s]",
    "en_US": "volume snapshot[uuid:{0}] is already on backup storage[uuid: {1}]",
    "zh_CN": "云盘快照[uuid:{0}]已经在镜像服务器[uuid: {1}]上",
    "arguments": [
      "msg.getUuid()",
      "msg.getBackupStorageUuid()"
    ],
    "line": 90,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java"
  },
  {
    "raw": "volume snapshot[uuid:%s] is on primary storage[uuid:%s] which is in zone[uuid:%s] that backup storage[uuid:%s] is not attached to",
    "en_US": "volume snapshot[uuid:{0}] is on primary storage[uuid:{1}] which is in zone[uuid:{2}] that backup storage[uuid:{3}] is not attached to",
    "zh_CN": "云盘快照存放在主存储[uuid:{1}]，而主存储[uuid:{1}]在未挂载镜像服务器[uuid:{3}]的区域[uuid:{2}]",
    "arguments": [
      "msg.getUuid()",
      "priUuid",
      "zoneUuid",
      "msg.getBackupStorageUuid()"
    ],
    "line": 102,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java"
  },
  {
    "raw": "either volumeUuid or treeUuid must be set",
    "en_US": "either volumeUuid or treeUuid must be set",
    "zh_CN": "云盘Uuid或者快照树Uuid必须设置",
    "arguments": [],
    "line": 110,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is not in status Ready, current is %s, can\u0027t create snapshot",
    "en_US": "volume[uuid:{0}] is not in status Ready, current is {1}, can\u0027t create snapshot",
    "zh_CN": "云盘[uuid:{0}]未出于就绪状态，当前是{1}，不能创建快照",
    "arguments": [
      "msg.getVolumeUuid()",
      "status"
    ],
    "line": 130,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java"
  },
  {
    "raw": "volume snapshot[uuid:%s] is in state %s, cannot revert volume to it",
    "en_US": "volume snapshot[uuid:{0}] is in state {1}, cannot revert volume to it",
    "zh_CN": "云盘快照[uuid:{0}]出于状态{1}，不能恢复云盘到该快照状态",
    "arguments": [
      "msg.getUuid()",
      "state"
    ],
    "line": 157,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java"
  },
  {
    "raw": "original volume for snapshot[uuid:%s] has been deleted, cannot revert volume to it",
    "en_US": "original volume for snapshot[uuid:{0}] has been deleted, cannot revert volume to it",
    "zh_CN": "快照[uuid:{0}]的原版云盘已经被删除，不能恢复云盘到该快照",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 162,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java"
  },
  {
    "raw": "primary storage[uuid:%s] doesn\u0027t support volume snapshot; cannot create snapshot for volume[uuid:%s]",
    "en_US": "primary storage[uuid:{0}] doesn\u0027t support volume snapshot; cannot create snapshot for volume[uuid:{1}]",
    "zh_CN": "主存储[uuid:{0}]不能支持云盘快照，不能为云盘[uuid:{1}]创建快照",
    "arguments": [
      "primaryStorageUuid",
      "vol.getUuid()"
    ],
    "line": 312,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java"
  },
  {
    "raw": "cannot find volume snapshot[uuid:%s, name:%s], it may have been deleted by previous operation",
    "en_US": "cannot find volume snapshot[uuid:{0}, name:{1}], it may have been deleted by previous operation",
    "zh_CN": "不能创建云盘快照[uuid:{0}, name:{1}]，该快照可能已经被以前的操作删除",
    "arguments": [
      "currentRoot.getUuid()",
      "currentRoot.getName()"
    ],
    "line": 132,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java"
  },
  {
    "raw": "failed to change status of volume snapshot[uuid:%s, name:%s] by status event[%s]",
    "en_US": "failed to change status of volume snapshot[uuid:{0}, name:{1}] by status event[{2}]",
    "zh_CN": "通过状态事件[{2}]改变云盘快照[uuid:{0}, name:{1}]失败",
    "arguments": [
      "failSnapshot.getUuid()",
      "failSnapshot.getName()",
      "evt"
    ],
    "line": 616,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java"
  },
  {
    "raw": "unable to reset volume[uuid:%s] to snapshot[uuid:%s], the vm[uuid:%s] volume attached to is not in Stopped state, current state is %s",
    "en_US": "unable to reset volume[uuid:{0}] to snapshot[uuid:{1}], the vm[uuid:{2}] volume attached to is not in Stopped state, current state is {3}",
    "zh_CN": "不能重置云盘[uuid:{0}]到快照[uuid:{1}]状态，云盘的虚拟机[uuid:{2}]未处于停止状态，当前状态是{3}",
    "arguments": [
      "rmsg.getVolume().getUuid()",
      "rmsg.getSnapshot().getUuid()",
      "rmsg.getVolume().getVmInstanceUuid()",
      "state"
    ],
    "line": 1210,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java"
  },
  {
    "raw": "the volume[uuid:%s] is not in status of deleted. This is operation is to recover a deleted data volume",
    "en_US": "the volume[uuid:{0}] is not in status of deleted. This is operation is to recover a deleted data volume",
    "zh_CN": "云盘[uuid:{0}]未处于删除状态。此操作将覆盖一个被删除的数据云盘",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 87,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s] is in status of deleted, cannot do the operation",
    "en_US": "the volume[uuid:{0}] is in status of deleted, cannot do the operation",
    "zh_CN": "云盘[uuid:{0}]已经被删除，不能执行此操作",
    "arguments": [
      "vol.getUuid()"
    ],
    "line": 183,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is not %s, it\u0027s %s",
    "en_US": "image[uuid:{0}] is not {1}, it\u0027s {2}",
    "zh_CN": "镜像[uuid:{0}]不是{1}，而是{2}",
    "arguments": [
      "msg.getImageUuid()",
      "ImageMediaType.DataVolumeTemplate",
      "type"
    ],
    "line": 106,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is not Enabled, it\u0027s %s",
    "en_US": "image[uuid:{0}] is not Enabled, it\u0027s {1}",
    "zh_CN": "镜像不能启用，此镜像是{1}",
    "arguments": [
      "img.getUuid()",
      "img.getState()"
    ],
    "line": 111,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is not Ready, it\u0027s %s",
    "en_US": "image[uuid:{0}] is not Ready, it\u0027s {1}",
    "zh_CN": "镜像未准备就绪，此镜像是{1}",
    "arguments": [
      "img.getUuid()",
      "img.getStatus()"
    ],
    "line": 115,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is Root volume, can not be attach to vm",
    "en_US": "volume[uuid:{0}] is Root volume, can not be attach to vm",
    "zh_CN": "云盘[uuid:{0}]是一个根云盘，不能被手动挂载到其他云主机。",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 126,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is in state[%s], data volume can only be attached when state is %s",
    "en_US": "volume[uuid:{0}] is in state[{1}], data volume can only be attached when state is {2}",
    "zh_CN": "云盘[uuid:{0}]处于[{1}]状态，数据云盘只能在处于{2}状态的时候挂载",
    "arguments": [
      "msg.getVolumeUuid()",
      "state",
      "VolumeState.Enabled"
    ],
    "line": 133,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is in status[%s], data volume can only be attached when status is %s or %S",
    "en_US": "volume[uuid:{0}] is in status[{1}], data volume can only be attached when status is {2} or %S",
    "zh_CN": "云盘[uuid:{0}]处于[{1}]，数据云盘只能在处于{2}或%S状态的时候挂载",
    "arguments": [
      "msg.getVolumeUuid()",
      "status",
      "VolumeStatus.Ready",
      "VolumeStatus.NotInstantiated"
    ],
    "line": 138,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "data volume[uuid:%s] is not attached to any vm, can\u0027t detach",
    "en_US": "data volume[uuid:{0}] is not attached to any vm, can\u0027t detach",
    "zh_CN": "数据云盘没有被挂载到任何云主机上，不能卸载",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 145,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "to detach shareable data volume[uuid:%s], vm uuid is needed.",
    "en_US": "to detach shareable data volume[uuid:{0}], vm uuid is needed.",
    "zh_CN": "卸载共享数据云盘[uuid:{0}]需要虚拟机的uuid",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 149,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s, name:%s] is Root Volume, can\u0027t detach it",
    "en_US": "the volume[uuid:{0}, name:{1}] is Root Volume, can\u0027t detach it",
    "zh_CN": "不能卸载根云盘[uuid:{0}, name:{1}]",
    "arguments": [
      "vol.getUuid()",
      "vol.getName()"
    ],
    "line": 165,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "the vm[uuid:%s] doesn\u0027t support to online attach volume[%s] on the basis of that the image platform type of the vm is other ",
    "en_US": "the vm[uuid:{0}] doesn\u0027t support to online attach volume[{1}] on the basis of that the image platform type of the vm is other ",
    "zh_CN": "云主机[uuid:{0}]不支持在线挂载云盘[{1}]。因为镜像平台类型和云主机平台类型不一致。",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getVolumeUuid()"
    ],
    "line": 179,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s, name:%s] is Root Volume, can\u0027t attach it",
    "en_US": "the volume[uuid:{0}, name:{1}] is Root Volume, can\u0027t attach it",
    "zh_CN": "不能挂载根云盘[uuid:{0}, name:{1}]",
    "arguments": [
      "vol.getUuid()",
      "vol.getName()"
    ],
    "line": 174,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "data volume[uuid:%s] is Disabled, can\u0027t attach",
    "en_US": "data volume[uuid:{0}] is Disabled, can\u0027t attach",
    "zh_CN": "数据云盘已被禁用，不能挂载",
    "arguments": [
      "vol.getUuid()"
    ],
    "line": 179,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "data volume[uuid:%s] has been attached to some vm, can\u0027t attach again",
    "en_US": "data volume[uuid:{0}] has been attached to some vm, can\u0027t attach again",
    "zh_CN": "数据云盘[uuid:{0}]已经被加载上云主机了，不能再次加载",
    "arguments": [
      "vol.getUuid()",
      "vol.getVmInstanceUuid()"
    ],
    "line": 176,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "data volume can only be attached when status is [%s, %s], current is %s",
    "en_US": "data volume can only be attached when status is [{0}, {1}], current is {2}",
    "zh_CN": "数据云盘仅能当处于[{0}, {1}]状态挂载，当前状态是{2}",
    "arguments": [
      "VolumeStatus.Ready",
      "VolumeStatus.NotInstantiated",
      "vol.getStatus()"
    ],
    "line": 181,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "data volume[uuid:%s] has format[%s] that can only be attached to hypervisor[%s], but vm[uuid:%s] has hypervisor type[%s]. Can\u0027t attach",
    "en_US": "data volume[uuid:{0}] has format[{1}] that can only be attached to hypervisor[{2}], but vm[uuid:{3}] has hypervisor type[{4}]. Can\u0027t attach",
    "zh_CN": "只有[{1}]格式的数据云盘[uuid:{0}]才能被挂载到管理程序[{2}]，但是虚拟机是[{4}]类型的管理程序，数据云盘不能挂载到该虚拟机",
    "arguments": [
      "vol.getUuid()",
      "vol.getFormat()",
      "volHvType",
      "msg.getVmInstanceUuid()",
      "hvType"
    ],
    "line": 192,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "hypervisor[%s] only allows max %s data volumes to be attached to a single vm; there have been %s data volumes attached to vm[uuid:%s]",
    "en_US": "hypervisor[{0}] only allows max {1} data volumes to be attached to a single vm; there have been {2} data volumes attached to vm[uuid:{3}]",
    "zh_CN": "[{0}]管理程序仅允许最大不超过{1}数据云盘挂载到单个虚拟机。{2} data volumes已经挂载到虚拟机[uuid:{3}]",
    "arguments": [
      "hvType",
      "maxDataVolumeNum",
      "count",
      "msg.getVmInstanceUuid()"
    ],
    "line": 225,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "it\u0027s not allowed to backup root volume, uuid:%s",
    "en_US": "it\u0027s not allowed to backup root volume, uuid:{0}",
    "zh_CN": "备份根云盘不被允许，uuid:{0}",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 215,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is Root volume, can\u0027t be deleted",
    "en_US": "volume[uuid:{0}] is Root volume, can\u0027t be deleted",
    "zh_CN": "不能删除根云盘[uuid:{0}]",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 234,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is already in status of deleted",
    "en_US": "volume[uuid:{0}] is already in status of deleted",
    "zh_CN": "云盘[uuid:{0}]早已处于被删除状态",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 260,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "it\u0027s not allowed to change state of root volume, uuid:%s",
    "en_US": "it\u0027s not allowed to change state of root volume, uuid:{0}",
    "zh_CN": "不能改变根云盘状态，uuid:{0}",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 253,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s, name:%s] is not deleted yet, can\u0027t expunge it",
    "en_US": "the volume[uuid:{0}, name:{1}] is not deleted yet, can\u0027t expunge it",
    "zh_CN": "云盘[uuid:{0}, name:{1}]仍未被删除，不能清除该云盘",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 450,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeBase.java"
  },
  {
    "raw": "the image[uuid:%s, name:%s] has been deleted on all backup storage",
    "en_US": "the image[uuid:{0}, name:{1}] has been deleted on all backup storage",
    "zh_CN": "镜像[uuid:{0}, name:{1}]已经从所有的镜像服务器中删除",
    "arguments": [
      "template.getUuid()",
      "template.getName()"
    ],
    "line": 325,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java"
  },
  {
    "raw": "cannot find a backup storage on which the image[uuid:%s] is that satisfies all conditions of: 1. has state Enabled 2. has status Connected. 3 has attached to zone in which primary storage[uuid:%s] is",
    "en_US": "cannot find a backup storage on which the image[uuid:{0}] is that satisfies all conditions of: 1. has state Enabled 2. has status Connected. 3 has attached to zone in which primary storage[uuid:{1}] is",
    "zh_CN": "无法找到一个镜像[uuid:%s]所在的镜像服务器符合全部的下列条件：状态启动[state:Enabled]，已连接[status:Connected]，被挂载到主存储[uuid:{1}]所在的区域中。",
    "arguments": [
      "template.getUuid()",
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 337,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java"
  },
  {
    "raw": "there should not be more than one %s implementation.",
    "en_US": "there should not be more than one {0} implementation.",
    "zh_CN": "不允许超过一种实现",
    "arguments": [
      "VolumeFactory.class.getSimpleName()"
    ],
    "line": 590,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java"
  },
  {
    "raw": "Cannot resize data volume[uuid:%s]",
    "en_US": "Cannot resize data volume[uuid:{0}]",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 42,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "Resize can only be execute when the vm\u0027s state is Stopped",
    "en_US": "Resize can only be execute when the vm\u0027s state is Stopped",
    "zh_CN": "",
    "arguments": [],
    "line": 53,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "Cannot shrink root volume[uuid:%s]\u0027s size",
    "en_US": "Cannot shrink root volume[uuid:{0}]\u0027s size",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 59,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "Minimum increase size should be larger than 512 bytes",
    "en_US": "Minimum increase size should be larger than 512 bytes",
    "zh_CN": "",
    "arguments": [],
    "line": 66,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "Increase size should be a multi of 512 bytes",
    "en_US": "Increase size should be a multi of 512 bytes",
    "zh_CN": "",
    "arguments": [],
    "line": 72,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "SharedVolume cannot be set bandwidth.",
    "en_US": "SharedVolume cannot be set bandwidth.",
    "zh_CN": "共享云盘不允许设置带宽",
    "arguments": [],
    "line": 34,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "no resource type[%s] found in tag system",
    "en_US": "no resource type[{0}] found in tag system",
    "zh_CN": "标签系统中不存在[{0}]资源类型",
    "arguments": [
      "msg.getResourceType()"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/tag/TagApiInterceptor.java"
  },
  {
    "raw": "tag[uuid:%s] is an inherent system tag, can not be removed",
    "en_US": "tag[uuid:{0}] is an inherent system tag, can not be removed",
    "zh_CN": "固有系统标签[uuid:{0}]禁止移除",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/tag/TagApiInterceptor.java"
  },
  {
    "raw": "The argument :\u0027resourceType\u0027 doesn\u0027t match uuid",
    "en_US": "The argument :\u0027resourceType\u0027 doesn\u0027t match uuid",
    "zh_CN": "参数：资源类型（resourceType）与UUID不匹配。",
    "arguments": [],
    "line": 99,
    "fileName": "src/main/java/org/zstack/tag/TagApiInterceptor.java"
  },
  {
    "raw": "Duplicated Tag[tag:%s, type:%s, resourceType:%s, resourceUuid:%s]",
    "en_US": "Duplicated Tag[tag:{0}, type:{1}, resourceType:{2}, resourceUuid:{3}]",
    "zh_CN": "标签[tag:{0}, type:{1}, resourceType:{2}, resourceUuid:{3}]重复",
    "arguments": [
      "tag",
      "type",
      "resourceType",
      "resourceUuid"
    ],
    "line": 199,
    "fileName": "src/main/java/org/zstack/tag/TagManagerImpl.java"
  },
  {
    "raw": "no system tag matches[%s] for resourceType[%s]",
    "en_US": "no system tag matches[{0}] for resourceType[{1}]",
    "zh_CN": "",
    "arguments": [
      "tag",
      "resourceType"
    ],
    "line": 629,
    "fileName": "src/main/java/org/zstack/tag/TagManagerImpl.java"
  },
  {
    "raw": "no system tag matches %s",
    "en_US": "no system tag matches {0}",
    "zh_CN": "没有找到匹配{0}的系统标签",
    "arguments": [
      "tag"
    ],
    "line": 742,
    "fileName": "src/main/java/org/zstack/tag/TagManagerImpl.java"
  },
  {
    "raw": "the usb device[uuid:%s] has already been attached to another vm[uuid:%s]",
    "en_US": "the usb device[uuid:{0}] has already been attached to another vm[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getUsbDeviceUuid()",
      "usb.getVmInstanceUuid()"
    ],
    "line": 50,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "the usb device[uuid:%s] is not in attachable state of %s",
    "en_US": "the usb device[uuid:{0}] is not in attachable state of {1}",
    "zh_CN": "",
    "arguments": [
      "msg.getUsbDeviceUuid()",
      "UsbDeviceState.Enabled"
    ],
    "line": 57,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "the vm instance[uuid:%s] is not in attachable state of %s for usb device",
    "en_US": "the vm instance[uuid:{0}] is not in attachable state of {1} for usb device",
    "zh_CN": "",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "allowedVmInstanceAttachableState"
    ],
    "line": 65,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "the host that the usb device[uuid:%s] pluged in is not in valid state[%s] or status[%s]",
    "en_US": "the host that the usb device[uuid:{0}] pluged in is not in valid state[{1}] or status[{2}]",
    "zh_CN": "",
    "arguments": [
      "usb.getHostUuid()",
      "msg.getUsbDeviceUuid()",
      "HostState.Enabled",
      "HostStatus.Connected"
    ],
    "line": 74,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "the usb device[uuid:%s] has different hostUuid than devices that already attached to the vm instance[uuid:%s]",
    "en_US": "the usb device[uuid:{0}] has different hostUuid than devices that already attached to the vm instance[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "usb.getUuid()",
      "vm.getUuid()"
    ],
    "line": 87,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "the usb device[uuid:%s] is not attached to any vm instance.",
    "en_US": "the usb device[uuid:{0}] is not attached to any vm instance.",
    "zh_CN": "",
    "arguments": [
      "usb.getUuid()"
    ],
    "line": 99,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "the vm instance that the usb device[uuid:%s] is attached to is not in detachable state of %s",
    "en_US": "the vm instance that the usb device[uuid:{0}] is attached to is not in detachable state of {1}",
    "zh_CN": "",
    "arguments": [
      "usb.getUuid()",
      "allowedVmInstanceDetachableState"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "vm instance[uuid:%s] not in attachable state of %s for usb device",
    "en_US": "vm instance[uuid:{0}] not in attachable state of {1} for usb device",
    "zh_CN": "",
    "arguments": [
      "vm.getUuid()",
      "allowedVmInstanceAttachableState"
    ],
    "line": 117,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "cannot disable usb device[uuid:%s] when it\u0027s attached to a vm instance",
    "en_US": "cannot disable usb device[uuid:{0}] when it\u0027s attached to a vm instance",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 128,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "cannot attach the usb device[uuid:%s] to vm[uuid:%s] due to host allocation",
    "en_US": "cannot attach the usb device[uuid:{0}] to vm[uuid:{1}] due to host allocation",
    "zh_CN": "",
    "arguments": [
      "msg.getUsbDeviceUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 147,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceManager.java"
  },
  {
    "raw": "cannot migrate vm[uuid:%s] because there are usb devices attached",
    "en_US": "cannot migrate vm[uuid:{0}] because there are usb devices attached",
    "zh_CN": "",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 422,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceManager.java"
  },
  {
    "raw": "cannot migrate root volume[uuid:%s] because there are usb devices attached",
    "en_US": "cannot migrate root volume[uuid:{0}] because there are usb devices attached",
    "zh_CN": "",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 438,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceManager.java"
  },
  {
    "raw": "vCenter login name expected",
    "en_US": "vCenter login name expected",
    "zh_CN": "缺少vCenter登录用户名",
    "arguments": [],
    "line": 35,
    "fileName": "src/main/java/org/zstack/vmware/VCenterApiInterceptor.java"
  },
  {
    "raw": "domainName[%s] is neither an IPv4 address nor a valid hostname",
    "en_US": "domainName[{0}] is neither an IPv4 address nor a valid hostname",
    "zh_CN": "域名[{0}]不是一个IPv4地址或有效的主机名",
    "arguments": [
      "msg.getDomainName()"
    ],
    "line": 39,
    "fileName": "src/main/java/org/zstack/vmware/VCenterApiInterceptor.java"
  },
  {
    "raw": "vCenter [domainName:%s] has been added",
    "en_US": "vCenter [domainName:{0}] has been added",
    "zh_CN": "vCenter[domainName:{0}]已经被添加",
    "arguments": [
      "msg.getDomainName()"
    ],
    "line": 45,
    "fileName": "src/main/java/org/zstack/vmware/VCenterApiInterceptor.java"
  },
  {
    "raw": "failed to create VCenterServiceInstance[vCenterUrl:%s, userName:%s, password:%s], errorMessage: %s",
    "en_US": "failed to create VCenterServiceInstance[vCenterUrl:{0}, userName:{1}, password:{2}], errorMessage: {3}",
    "zh_CN": "创建VCenterServiceInstance[vCenterUrl:{0}, userName:{1}, password:{2}]失败，错误消息：{3}。",
    "arguments": [
      "vCenterUrl",
      "vcvo.getUserName()",
      "vcvo.getPassword()",
      "ex.getMessage()"
    ],
    "line": 165,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "vpc l3 network[uuid:%s] can not detach from vpc vrouter[uuid:%s] sine vm nics[%s] still used in l3",
    "en_US": "vpc l3 network[uuid:{0}] can not detach from vpc vrouter[uuid:{1}] sine vm nics[{2}] still used in l3",
    "zh_CN": "",
    "arguments": [
      "l3NetworkVO.getUuid()",
      "vmInstanceVO.getUuid()",
      "vmNicVOS.stream().map( n -\u003e n.getUuid()).collect(Collectors.toList())"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "only vpc l3 network can attach to vpc vrouter",
    "en_US": "only vpc l3 network can attach to vpc vrouter",
    "zh_CN": "",
    "arguments": [],
    "line": 120,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "vpc vrouter not support loadbalancer service now",
    "en_US": "vpc vrouter not support loadbalancer service now",
    "zh_CN": "",
    "arguments": [],
    "line": 128,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "no ip ranges attached with l3 network[uuid:%s]",
    "en_US": "no ip ranges attached with l3 network[uuid:{0}]",
    "zh_CN": "",
    "arguments": [
      "l3NetworkVO.getUuid()"
    ],
    "line": 134,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "the gateway[uuid:%s] of l3[uuid:%s] has been occupied",
    "en_US": "the gateway[uuid:{0}] of l3[uuid:{1}] has been occupied",
    "zh_CN": "",
    "arguments": [
      "gateway",
      "msg.getL3NetworkUuid()"
    ],
    "line": 152,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "the static ip[%s] specified in message not equals to gateway ip[%s] of l3 network[uuid:%s]",
    "en_US": "the static ip[{0}] specified in message not equals to gateway ip[{1}] of l3 network[uuid:{2}]",
    "zh_CN": "",
    "arguments": [
      "msg.getStaticIp()",
      "gateway",
      "l3NetworkVO.getUuid()"
    ],
    "line": 151,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "VPC L3Network [uuid: %s] must be bound to VPC router before creating ipsec",
    "en_US": "VPC L3Network [uuid: {0}] must be bound to VPC router before creating ipsec",
    "zh_CN": "",
    "arguments": [
      "localL3NetworlUuid"
    ],
    "line": 177,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "there are %s IPsecConnections to peerAddr [ip:%s] already created",
    "en_US": "there are {0} IPsecConnections to peerAddr [ip:{1}] already created",
    "zh_CN": "",
    "arguments": [
      "Long.toString(count)",
      "msg.getPeerAddress()"
    ],
    "line": 184,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "vpc l3 network must attach a vpc vrouter first before do anything related to vrouter(like start/stop vm, create lb, etc.)",
    "en_US": "vpc l3 network must attach a vpc vrouter first before do anything related to vrouter(like start/stop vm, create lb, etc.)",
    "zh_CN": "",
    "arguments": [],
    "line": 240,
    "fileName": "src/main/java/org/zstack/vpc/VpcManagerImpl.java"
  },
  {
    "raw": "can not detach nic from vpc vr[uuid:%s]",
    "en_US": "can not detach nic from vpc vr[uuid:{0}]",
    "zh_CN": "",
    "arguments": [
      "vpc.getUuid()"
    ],
    "line": 144,
    "fileName": "src/main/java/org/zstack/vpc/VpcVRouterFactory.java"
  }
]
